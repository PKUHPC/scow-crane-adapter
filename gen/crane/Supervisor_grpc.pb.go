//*
// Copyright (c) 2024 Peking University and Peking University
// Changsha Institute for Computing and Digital Economy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: Supervisor.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Supervisor_ExecuteTask_FullMethodName         = "/crane.grpc.supervisor.Supervisor/ExecuteTask"
	Supervisor_QueryEnvMap_FullMethodName         = "/crane.grpc.supervisor.Supervisor/QueryEnvMap"
	Supervisor_CheckStatus_FullMethodName         = "/crane.grpc.supervisor.Supervisor/CheckStatus"
	Supervisor_ChangeTaskTimeLimit_FullMethodName = "/crane.grpc.supervisor.Supervisor/ChangeTaskTimeLimit"
	Supervisor_TerminateTask_FullMethodName       = "/crane.grpc.supervisor.Supervisor/TerminateTask"
	Supervisor_ShutdownSupervisor_FullMethodName  = "/crane.grpc.supervisor.Supervisor/ShutdownSupervisor"
)

// SupervisorClient is the client API for Supervisor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupervisorClient interface {
	ExecuteTask(ctx context.Context, in *TaskExecutionRequest, opts ...grpc.CallOption) (*TaskExecutionReply, error)
	QueryEnvMap(ctx context.Context, in *QueryStepEnvRequest, opts ...grpc.CallOption) (*QueryStepEnvReply, error)
	CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusReply, error)
	ChangeTaskTimeLimit(ctx context.Context, in *ChangeTaskTimeLimitRequest, opts ...grpc.CallOption) (*ChangeTaskTimeLimitReply, error)
	TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskReply, error)
	ShutdownSupervisor(ctx context.Context, in *ShutdownSupervisorRequest, opts ...grpc.CallOption) (*ShutdownSupervisorReply, error)
}

type supervisorClient struct {
	cc grpc.ClientConnInterface
}

func NewSupervisorClient(cc grpc.ClientConnInterface) SupervisorClient {
	return &supervisorClient{cc}
}

func (c *supervisorClient) ExecuteTask(ctx context.Context, in *TaskExecutionRequest, opts ...grpc.CallOption) (*TaskExecutionReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskExecutionReply)
	err := c.cc.Invoke(ctx, Supervisor_ExecuteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) QueryEnvMap(ctx context.Context, in *QueryStepEnvRequest, opts ...grpc.CallOption) (*QueryStepEnvReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryStepEnvReply)
	err := c.cc.Invoke(ctx, Supervisor_QueryEnvMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) CheckStatus(ctx context.Context, in *CheckStatusRequest, opts ...grpc.CallOption) (*CheckStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckStatusReply)
	err := c.cc.Invoke(ctx, Supervisor_CheckStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ChangeTaskTimeLimit(ctx context.Context, in *ChangeTaskTimeLimitRequest, opts ...grpc.CallOption) (*ChangeTaskTimeLimitReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeTaskTimeLimitReply)
	err := c.cc.Invoke(ctx, Supervisor_ChangeTaskTimeLimit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateTaskReply)
	err := c.cc.Invoke(ctx, Supervisor_TerminateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ShutdownSupervisor(ctx context.Context, in *ShutdownSupervisorRequest, opts ...grpc.CallOption) (*ShutdownSupervisorReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownSupervisorReply)
	err := c.cc.Invoke(ctx, Supervisor_ShutdownSupervisor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupervisorServer is the server API for Supervisor service.
// All implementations should embed UnimplementedSupervisorServer
// for forward compatibility.
type SupervisorServer interface {
	ExecuteTask(context.Context, *TaskExecutionRequest) (*TaskExecutionReply, error)
	QueryEnvMap(context.Context, *QueryStepEnvRequest) (*QueryStepEnvReply, error)
	CheckStatus(context.Context, *CheckStatusRequest) (*CheckStatusReply, error)
	ChangeTaskTimeLimit(context.Context, *ChangeTaskTimeLimitRequest) (*ChangeTaskTimeLimitReply, error)
	TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskReply, error)
	ShutdownSupervisor(context.Context, *ShutdownSupervisorRequest) (*ShutdownSupervisorReply, error)
}

// UnimplementedSupervisorServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSupervisorServer struct{}

func (UnimplementedSupervisorServer) ExecuteTask(context.Context, *TaskExecutionRequest) (*TaskExecutionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteTask not implemented")
}
func (UnimplementedSupervisorServer) QueryEnvMap(context.Context, *QueryStepEnvRequest) (*QueryStepEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryEnvMap not implemented")
}
func (UnimplementedSupervisorServer) CheckStatus(context.Context, *CheckStatusRequest) (*CheckStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedSupervisorServer) ChangeTaskTimeLimit(context.Context, *ChangeTaskTimeLimitRequest) (*ChangeTaskTimeLimitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTaskTimeLimit not implemented")
}
func (UnimplementedSupervisorServer) TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTask not implemented")
}
func (UnimplementedSupervisorServer) ShutdownSupervisor(context.Context, *ShutdownSupervisorRequest) (*ShutdownSupervisorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownSupervisor not implemented")
}
func (UnimplementedSupervisorServer) testEmbeddedByValue() {}

// UnsafeSupervisorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupervisorServer will
// result in compilation errors.
type UnsafeSupervisorServer interface {
	mustEmbedUnimplementedSupervisorServer()
}

func RegisterSupervisorServer(s grpc.ServiceRegistrar, srv SupervisorServer) {
	// If the following call pancis, it indicates UnimplementedSupervisorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Supervisor_ServiceDesc, srv)
}

func _Supervisor_ExecuteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ExecuteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Supervisor_ExecuteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ExecuteTask(ctx, req.(*TaskExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_QueryEnvMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStepEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).QueryEnvMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Supervisor_QueryEnvMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).QueryEnvMap(ctx, req.(*QueryStepEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Supervisor_CheckStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).CheckStatus(ctx, req.(*CheckStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ChangeTaskTimeLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeTaskTimeLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ChangeTaskTimeLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Supervisor_ChangeTaskTimeLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ChangeTaskTimeLimit(ctx, req.(*ChangeTaskTimeLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_TerminateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).TerminateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Supervisor_TerminateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).TerminateTask(ctx, req.(*TerminateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ShutdownSupervisor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownSupervisorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ShutdownSupervisor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Supervisor_ShutdownSupervisor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ShutdownSupervisor(ctx, req.(*ShutdownSupervisorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Supervisor_ServiceDesc is the grpc.ServiceDesc for Supervisor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Supervisor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crane.grpc.supervisor.Supervisor",
	HandlerType: (*SupervisorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteTask",
			Handler:    _Supervisor_ExecuteTask_Handler,
		},
		{
			MethodName: "QueryEnvMap",
			Handler:    _Supervisor_QueryEnvMap_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _Supervisor_CheckStatus_Handler,
		},
		{
			MethodName: "ChangeTaskTimeLimit",
			Handler:    _Supervisor_ChangeTaskTimeLimit_Handler,
		},
		{
			MethodName: "TerminateTask",
			Handler:    _Supervisor_TerminateTask_Handler,
		},
		{
			MethodName: "ShutdownSupervisor",
			Handler:    _Supervisor_ShutdownSupervisor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Supervisor.proto",
}
