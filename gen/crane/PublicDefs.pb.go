//*
// Copyright (c) 2024 Peking University and Peking University
// Changsha Institute for Computing and Digital Economy
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: PublicDefs.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PartitionState int32

const (
	PartitionState_PARTITION_UP   PartitionState = 0
	PartitionState_PARTITION_DOWN PartitionState = 1
)

// Enum value maps for PartitionState.
var (
	PartitionState_name = map[int32]string{
		0: "PARTITION_UP",
		1: "PARTITION_DOWN",
	}
	PartitionState_value = map[string]int32{
		"PARTITION_UP":   0,
		"PARTITION_DOWN": 1,
	}
)

func (x PartitionState) Enum() *PartitionState {
	p := new(PartitionState)
	*p = x
	return p
}

func (x PartitionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionState) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[0].Descriptor()
}

func (PartitionState) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[0]
}

func (x PartitionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionState.Descriptor instead.
func (PartitionState) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{0}
}

type CranedResourceState int32

const (
	CranedResourceState_CRANE_IDLE  CranedResourceState = 0
	CranedResourceState_CRANE_MIX   CranedResourceState = 1
	CranedResourceState_CRANE_ALLOC CranedResourceState = 2
	CranedResourceState_CRANE_DOWN  CranedResourceState = 3
)

// Enum value maps for CranedResourceState.
var (
	CranedResourceState_name = map[int32]string{
		0: "CRANE_IDLE",
		1: "CRANE_MIX",
		2: "CRANE_ALLOC",
		3: "CRANE_DOWN",
	}
	CranedResourceState_value = map[string]int32{
		"CRANE_IDLE":  0,
		"CRANE_MIX":   1,
		"CRANE_ALLOC": 2,
		"CRANE_DOWN":  3,
	}
)

func (x CranedResourceState) Enum() *CranedResourceState {
	p := new(CranedResourceState)
	*p = x
	return p
}

func (x CranedResourceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CranedResourceState) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[1].Descriptor()
}

func (CranedResourceState) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[1]
}

func (x CranedResourceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CranedResourceState.Descriptor instead.
func (CranedResourceState) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{1}
}

type CranedControlState int32

const (
	CranedControlState_CRANE_NONE  CranedControlState = 0
	CranedControlState_CRANE_DRAIN CranedControlState = 1
)

// Enum value maps for CranedControlState.
var (
	CranedControlState_name = map[int32]string{
		0: "CRANE_NONE",
		1: "CRANE_DRAIN",
	}
	CranedControlState_value = map[string]int32{
		"CRANE_NONE":  0,
		"CRANE_DRAIN": 1,
	}
)

func (x CranedControlState) Enum() *CranedControlState {
	p := new(CranedControlState)
	*p = x
	return p
}

func (x CranedControlState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CranedControlState) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[2].Descriptor()
}

func (CranedControlState) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[2]
}

func (x CranedControlState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CranedControlState.Descriptor instead.
func (CranedControlState) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{2}
}

type TaskStatus int32

const (
	TaskStatus_Pending         TaskStatus = 0
	TaskStatus_Running         TaskStatus = 1
	TaskStatus_Completed       TaskStatus = 2
	TaskStatus_Failed          TaskStatus = 3
	TaskStatus_ExceedTimeLimit TaskStatus = 4
	TaskStatus_Cancelled       TaskStatus = 5
	TaskStatus_Invalid         TaskStatus = 15
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0:  "Pending",
		1:  "Running",
		2:  "Completed",
		3:  "Failed",
		4:  "ExceedTimeLimit",
		5:  "Cancelled",
		15: "Invalid",
	}
	TaskStatus_value = map[string]int32{
		"Pending":         0,
		"Running":         1,
		"Completed":       2,
		"Failed":          3,
		"ExceedTimeLimit": 4,
		"Cancelled":       5,
		"Invalid":         15,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[3].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[3]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{3}
}

type TaskType int32

const (
	TaskType_Interactive TaskType = 0
	TaskType_Batch       TaskType = 1
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "Interactive",
		1: "Batch",
	}
	TaskType_value = map[string]int32{
		"Interactive": 0,
		"Batch":       1,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[4].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[4]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{4}
}

type InteractiveTaskType int32

const (
	InteractiveTaskType_Calloc InteractiveTaskType = 0
	InteractiveTaskType_Crun   InteractiveTaskType = 1
)

// Enum value maps for InteractiveTaskType.
var (
	InteractiveTaskType_name = map[int32]string{
		0: "Calloc",
		1: "Crun",
	}
	InteractiveTaskType_value = map[string]int32{
		"Calloc": 0,
		"Crun":   1,
	}
)

func (x InteractiveTaskType) Enum() *InteractiveTaskType {
	p := new(InteractiveTaskType)
	*p = x
	return p
}

func (x InteractiveTaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InteractiveTaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[5].Descriptor()
}

func (InteractiveTaskType) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[5]
}

func (x InteractiveTaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InteractiveTaskType.Descriptor instead.
func (InteractiveTaskType) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{5}
}

type ErrCode int32

const (
	ErrCode_SUCCESS                              ErrCode = 0 // Success
	ErrCode_ERR_INVALID_UID                      ErrCode = 1 // Invalid UID passed
	ErrCode_ERR_INVALID_OP_USER                  ErrCode = 2 // Invalid operation user
	ErrCode_ERR_INVALID_USER                     ErrCode = 3 // Invalid user
	ErrCode_ERR_PERMISSION_USER                  ErrCode = 4 // User permissions too low, no permission to operate
	ErrCode_ERR_BLOCKED_USER                     ErrCode = 5
	ErrCode_ERR_USER_ALREADY_EXISTS              ErrCode = 6 // User duplicate account insertion
	ErrCode_ERR_USER_ACCESS_TO_ACCOUNT_DENIED    ErrCode = 7 // User does not have permission for the account
	ErrCode_ERR_INVALID_ADMIN_LEVEL              ErrCode = 8 // Invalid permission level
	ErrCode_ERR_USER_ACCOUNT_MISMATCH            ErrCode = 9 // User does not belong to the account
	ErrCode_ERR_NO_ACCOUNT_SPECIFIED             ErrCode = 10
	ErrCode_ERR_INVALID_ACCOUNT                  ErrCode = 11 // Invalid account
	ErrCode_ERR_ACCOUNT_ALREADY_EXISTS           ErrCode = 12 // Duplicate account insertion
	ErrCode_ERR_INVALID_PARENT_ACCOUNT           ErrCode = 13 // Invalid parent account
	ErrCode_ERR_ACCOUNT_HAS_CHILDREN             ErrCode = 14 // Account has child nodesï¼Œcannot be deleted.
	ErrCode_ERR_BLOCKED_ACCOUNT                  ErrCode = 15
	ErrCode_ERR_INVALID_PARTITION                ErrCode = 16 // Invalid partition, partition does not exist
	ErrCode_ERR_PARTITION_MISSING                ErrCode = 17 // Account/user does not include this partition
	ErrCode_ERR_PARTITION_ALREADY_EXISTS         ErrCode = 18 // Account/user duplicate insertion
	ErrCode_ERR_PARENT_ACCOUNT_PARTITION_MISSING ErrCode = 19 // Parent account does not include this partition
	ErrCode_ERR_USER_EMPTY_PARTITION             ErrCode = 20 // Cannot add QoS when user has no partition
	ErrCode_ERR_CHILD_HAS_PARTITION              ErrCode = 21 // Failed to delete the account partition as child nodes contain this partition.
	ErrCode_ERR_HAS_NO_QOS_IN_PARTITION          ErrCode = 22
	ErrCode_ERR_HAS_ALLOWED_QOS_IN_PARTITION     ErrCode = 23
	ErrCode_ERR_INVALID_QOS                      ErrCode = 24 // Invalid QoS, QoS does not exist
	ErrCode_ERR_DB_QOS_ALREADY_EXISTS            ErrCode = 25 // Duplicate QoS insertion in the database.
	ErrCode_ERR_QOS_REFERENCES_EXIST             ErrCode = 26 // QoS reference count is not zero.
	ErrCode_ERR_CONVERT_TO_INTEGER               ErrCode = 27 // String to integer conversion failed
	ErrCode_ERR_TIME_LIMIT                       ErrCode = 28 // Invalid time value
	ErrCode_ERR_QOS_MISSING                      ErrCode = 29 // Account/user does not include this QoS.
	ErrCode_ERR_QOS_ALREADY_EXISTS               ErrCode = 30 // Account/user duplicate insertion.
	ErrCode_ERR_PARENT_ACCOUNT_QOS_MISSING       ErrCode = 31 // Parent account does not include this QoS.
	ErrCode_ERR_SET_ALLOWED_QOS                  ErrCode = 32 // QoS is the default QoS, but not found in the new QoS list.
	ErrCode_ERR_DEFAULT_QOS_NOT_INHERITED        ErrCode = 33 // Default QoS is not in the allowed QoS list
	ErrCode_ERR_DUPLICATE_DEFAULT_QOS            ErrCode = 34 // Duplicate default QoS setting
	ErrCode_ERR_CHILD_HAS_DEFAULT_QOS            ErrCode = 35 // Failed to delete the account QoS as child nodes have set it as the default QoS.
	ErrCode_ERR_SET_ACCOUNT_QOS                  ErrCode = 36 // QoS is used by some descendant node or itself of the account.
	ErrCode_ERR_SET_DEFAULT_QOS                  ErrCode = 37 // Qos not in allowed qos list or is already the default qos
	ErrCode_ERR_DEFAULT_QOS_MODIFICATION_DENIED  ErrCode = 38 //  // QoS cannot be directly deleted when it is set as the default QoS.
	ErrCode_ERR_UPDATE_DATABASE                  ErrCode = 39 // Database update failed
	ErrCode_ERR_GENERIC_FAILURE                  ErrCode = 40
	ErrCode_ERR_NO_RESOURCE                      ErrCode = 41
	ErrCode_ERR_NON_EXISTENT                     ErrCode = 42
	ErrCode_ERR_INVALID_NODE_NUM                 ErrCode = 43
	ErrCode_ERR_INVAILD_NODE_LIST                ErrCode = 44
	ErrCode_ERR_INVAILD_EX_NODE_LIST             ErrCode = 45
	ErrCode_ERR_TIME_TIMIT_BEYOND                ErrCode = 46
	ErrCode_ERR_CPUS_PER_TASK_BEYOND             ErrCode = 47
	ErrCode_ERR_NO_ENOUGH_NODE                   ErrCode = 48
	ErrCode_ERR_SYSTEM_ERR                       ErrCode = 49
	ErrCode_ERR_EXISTING_TASK                    ErrCode = 50
	ErrCode_ERR_BEYOND_TASK_ID                   ErrCode = 51
	ErrCode_ERR_INVALID_PARAM                    ErrCode = 52
	ErrCode_ERR_STOP                             ErrCode = 53
	ErrCode_ERR_PERMISSION_DENIED                ErrCode = 54
	ErrCode_ERR_CONNECTION_TIMEOUT               ErrCode = 55
	ErrCode_ERR_CONNECTION_ABORTED               ErrCode = 56
	ErrCode_ERR_RPC_FAILURE                      ErrCode = 57
	ErrCode_ERR_TOKEN_REQUEST_FAILURE            ErrCode = 58
	ErrCode_ERR_STREAM_BROKEN                    ErrCode = 59
	ErrCode_ERR_INVALID_STUB                     ErrCode = 60
	ErrCode_ERR_CGROUP                           ErrCode = 61
	ErrCode_ERR_PROTOBUF                         ErrCode = 62
	ErrCode_ERR_LIB_EVENT                        ErrCode = 63
	ErrCode_ERR_NO_AVAIL_NODE                    ErrCode = 64
	ErrCode_ERR_MAX_JOB_COUNT_PER_USER           ErrCode = 65
	ErrCode_ERR_USER_NO_PRIVILEGE                ErrCode = 66
	ErrCode_ERR_NOT_IN_ALLOWED_LIST              ErrCode = 67 // The current account is not in the allowed account list for the partition.
	ErrCode_ERR_IN_DENIED_LIST                   ErrCode = 68 // The current account has been explicitly added to the deny list for the partition.
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "ERR_INVALID_UID",
		2:  "ERR_INVALID_OP_USER",
		3:  "ERR_INVALID_USER",
		4:  "ERR_PERMISSION_USER",
		5:  "ERR_BLOCKED_USER",
		6:  "ERR_USER_ALREADY_EXISTS",
		7:  "ERR_USER_ACCESS_TO_ACCOUNT_DENIED",
		8:  "ERR_INVALID_ADMIN_LEVEL",
		9:  "ERR_USER_ACCOUNT_MISMATCH",
		10: "ERR_NO_ACCOUNT_SPECIFIED",
		11: "ERR_INVALID_ACCOUNT",
		12: "ERR_ACCOUNT_ALREADY_EXISTS",
		13: "ERR_INVALID_PARENT_ACCOUNT",
		14: "ERR_ACCOUNT_HAS_CHILDREN",
		15: "ERR_BLOCKED_ACCOUNT",
		16: "ERR_INVALID_PARTITION",
		17: "ERR_PARTITION_MISSING",
		18: "ERR_PARTITION_ALREADY_EXISTS",
		19: "ERR_PARENT_ACCOUNT_PARTITION_MISSING",
		20: "ERR_USER_EMPTY_PARTITION",
		21: "ERR_CHILD_HAS_PARTITION",
		22: "ERR_HAS_NO_QOS_IN_PARTITION",
		23: "ERR_HAS_ALLOWED_QOS_IN_PARTITION",
		24: "ERR_INVALID_QOS",
		25: "ERR_DB_QOS_ALREADY_EXISTS",
		26: "ERR_QOS_REFERENCES_EXIST",
		27: "ERR_CONVERT_TO_INTEGER",
		28: "ERR_TIME_LIMIT",
		29: "ERR_QOS_MISSING",
		30: "ERR_QOS_ALREADY_EXISTS",
		31: "ERR_PARENT_ACCOUNT_QOS_MISSING",
		32: "ERR_SET_ALLOWED_QOS",
		33: "ERR_DEFAULT_QOS_NOT_INHERITED",
		34: "ERR_DUPLICATE_DEFAULT_QOS",
		35: "ERR_CHILD_HAS_DEFAULT_QOS",
		36: "ERR_SET_ACCOUNT_QOS",
		37: "ERR_SET_DEFAULT_QOS",
		38: "ERR_DEFAULT_QOS_MODIFICATION_DENIED",
		39: "ERR_UPDATE_DATABASE",
		40: "ERR_GENERIC_FAILURE",
		41: "ERR_NO_RESOURCE",
		42: "ERR_NON_EXISTENT",
		43: "ERR_INVALID_NODE_NUM",
		44: "ERR_INVAILD_NODE_LIST",
		45: "ERR_INVAILD_EX_NODE_LIST",
		46: "ERR_TIME_TIMIT_BEYOND",
		47: "ERR_CPUS_PER_TASK_BEYOND",
		48: "ERR_NO_ENOUGH_NODE",
		49: "ERR_SYSTEM_ERR",
		50: "ERR_EXISTING_TASK",
		51: "ERR_BEYOND_TASK_ID",
		52: "ERR_INVALID_PARAM",
		53: "ERR_STOP",
		54: "ERR_PERMISSION_DENIED",
		55: "ERR_CONNECTION_TIMEOUT",
		56: "ERR_CONNECTION_ABORTED",
		57: "ERR_RPC_FAILURE",
		58: "ERR_TOKEN_REQUEST_FAILURE",
		59: "ERR_STREAM_BROKEN",
		60: "ERR_INVALID_STUB",
		61: "ERR_CGROUP",
		62: "ERR_PROTOBUF",
		63: "ERR_LIB_EVENT",
		64: "ERR_NO_AVAIL_NODE",
		65: "ERR_MAX_JOB_COUNT_PER_USER",
		66: "ERR_USER_NO_PRIVILEGE",
		67: "ERR_NOT_IN_ALLOWED_LIST",
		68: "ERR_IN_DENIED_LIST",
	}
	ErrCode_value = map[string]int32{
		"SUCCESS":                              0,
		"ERR_INVALID_UID":                      1,
		"ERR_INVALID_OP_USER":                  2,
		"ERR_INVALID_USER":                     3,
		"ERR_PERMISSION_USER":                  4,
		"ERR_BLOCKED_USER":                     5,
		"ERR_USER_ALREADY_EXISTS":              6,
		"ERR_USER_ACCESS_TO_ACCOUNT_DENIED":    7,
		"ERR_INVALID_ADMIN_LEVEL":              8,
		"ERR_USER_ACCOUNT_MISMATCH":            9,
		"ERR_NO_ACCOUNT_SPECIFIED":             10,
		"ERR_INVALID_ACCOUNT":                  11,
		"ERR_ACCOUNT_ALREADY_EXISTS":           12,
		"ERR_INVALID_PARENT_ACCOUNT":           13,
		"ERR_ACCOUNT_HAS_CHILDREN":             14,
		"ERR_BLOCKED_ACCOUNT":                  15,
		"ERR_INVALID_PARTITION":                16,
		"ERR_PARTITION_MISSING":                17,
		"ERR_PARTITION_ALREADY_EXISTS":         18,
		"ERR_PARENT_ACCOUNT_PARTITION_MISSING": 19,
		"ERR_USER_EMPTY_PARTITION":             20,
		"ERR_CHILD_HAS_PARTITION":              21,
		"ERR_HAS_NO_QOS_IN_PARTITION":          22,
		"ERR_HAS_ALLOWED_QOS_IN_PARTITION":     23,
		"ERR_INVALID_QOS":                      24,
		"ERR_DB_QOS_ALREADY_EXISTS":            25,
		"ERR_QOS_REFERENCES_EXIST":             26,
		"ERR_CONVERT_TO_INTEGER":               27,
		"ERR_TIME_LIMIT":                       28,
		"ERR_QOS_MISSING":                      29,
		"ERR_QOS_ALREADY_EXISTS":               30,
		"ERR_PARENT_ACCOUNT_QOS_MISSING":       31,
		"ERR_SET_ALLOWED_QOS":                  32,
		"ERR_DEFAULT_QOS_NOT_INHERITED":        33,
		"ERR_DUPLICATE_DEFAULT_QOS":            34,
		"ERR_CHILD_HAS_DEFAULT_QOS":            35,
		"ERR_SET_ACCOUNT_QOS":                  36,
		"ERR_SET_DEFAULT_QOS":                  37,
		"ERR_DEFAULT_QOS_MODIFICATION_DENIED":  38,
		"ERR_UPDATE_DATABASE":                  39,
		"ERR_GENERIC_FAILURE":                  40,
		"ERR_NO_RESOURCE":                      41,
		"ERR_NON_EXISTENT":                     42,
		"ERR_INVALID_NODE_NUM":                 43,
		"ERR_INVAILD_NODE_LIST":                44,
		"ERR_INVAILD_EX_NODE_LIST":             45,
		"ERR_TIME_TIMIT_BEYOND":                46,
		"ERR_CPUS_PER_TASK_BEYOND":             47,
		"ERR_NO_ENOUGH_NODE":                   48,
		"ERR_SYSTEM_ERR":                       49,
		"ERR_EXISTING_TASK":                    50,
		"ERR_BEYOND_TASK_ID":                   51,
		"ERR_INVALID_PARAM":                    52,
		"ERR_STOP":                             53,
		"ERR_PERMISSION_DENIED":                54,
		"ERR_CONNECTION_TIMEOUT":               55,
		"ERR_CONNECTION_ABORTED":               56,
		"ERR_RPC_FAILURE":                      57,
		"ERR_TOKEN_REQUEST_FAILURE":            58,
		"ERR_STREAM_BROKEN":                    59,
		"ERR_INVALID_STUB":                     60,
		"ERR_CGROUP":                           61,
		"ERR_PROTOBUF":                         62,
		"ERR_LIB_EVENT":                        63,
		"ERR_NO_AVAIL_NODE":                    64,
		"ERR_MAX_JOB_COUNT_PER_USER":           65,
		"ERR_USER_NO_PRIVILEGE":                66,
		"ERR_NOT_IN_ALLOWED_LIST":              67,
		"ERR_IN_DENIED_LIST":                   68,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[6].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[6]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{6}
}

type EntityType int32

const (
	EntityType_Account EntityType = 0
	EntityType_User    EntityType = 1
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0: "Account",
		1: "User",
	}
	EntityType_value = map[string]int32{
		"Account": 0,
		"User":    1,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[7].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[7]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{7}
}

type OperationType int32

const (
	OperationType_Overwrite OperationType = 0
	OperationType_Add       OperationType = 1
	OperationType_Delete    OperationType = 2
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "Overwrite",
		1: "Add",
		2: "Delete",
	}
	OperationType_value = map[string]int32{
		"Overwrite": 0,
		"Add":       1,
		"Delete":    2,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[8].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[8]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{8}
}

type ModifyField int32

const (
	// user and account
	ModifyField_Partition  ModifyField = 0
	ModifyField_Qos        ModifyField = 1
	ModifyField_DefaultQos ModifyField = 2
	// account and qos
	ModifyField_Description ModifyField = 10
	// user
	ModifyField_AdminLevel     ModifyField = 20
	ModifyField_DefaultAccount ModifyField = 21
	// qos
	ModifyField_Priority            ModifyField = 30
	ModifyField_MaxJobsPerUser      ModifyField = 31
	ModifyField_MaxCpusPerUser      ModifyField = 32
	ModifyField_MaxTimeLimitPerTask ModifyField = 33
)

// Enum value maps for ModifyField.
var (
	ModifyField_name = map[int32]string{
		0:  "Partition",
		1:  "Qos",
		2:  "DefaultQos",
		10: "Description",
		20: "AdminLevel",
		21: "DefaultAccount",
		30: "Priority",
		31: "MaxJobsPerUser",
		32: "MaxCpusPerUser",
		33: "MaxTimeLimitPerTask",
	}
	ModifyField_value = map[string]int32{
		"Partition":           0,
		"Qos":                 1,
		"DefaultQos":          2,
		"Description":         10,
		"AdminLevel":          20,
		"DefaultAccount":      21,
		"Priority":            30,
		"MaxJobsPerUser":      31,
		"MaxCpusPerUser":      32,
		"MaxTimeLimitPerTask": 33,
	}
)

func (x ModifyField) Enum() *ModifyField {
	p := new(ModifyField)
	*p = x
	return p
}

func (x ModifyField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModifyField) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[9].Descriptor()
}

func (ModifyField) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[9]
}

func (x ModifyField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModifyField.Descriptor instead.
func (ModifyField) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{9}
}

type UserInfo_AdminLevel int32

const (
	UserInfo_None     UserInfo_AdminLevel = 0
	UserInfo_Operator UserInfo_AdminLevel = 1
	UserInfo_Admin    UserInfo_AdminLevel = 2
	UserInfo_Root     UserInfo_AdminLevel = 3
)

// Enum value maps for UserInfo_AdminLevel.
var (
	UserInfo_AdminLevel_name = map[int32]string{
		0: "None",
		1: "Operator",
		2: "Admin",
		3: "Root",
	}
	UserInfo_AdminLevel_value = map[string]int32{
		"None":     0,
		"Operator": 1,
		"Admin":    2,
		"Root":     3,
	}
)

func (x UserInfo_AdminLevel) Enum() *UserInfo_AdminLevel {
	p := new(UserInfo_AdminLevel)
	*p = x
	return p
}

func (x UserInfo_AdminLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserInfo_AdminLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_PublicDefs_proto_enumTypes[10].Descriptor()
}

func (UserInfo_AdminLevel) Type() protoreflect.EnumType {
	return &file_PublicDefs_proto_enumTypes[10]
}

func (x UserInfo_AdminLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserInfo_AdminLevel.Descriptor instead.
func (UserInfo_AdminLevel) EnumDescriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{23, 0}
}

type CranedId struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionId   uint32                 `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	CranedIndex   uint32                 `protobuf:"varint,2,opt,name=craned_index,json=cranedIndex,proto3" json:"craned_index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CranedId) Reset() {
	*x = CranedId{}
	mi := &file_PublicDefs_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CranedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CranedId) ProtoMessage() {}

func (x *CranedId) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CranedId.ProtoReflect.Descriptor instead.
func (*CranedId) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{0}
}

func (x *CranedId) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *CranedId) GetCranedIndex() uint32 {
	if x != nil {
		return x.CranedIndex
	}
	return 0
}

type AllocatableResource struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	CpuCoreLimit       float64                `protobuf:"fixed64,1,opt,name=cpu_core_limit,json=cpuCoreLimit,proto3" json:"cpu_core_limit,omitempty"`
	MemoryLimitBytes   uint64                 `protobuf:"varint,2,opt,name=memory_limit_bytes,json=memoryLimitBytes,proto3" json:"memory_limit_bytes,omitempty"`
	MemorySwLimitBytes uint64                 `protobuf:"varint,3,opt,name=memory_sw_limit_bytes,json=memorySwLimitBytes,proto3" json:"memory_sw_limit_bytes,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *AllocatableResource) Reset() {
	*x = AllocatableResource{}
	mi := &file_PublicDefs_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllocatableResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatableResource) ProtoMessage() {}

func (x *AllocatableResource) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatableResource.ProtoReflect.Descriptor instead.
func (*AllocatableResource) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{1}
}

func (x *AllocatableResource) GetCpuCoreLimit() float64 {
	if x != nil {
		return x.CpuCoreLimit
	}
	return 0
}

func (x *AllocatableResource) GetMemoryLimitBytes() uint64 {
	if x != nil {
		return x.MemoryLimitBytes
	}
	return 0
}

func (x *AllocatableResource) GetMemorySwLimitBytes() uint64 {
	if x != nil {
		return x.MemorySwLimitBytes
	}
	return 0
}

type TypeCountMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeCountMap  map[string]uint64      `protobuf:"bytes,1,rep,name=type_count_map,json=typeCountMap,proto3" json:"type_count_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Total         uint64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeCountMap) Reset() {
	*x = TypeCountMap{}
	mi := &file_PublicDefs_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeCountMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeCountMap) ProtoMessage() {}

func (x *TypeCountMap) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeCountMap.ProtoReflect.Descriptor instead.
func (*TypeCountMap) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{2}
}

func (x *TypeCountMap) GetTypeCountMap() map[string]uint64 {
	if x != nil {
		return x.TypeCountMap
	}
	return nil
}

func (x *TypeCountMap) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceMap struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	NameTypeMap   map[string]*TypeCountMap `protobuf:"bytes,1,rep,name=name_type_map,json=nameTypeMap,proto3" json:"name_type_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceMap) Reset() {
	*x = DeviceMap{}
	mi := &file_PublicDefs_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMap) ProtoMessage() {}

func (x *DeviceMap) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMap.ProtoReflect.Descriptor instead.
func (*DeviceMap) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{3}
}

func (x *DeviceMap) GetNameTypeMap() map[string]*TypeCountMap {
	if x != nil {
		return x.NameTypeMap
	}
	return nil
}

type Slots struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slots         []string               `protobuf:"bytes,1,rep,name=slots,proto3" json:"slots,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slots) Reset() {
	*x = Slots{}
	mi := &file_PublicDefs_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slots) ProtoMessage() {}

func (x *Slots) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slots.ProtoReflect.Descriptor instead.
func (*Slots) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{4}
}

func (x *Slots) GetSlots() []string {
	if x != nil {
		return x.Slots
	}
	return nil
}

type DeviceTypeSlotsMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeSlotsMap  map[string]*Slots      `protobuf:"bytes,1,rep,name=type_slots_map,json=typeSlotsMap,proto3" json:"type_slots_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeviceTypeSlotsMap) Reset() {
	*x = DeviceTypeSlotsMap{}
	mi := &file_PublicDefs_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeviceTypeSlotsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTypeSlotsMap) ProtoMessage() {}

func (x *DeviceTypeSlotsMap) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTypeSlotsMap.ProtoReflect.Descriptor instead.
func (*DeviceTypeSlotsMap) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceTypeSlotsMap) GetTypeSlotsMap() map[string]*Slots {
	if x != nil {
		return x.TypeSlotsMap
	}
	return nil
}

type DedicatedResourceInNode struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	NameTypeMap   map[string]*DeviceTypeSlotsMap `protobuf:"bytes,1,rep,name=name_type_map,json=nameTypeMap,proto3" json:"name_type_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DedicatedResourceInNode) Reset() {
	*x = DedicatedResourceInNode{}
	mi := &file_PublicDefs_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DedicatedResourceInNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DedicatedResourceInNode) ProtoMessage() {}

func (x *DedicatedResourceInNode) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DedicatedResourceInNode.ProtoReflect.Descriptor instead.
func (*DedicatedResourceInNode) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{6}
}

func (x *DedicatedResourceInNode) GetNameTypeMap() map[string]*DeviceTypeSlotsMap {
	if x != nil {
		return x.NameTypeMap
	}
	return nil
}

type ResourceInNode struct {
	state                protoimpl.MessageState   `protogen:"open.v1"`
	AllocatableResInNode *AllocatableResource     `protobuf:"bytes,1,opt,name=allocatable_res_in_node,json=allocatableResInNode,proto3" json:"allocatable_res_in_node,omitempty"`
	DedicatedResInNode   *DedicatedResourceInNode `protobuf:"bytes,2,opt,name=dedicated_res_in_node,json=dedicatedResInNode,proto3" json:"dedicated_res_in_node,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ResourceInNode) Reset() {
	*x = ResourceInNode{}
	mi := &file_PublicDefs_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInNode) ProtoMessage() {}

func (x *ResourceInNode) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInNode.ProtoReflect.Descriptor instead.
func (*ResourceInNode) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{7}
}

func (x *ResourceInNode) GetAllocatableResInNode() *AllocatableResource {
	if x != nil {
		return x.AllocatableResInNode
	}
	return nil
}

func (x *ResourceInNode) GetDedicatedResInNode() *DedicatedResourceInNode {
	if x != nil {
		return x.DedicatedResInNode
	}
	return nil
}

type ResourceV2 struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	EachNodeRes   map[string]*ResourceInNode `protobuf:"bytes,1,rep,name=each_node_res,json=eachNodeRes,proto3" json:"each_node_res,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceV2) Reset() {
	*x = ResourceV2{}
	mi := &file_PublicDefs_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceV2) ProtoMessage() {}

func (x *ResourceV2) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceV2.ProtoReflect.Descriptor instead.
func (*ResourceV2) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{8}
}

func (x *ResourceV2) GetEachNodeRes() map[string]*ResourceInNode {
	if x != nil {
		return x.EachNodeRes
	}
	return nil
}

type ResourceView struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	AllocatableRes *AllocatableResource   `protobuf:"bytes,1,opt,name=allocatable_res,json=allocatableRes,proto3" json:"allocatable_res,omitempty"`
	DeviceMap      *DeviceMap             `protobuf:"bytes,2,opt,name=device_map,json=deviceMap,proto3" json:"device_map,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ResourceView) Reset() {
	*x = ResourceView{}
	mi := &file_PublicDefs_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceView) ProtoMessage() {}

func (x *ResourceView) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceView.ProtoReflect.Descriptor instead.
func (*ResourceView) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{9}
}

func (x *ResourceView) GetAllocatableRes() *AllocatableResource {
	if x != nil {
		return x.AllocatableRes
	}
	return nil
}

func (x *ResourceView) GetDeviceMap() *DeviceMap {
	if x != nil {
		return x.DeviceMap
	}
	return nil
}

type TaskToCtld struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// -------- Fields that are set at the submission time. -------
	TimeLimit       *durationpb.Duration `protobuf:"bytes,1,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	PartitionName   string               `protobuf:"bytes,2,opt,name=partition_name,json=partitionName,proto3" json:"partition_name,omitempty"`
	Resources       *ResourceView        `protobuf:"bytes,3,opt,name=resources,proto3" json:"resources,omitempty"`
	Type            TaskType             `protobuf:"varint,4,opt,name=type,proto3,enum=crane.grpc.TaskType" json:"type,omitempty"`
	Uid             uint32               `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Account         string               `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	Name            string               `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Qos             string               `protobuf:"bytes,8,opt,name=qos,proto3" json:"qos,omitempty"`
	NodeNum         uint32               `protobuf:"varint,9,opt,name=node_num,json=nodeNum,proto3" json:"node_num,omitempty"`
	NtasksPerNode   uint32               `protobuf:"varint,10,opt,name=ntasks_per_node,json=ntasksPerNode,proto3" json:"ntasks_per_node,omitempty"`
	CpusPerTask     float64              `protobuf:"fixed64,11,opt,name=cpus_per_task,json=cpusPerTask,proto3" json:"cpus_per_task,omitempty"`
	RequeueIfFailed bool                 `protobuf:"varint,12,opt,name=requeue_if_failed,json=requeueIfFailed,proto3" json:"requeue_if_failed,omitempty"`
	GetUserEnv      bool                 `protobuf:"varint,13,opt,name=get_user_env,json=getUserEnv,proto3" json:"get_user_env,omitempty"`
	Gid             uint32               `protobuf:"varint,14,opt,name=gid,proto3" json:"gid,omitempty"` // egid
	// Types that are valid to be assigned to Payload:
	//
	//	*TaskToCtld_BatchMeta
	//	*TaskToCtld_InteractiveMeta
	Payload       isTaskToCtld_Payload `protobuf_oneof:"payload"`
	ExtraAttr     string               `protobuf:"bytes,23,opt,name=extra_attr,json=extraAttr,proto3" json:"extra_attr,omitempty"`
	CmdLine       string               `protobuf:"bytes,31,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`
	Cwd           string               `protobuf:"bytes,32,opt,name=cwd,proto3" json:"cwd,omitempty"` // Current working directory
	Env           map[string]string    `protobuf:"bytes,33,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Excludes      string               `protobuf:"bytes,34,opt,name=excludes,proto3" json:"excludes,omitempty"`
	Nodelist      string               `protobuf:"bytes,35,opt,name=nodelist,proto3" json:"nodelist,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskToCtld) Reset() {
	*x = TaskToCtld{}
	mi := &file_PublicDefs_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskToCtld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskToCtld) ProtoMessage() {}

func (x *TaskToCtld) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskToCtld.ProtoReflect.Descriptor instead.
func (*TaskToCtld) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{10}
}

func (x *TaskToCtld) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *TaskToCtld) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

func (x *TaskToCtld) GetResources() *ResourceView {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskToCtld) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_Interactive
}

func (x *TaskToCtld) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TaskToCtld) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TaskToCtld) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskToCtld) GetQos() string {
	if x != nil {
		return x.Qos
	}
	return ""
}

func (x *TaskToCtld) GetNodeNum() uint32 {
	if x != nil {
		return x.NodeNum
	}
	return 0
}

func (x *TaskToCtld) GetNtasksPerNode() uint32 {
	if x != nil {
		return x.NtasksPerNode
	}
	return 0
}

func (x *TaskToCtld) GetCpusPerTask() float64 {
	if x != nil {
		return x.CpusPerTask
	}
	return 0
}

func (x *TaskToCtld) GetRequeueIfFailed() bool {
	if x != nil {
		return x.RequeueIfFailed
	}
	return false
}

func (x *TaskToCtld) GetGetUserEnv() bool {
	if x != nil {
		return x.GetUserEnv
	}
	return false
}

func (x *TaskToCtld) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TaskToCtld) GetPayload() isTaskToCtld_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TaskToCtld) GetBatchMeta() *BatchTaskAdditionalMeta {
	if x != nil {
		if x, ok := x.Payload.(*TaskToCtld_BatchMeta); ok {
			return x.BatchMeta
		}
	}
	return nil
}

func (x *TaskToCtld) GetInteractiveMeta() *InteractiveTaskAdditionalMeta {
	if x != nil {
		if x, ok := x.Payload.(*TaskToCtld_InteractiveMeta); ok {
			return x.InteractiveMeta
		}
	}
	return nil
}

func (x *TaskToCtld) GetExtraAttr() string {
	if x != nil {
		return x.ExtraAttr
	}
	return ""
}

func (x *TaskToCtld) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *TaskToCtld) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *TaskToCtld) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskToCtld) GetExcludes() string {
	if x != nil {
		return x.Excludes
	}
	return ""
}

func (x *TaskToCtld) GetNodelist() string {
	if x != nil {
		return x.Nodelist
	}
	return ""
}

type isTaskToCtld_Payload interface {
	isTaskToCtld_Payload()
}

type TaskToCtld_BatchMeta struct {
	BatchMeta *BatchTaskAdditionalMeta `protobuf:"bytes,21,opt,name=batch_meta,json=batchMeta,proto3,oneof"`
}

type TaskToCtld_InteractiveMeta struct {
	InteractiveMeta *InteractiveTaskAdditionalMeta `protobuf:"bytes,22,opt,name=interactive_meta,json=interactiveMeta,proto3,oneof"`
}

func (*TaskToCtld_BatchMeta) isTaskToCtld_Payload() {}

func (*TaskToCtld_InteractiveMeta) isTaskToCtld_Payload() {}

type TaskInEmbeddedDb struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RuntimeAttr   *RuntimeAttrOfTask     `protobuf:"bytes,1,opt,name=runtime_attr,json=runtimeAttr,proto3" json:"runtime_attr,omitempty"`
	TaskToCtld    *TaskToCtld            `protobuf:"bytes,2,opt,name=task_to_ctld,json=taskToCtld,proto3" json:"task_to_ctld,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskInEmbeddedDb) Reset() {
	*x = TaskInEmbeddedDb{}
	mi := &file_PublicDefs_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskInEmbeddedDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInEmbeddedDb) ProtoMessage() {}

func (x *TaskInEmbeddedDb) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInEmbeddedDb.ProtoReflect.Descriptor instead.
func (*TaskInEmbeddedDb) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{11}
}

func (x *TaskInEmbeddedDb) GetRuntimeAttr() *RuntimeAttrOfTask {
	if x != nil {
		return x.RuntimeAttr
	}
	return nil
}

func (x *TaskInEmbeddedDb) GetTaskToCtld() *TaskToCtld {
	if x != nil {
		return x.TaskToCtld
	}
	return nil
}

type RuntimeAttrOfTask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Fields that won't change after this task is accepted.
	TaskId   uint32 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	TaskDbId int64  `protobuf:"varint,3,opt,name=task_db_id,json=taskDbId,proto3" json:"task_db_id,omitempty"`
	Username string `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
	// Fields that will change after this task is accepted.
	RequeueCount   int32                  `protobuf:"varint,11,opt,name=requeue_count,json=requeueCount,proto3" json:"requeue_count,omitempty"`
	CranedIds      []string               `protobuf:"bytes,12,rep,name=craned_ids,json=cranedIds,proto3" json:"craned_ids,omitempty"`
	Status         TaskStatus             `protobuf:"varint,13,opt,name=status,proto3,enum=crane.grpc.TaskStatus" json:"status,omitempty"`
	ExitCode       uint32                 `protobuf:"varint,14,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	SubmitTime     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Held           bool                   `protobuf:"varint,18,opt,name=held,proto3" json:"held,omitempty"`
	Resources      *ResourceV2            `protobuf:"bytes,19,opt,name=resources,proto3" json:"resources,omitempty"`
	CachedPriority float64                `protobuf:"fixed64,20,opt,name=cached_priority,json=cachedPriority,proto3" json:"cached_priority,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RuntimeAttrOfTask) Reset() {
	*x = RuntimeAttrOfTask{}
	mi := &file_PublicDefs_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuntimeAttrOfTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuntimeAttrOfTask) ProtoMessage() {}

func (x *RuntimeAttrOfTask) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuntimeAttrOfTask.ProtoReflect.Descriptor instead.
func (*RuntimeAttrOfTask) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{12}
}

func (x *RuntimeAttrOfTask) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *RuntimeAttrOfTask) GetTaskDbId() int64 {
	if x != nil {
		return x.TaskDbId
	}
	return 0
}

func (x *RuntimeAttrOfTask) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RuntimeAttrOfTask) GetRequeueCount() int32 {
	if x != nil {
		return x.RequeueCount
	}
	return 0
}

func (x *RuntimeAttrOfTask) GetCranedIds() []string {
	if x != nil {
		return x.CranedIds
	}
	return nil
}

func (x *RuntimeAttrOfTask) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

func (x *RuntimeAttrOfTask) GetExitCode() uint32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *RuntimeAttrOfTask) GetSubmitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmitTime
	}
	return nil
}

func (x *RuntimeAttrOfTask) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RuntimeAttrOfTask) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *RuntimeAttrOfTask) GetHeld() bool {
	if x != nil {
		return x.Held
	}
	return false
}

func (x *RuntimeAttrOfTask) GetResources() *ResourceV2 {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RuntimeAttrOfTask) GetCachedPriority() float64 {
	if x != nil {
		return x.CachedPriority
	}
	return 0
}

type TaskToD struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	TaskId      uint32                 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Type        TaskType               `protobuf:"varint,2,opt,name=type,proto3,enum=crane.grpc.TaskType" json:"type,omitempty"`
	PartitionId uint32                 `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	Resources   *ResourceInNode        `protobuf:"bytes,4,opt,name=resources,proto3" json:"resources,omitempty"`
	// If this task is PENDING, start_time is either not set (default constructed)
	// or an estimated start time.
	// If this task is RUNNING, start_time is the actual starting time.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // Currently Only used in CraneCtld
	TimeLimit *durationpb.Duration   `protobuf:"bytes,6,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	Partition string                 `protobuf:"bytes,8,opt,name=partition,proto3" json:"partition,omitempty"`
	Uid       uint32                 `protobuf:"varint,9,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid       uint32                 `protobuf:"varint,10,opt,name=gid,proto3" json:"gid,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*TaskToD_BatchMeta
	//	*TaskToD_InteractiveMeta
	Payload        isTaskToD_Payload `protobuf_oneof:"payload"`
	Env            map[string]string `protobuf:"bytes,13,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Cwd            string            `protobuf:"bytes,14,opt,name=cwd,proto3" json:"cwd,omitempty"`
	AllocatedNodes []string          `protobuf:"bytes,15,rep,name=allocated_nodes,json=allocatedNodes,proto3" json:"allocated_nodes,omitempty"`
	Name           string            `protobuf:"bytes,16,opt,name=name,proto3" json:"name,omitempty"`
	Account        string            `protobuf:"bytes,17,opt,name=account,proto3" json:"account,omitempty"`
	Qos            string            `protobuf:"bytes,18,opt,name=qos,proto3" json:"qos,omitempty"`
	Excludes       []string          `protobuf:"bytes,19,rep,name=excludes,proto3" json:"excludes,omitempty"`
	Nodelist       []string          `protobuf:"bytes,20,rep,name=nodelist,proto3" json:"nodelist,omitempty"`
	NodeNum        uint32            `protobuf:"varint,21,opt,name=node_num,json=nodeNum,proto3" json:"node_num,omitempty"`
	NtasksPerNode  uint32            `protobuf:"varint,22,opt,name=ntasks_per_node,json=ntasksPerNode,proto3" json:"ntasks_per_node,omitempty"`
	CpusPerTask    float64           `protobuf:"fixed64,23,opt,name=cpus_per_task,json=cpusPerTask,proto3" json:"cpus_per_task,omitempty"`
	GetUserEnv     bool              `protobuf:"varint,24,opt,name=get_user_env,json=getUserEnv,proto3" json:"get_user_env,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskToD) Reset() {
	*x = TaskToD{}
	mi := &file_PublicDefs_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskToD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskToD) ProtoMessage() {}

func (x *TaskToD) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskToD.ProtoReflect.Descriptor instead.
func (*TaskToD) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{13}
}

func (x *TaskToD) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskToD) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_Interactive
}

func (x *TaskToD) GetPartitionId() uint32 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *TaskToD) GetResources() *ResourceInNode {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *TaskToD) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskToD) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *TaskToD) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *TaskToD) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TaskToD) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TaskToD) GetPayload() isTaskToD_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *TaskToD) GetBatchMeta() *BatchTaskAdditionalMeta {
	if x != nil {
		if x, ok := x.Payload.(*TaskToD_BatchMeta); ok {
			return x.BatchMeta
		}
	}
	return nil
}

func (x *TaskToD) GetInteractiveMeta() *InteractiveTaskAdditionalMeta {
	if x != nil {
		if x, ok := x.Payload.(*TaskToD_InteractiveMeta); ok {
			return x.InteractiveMeta
		}
	}
	return nil
}

func (x *TaskToD) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *TaskToD) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *TaskToD) GetAllocatedNodes() []string {
	if x != nil {
		return x.AllocatedNodes
	}
	return nil
}

func (x *TaskToD) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskToD) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TaskToD) GetQos() string {
	if x != nil {
		return x.Qos
	}
	return ""
}

func (x *TaskToD) GetExcludes() []string {
	if x != nil {
		return x.Excludes
	}
	return nil
}

func (x *TaskToD) GetNodelist() []string {
	if x != nil {
		return x.Nodelist
	}
	return nil
}

func (x *TaskToD) GetNodeNum() uint32 {
	if x != nil {
		return x.NodeNum
	}
	return 0
}

func (x *TaskToD) GetNtasksPerNode() uint32 {
	if x != nil {
		return x.NtasksPerNode
	}
	return 0
}

func (x *TaskToD) GetCpusPerTask() float64 {
	if x != nil {
		return x.CpusPerTask
	}
	return 0
}

func (x *TaskToD) GetGetUserEnv() bool {
	if x != nil {
		return x.GetUserEnv
	}
	return false
}

type isTaskToD_Payload interface {
	isTaskToD_Payload()
}

type TaskToD_BatchMeta struct {
	BatchMeta *BatchTaskAdditionalMeta `protobuf:"bytes,11,opt,name=batch_meta,json=batchMeta,proto3,oneof"`
}

type TaskToD_InteractiveMeta struct {
	InteractiveMeta *InteractiveTaskAdditionalMeta `protobuf:"bytes,12,opt,name=interactive_meta,json=interactiveMeta,proto3,oneof"`
}

func (*TaskToD_BatchMeta) isTaskToD_Payload() {}

func (*TaskToD_InteractiveMeta) isTaskToD_Payload() {}

type BatchTaskAdditionalMeta struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ShScript          string                 `protobuf:"bytes,1,opt,name=sh_script,json=shScript,proto3" json:"sh_script,omitempty"`
	OutputFilePattern string                 `protobuf:"bytes,3,opt,name=output_file_pattern,json=outputFilePattern,proto3" json:"output_file_pattern,omitempty"`
	ErrorFilePattern  string                 `protobuf:"bytes,4,opt,name=error_file_pattern,json=errorFilePattern,proto3" json:"error_file_pattern,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BatchTaskAdditionalMeta) Reset() {
	*x = BatchTaskAdditionalMeta{}
	mi := &file_PublicDefs_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchTaskAdditionalMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchTaskAdditionalMeta) ProtoMessage() {}

func (x *BatchTaskAdditionalMeta) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchTaskAdditionalMeta.ProtoReflect.Descriptor instead.
func (*BatchTaskAdditionalMeta) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{14}
}

func (x *BatchTaskAdditionalMeta) GetShScript() string {
	if x != nil {
		return x.ShScript
	}
	return ""
}

func (x *BatchTaskAdditionalMeta) GetOutputFilePattern() string {
	if x != nil {
		return x.OutputFilePattern
	}
	return ""
}

func (x *BatchTaskAdditionalMeta) GetErrorFilePattern() string {
	if x != nil {
		return x.ErrorFilePattern
	}
	return ""
}

type X11Meta struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Target           string                 `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	Port             uint32                 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Cookie           string                 `protobuf:"bytes,3,opt,name=cookie,proto3" json:"cookie,omitempty"`
	EnableForwarding bool                   `protobuf:"varint,4,opt,name=enable_forwarding,json=enableForwarding,proto3" json:"enable_forwarding,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *X11Meta) Reset() {
	*x = X11Meta{}
	mi := &file_PublicDefs_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *X11Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*X11Meta) ProtoMessage() {}

func (x *X11Meta) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use X11Meta.ProtoReflect.Descriptor instead.
func (*X11Meta) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{15}
}

func (x *X11Meta) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *X11Meta) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *X11Meta) GetCookie() string {
	if x != nil {
		return x.Cookie
	}
	return ""
}

func (x *X11Meta) GetEnableForwarding() bool {
	if x != nil {
		return x.EnableForwarding
	}
	return false
}

type InteractiveTaskAdditionalMeta struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	CforedName      string                 `protobuf:"bytes,1,opt,name=cfored_name,json=cforedName,proto3" json:"cfored_name,omitempty"`
	ShScript        string                 `protobuf:"bytes,2,opt,name=sh_script,json=shScript,proto3" json:"sh_script,omitempty"`
	TermEnv         string                 `protobuf:"bytes,3,opt,name=term_env,json=termEnv,proto3" json:"term_env,omitempty"`
	InteractiveType InteractiveTaskType    `protobuf:"varint,4,opt,name=interactive_type,json=interactiveType,proto3,enum=crane.grpc.InteractiveTaskType" json:"interactive_type,omitempty"`
	Pty             bool                   `protobuf:"varint,5,opt,name=pty,proto3" json:"pty,omitempty"`
	X11             bool                   `protobuf:"varint,6,opt,name=x11,proto3" json:"x11,omitempty"`
	X11Meta         *X11Meta               `protobuf:"bytes,7,opt,name=x11_meta,json=x11Meta,proto3" json:"x11_meta,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InteractiveTaskAdditionalMeta) Reset() {
	*x = InteractiveTaskAdditionalMeta{}
	mi := &file_PublicDefs_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InteractiveTaskAdditionalMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InteractiveTaskAdditionalMeta) ProtoMessage() {}

func (x *InteractiveTaskAdditionalMeta) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InteractiveTaskAdditionalMeta.ProtoReflect.Descriptor instead.
func (*InteractiveTaskAdditionalMeta) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{16}
}

func (x *InteractiveTaskAdditionalMeta) GetCforedName() string {
	if x != nil {
		return x.CforedName
	}
	return ""
}

func (x *InteractiveTaskAdditionalMeta) GetShScript() string {
	if x != nil {
		return x.ShScript
	}
	return ""
}

func (x *InteractiveTaskAdditionalMeta) GetTermEnv() string {
	if x != nil {
		return x.TermEnv
	}
	return ""
}

func (x *InteractiveTaskAdditionalMeta) GetInteractiveType() InteractiveTaskType {
	if x != nil {
		return x.InteractiveType
	}
	return InteractiveTaskType_Calloc
}

func (x *InteractiveTaskAdditionalMeta) GetPty() bool {
	if x != nil {
		return x.Pty
	}
	return false
}

func (x *InteractiveTaskAdditionalMeta) GetX11() bool {
	if x != nil {
		return x.X11
	}
	return false
}

func (x *InteractiveTaskAdditionalMeta) GetX11Meta() *X11Meta {
	if x != nil {
		return x.X11Meta
	}
	return nil
}

type TaskInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Static task information
	Type         TaskType               `protobuf:"varint,1,opt,name=type,proto3,enum=crane.grpc.TaskType" json:"type,omitempty"`
	TaskId       uint32                 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Partition    string                 `protobuf:"bytes,4,opt,name=partition,proto3" json:"partition,omitempty"`
	Uid          uint32                 `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid          uint32                 `protobuf:"varint,6,opt,name=gid,proto3" json:"gid,omitempty"`
	TimeLimit    *durationpb.Duration   `protobuf:"bytes,7,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	StartTime    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	SubmitTime   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	Account      string                 `protobuf:"bytes,11,opt,name=account,proto3" json:"account,omitempty"`
	NodeNum      uint32                 `protobuf:"varint,12,opt,name=node_num,json=nodeNum,proto3" json:"node_num,omitempty"`
	CmdLine      string                 `protobuf:"bytes,13,opt,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`
	Cwd          string                 `protobuf:"bytes,14,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Username     string                 `protobuf:"bytes,15,opt,name=username,proto3" json:"username,omitempty"`
	Qos          string                 `protobuf:"bytes,16,opt,name=qos,proto3" json:"qos,omitempty"`
	ResView      *ResourceView          `protobuf:"bytes,17,opt,name=res_view,json=resView,proto3" json:"res_view,omitempty"`
	ReqNodes     []string               `protobuf:"bytes,19,rep,name=req_nodes,json=reqNodes,proto3" json:"req_nodes,omitempty"`
	ExcludeNodes []string               `protobuf:"bytes,20,rep,name=exclude_nodes,json=excludeNodes,proto3" json:"exclude_nodes,omitempty"`
	ExtraAttr    string                 `protobuf:"bytes,21,opt,name=extra_attr,json=extraAttr,proto3" json:"extra_attr,omitempty"`
	// Dynamic task information
	Held     bool       `protobuf:"varint,30,opt,name=held,proto3" json:"held,omitempty"`
	Status   TaskStatus `protobuf:"varint,31,opt,name=status,proto3,enum=crane.grpc.TaskStatus" json:"status,omitempty"`
	ExitCode uint32     `protobuf:"varint,33,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Priority uint32     `protobuf:"varint,34,opt,name=priority,proto3" json:"priority,omitempty"`
	// Types that are valid to be assigned to PendingReasonOrCranedList:
	//
	//	*TaskInfo_PendingReason
	//	*TaskInfo_CranedList
	PendingReasonOrCranedList isTaskInfo_PendingReasonOrCranedList `protobuf_oneof:"pending_reason_or_craned_list"`
	// The time of different nodes across the whole cluster might not always be synchronized.
	// If the time on the front end node is more than several seconds ahead of the CraneCtld node,
	// a negative elapsed time might occur.
	// To avoid this, the elapsed time of a task is calculated on the CraneCtld side.
	ElapsedTime   *durationpb.Duration `protobuf:"bytes,37,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	ExecutionNode []string             `protobuf:"bytes,38,rep,name=execution_node,json=executionNode,proto3" json:"execution_node,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	mi := &file_PublicDefs_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{17}
}

func (x *TaskInfo) GetType() TaskType {
	if x != nil {
		return x.Type
	}
	return TaskType_Interactive
}

func (x *TaskInfo) GetTaskId() uint32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskInfo) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *TaskInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *TaskInfo) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *TaskInfo) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *TaskInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskInfo) GetSubmitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmitTime
	}
	return nil
}

func (x *TaskInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *TaskInfo) GetNodeNum() uint32 {
	if x != nil {
		return x.NodeNum
	}
	return 0
}

func (x *TaskInfo) GetCmdLine() string {
	if x != nil {
		return x.CmdLine
	}
	return ""
}

func (x *TaskInfo) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *TaskInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *TaskInfo) GetQos() string {
	if x != nil {
		return x.Qos
	}
	return ""
}

func (x *TaskInfo) GetResView() *ResourceView {
	if x != nil {
		return x.ResView
	}
	return nil
}

func (x *TaskInfo) GetReqNodes() []string {
	if x != nil {
		return x.ReqNodes
	}
	return nil
}

func (x *TaskInfo) GetExcludeNodes() []string {
	if x != nil {
		return x.ExcludeNodes
	}
	return nil
}

func (x *TaskInfo) GetExtraAttr() string {
	if x != nil {
		return x.ExtraAttr
	}
	return ""
}

func (x *TaskInfo) GetHeld() bool {
	if x != nil {
		return x.Held
	}
	return false
}

func (x *TaskInfo) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Pending
}

func (x *TaskInfo) GetExitCode() uint32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TaskInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *TaskInfo) GetPendingReasonOrCranedList() isTaskInfo_PendingReasonOrCranedList {
	if x != nil {
		return x.PendingReasonOrCranedList
	}
	return nil
}

func (x *TaskInfo) GetPendingReason() string {
	if x != nil {
		if x, ok := x.PendingReasonOrCranedList.(*TaskInfo_PendingReason); ok {
			return x.PendingReason
		}
	}
	return ""
}

func (x *TaskInfo) GetCranedList() string {
	if x != nil {
		if x, ok := x.PendingReasonOrCranedList.(*TaskInfo_CranedList); ok {
			return x.CranedList
		}
	}
	return ""
}

func (x *TaskInfo) GetElapsedTime() *durationpb.Duration {
	if x != nil {
		return x.ElapsedTime
	}
	return nil
}

func (x *TaskInfo) GetExecutionNode() []string {
	if x != nil {
		return x.ExecutionNode
	}
	return nil
}

type isTaskInfo_PendingReasonOrCranedList interface {
	isTaskInfo_PendingReasonOrCranedList()
}

type TaskInfo_PendingReason struct {
	PendingReason string `protobuf:"bytes,35,opt,name=pending_reason,json=pendingReason,proto3,oneof"`
}

type TaskInfo_CranedList struct {
	CranedList string `protobuf:"bytes,36,opt,name=craned_list,json=cranedList,proto3,oneof"`
}

func (*TaskInfo_PendingReason) isTaskInfo_PendingReasonOrCranedList() {}

func (*TaskInfo_CranedList) isTaskInfo_PendingReasonOrCranedList() {}

type PartitionInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Hostlist        string                 `protobuf:"bytes,1,opt,name=hostlist,proto3" json:"hostlist,omitempty"`
	State           PartitionState         `protobuf:"varint,2,opt,name=state,proto3,enum=crane.grpc.PartitionState" json:"state,omitempty"`
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TotalNodes      uint32                 `protobuf:"varint,4,opt,name=total_nodes,json=totalNodes,proto3" json:"total_nodes,omitempty"`
	AliveNodes      uint32                 `protobuf:"varint,5,opt,name=alive_nodes,json=aliveNodes,proto3" json:"alive_nodes,omitempty"`
	ResTotal        *ResourceView          `protobuf:"bytes,6,opt,name=res_total,json=resTotal,proto3" json:"res_total,omitempty"`
	ResAvail        *ResourceView          `protobuf:"bytes,7,opt,name=res_avail,json=resAvail,proto3" json:"res_avail,omitempty"`
	ResAlloc        *ResourceView          `protobuf:"bytes,8,opt,name=res_alloc,json=resAlloc,proto3" json:"res_alloc,omitempty"`
	AllowedAccounts []string               `protobuf:"bytes,9,rep,name=allowed_accounts,json=allowedAccounts,proto3" json:"allowed_accounts,omitempty"`
	DeniedAccounts  []string               `protobuf:"bytes,10,rep,name=denied_accounts,json=deniedAccounts,proto3" json:"denied_accounts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PartitionInfo) Reset() {
	*x = PartitionInfo{}
	mi := &file_PublicDefs_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfo) ProtoMessage() {}

func (x *PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfo.ProtoReflect.Descriptor instead.
func (*PartitionInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{18}
}

func (x *PartitionInfo) GetHostlist() string {
	if x != nil {
		return x.Hostlist
	}
	return ""
}

func (x *PartitionInfo) GetState() PartitionState {
	if x != nil {
		return x.State
	}
	return PartitionState_PARTITION_UP
}

func (x *PartitionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionInfo) GetTotalNodes() uint32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *PartitionInfo) GetAliveNodes() uint32 {
	if x != nil {
		return x.AliveNodes
	}
	return 0
}

func (x *PartitionInfo) GetResTotal() *ResourceView {
	if x != nil {
		return x.ResTotal
	}
	return nil
}

func (x *PartitionInfo) GetResAvail() *ResourceView {
	if x != nil {
		return x.ResAvail
	}
	return nil
}

func (x *PartitionInfo) GetResAlloc() *ResourceView {
	if x != nil {
		return x.ResAlloc
	}
	return nil
}

func (x *PartitionInfo) GetAllowedAccounts() []string {
	if x != nil {
		return x.AllowedAccounts
	}
	return nil
}

func (x *PartitionInfo) GetDeniedAccounts() []string {
	if x != nil {
		return x.DeniedAccounts
	}
	return nil
}

type CranedInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Hostname        string                 `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	ResourceState   CranedResourceState    `protobuf:"varint,2,opt,name=resource_state,json=resourceState,proto3,enum=crane.grpc.CranedResourceState" json:"resource_state,omitempty"`
	ControlState    CranedControlState     `protobuf:"varint,3,opt,name=control_state,json=controlState,proto3,enum=crane.grpc.CranedControlState" json:"control_state,omitempty"`
	ResTotal        *ResourceInNode        `protobuf:"bytes,4,opt,name=res_total,json=resTotal,proto3" json:"res_total,omitempty"`
	ResAvail        *ResourceInNode        `protobuf:"bytes,5,opt,name=res_avail,json=resAvail,proto3" json:"res_avail,omitempty"`
	ResAlloc        *ResourceInNode        `protobuf:"bytes,6,opt,name=res_alloc,json=resAlloc,proto3" json:"res_alloc,omitempty"`
	PartitionNames  []string               `protobuf:"bytes,10,rep,name=partition_names,json=partitionNames,proto3" json:"partition_names,omitempty"`
	RunningTaskNum  uint32                 `protobuf:"varint,11,opt,name=running_task_num,json=runningTaskNum,proto3" json:"running_task_num,omitempty"`
	CranedVersion   string                 `protobuf:"bytes,12,opt,name=craned_version,json=cranedVersion,proto3" json:"craned_version,omitempty"`
	SystemDesc      string                 `protobuf:"bytes,13,opt,name=system_desc,json=systemDesc,proto3" json:"system_desc,omitempty"`
	CranedStartTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=craned_start_time,json=cranedStartTime,proto3" json:"craned_start_time,omitempty"`
	SystemBootTime  *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=system_boot_time,json=systemBootTime,proto3" json:"system_boot_time,omitempty"`
	LastBusyTime    *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=last_busy_time,json=lastBusyTime,proto3" json:"last_busy_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CranedInfo) Reset() {
	*x = CranedInfo{}
	mi := &file_PublicDefs_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CranedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CranedInfo) ProtoMessage() {}

func (x *CranedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CranedInfo.ProtoReflect.Descriptor instead.
func (*CranedInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{19}
}

func (x *CranedInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CranedInfo) GetResourceState() CranedResourceState {
	if x != nil {
		return x.ResourceState
	}
	return CranedResourceState_CRANE_IDLE
}

func (x *CranedInfo) GetControlState() CranedControlState {
	if x != nil {
		return x.ControlState
	}
	return CranedControlState_CRANE_NONE
}

func (x *CranedInfo) GetResTotal() *ResourceInNode {
	if x != nil {
		return x.ResTotal
	}
	return nil
}

func (x *CranedInfo) GetResAvail() *ResourceInNode {
	if x != nil {
		return x.ResAvail
	}
	return nil
}

func (x *CranedInfo) GetResAlloc() *ResourceInNode {
	if x != nil {
		return x.ResAlloc
	}
	return nil
}

func (x *CranedInfo) GetPartitionNames() []string {
	if x != nil {
		return x.PartitionNames
	}
	return nil
}

func (x *CranedInfo) GetRunningTaskNum() uint32 {
	if x != nil {
		return x.RunningTaskNum
	}
	return 0
}

func (x *CranedInfo) GetCranedVersion() string {
	if x != nil {
		return x.CranedVersion
	}
	return ""
}

func (x *CranedInfo) GetSystemDesc() string {
	if x != nil {
		return x.SystemDesc
	}
	return ""
}

func (x *CranedInfo) GetCranedStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CranedStartTime
	}
	return nil
}

func (x *CranedInfo) GetSystemBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SystemBootTime
	}
	return nil
}

func (x *CranedInfo) GetLastBusyTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastBusyTime
	}
	return nil
}

type TrimmedPartitionInfo struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	Name          string                                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State         PartitionState                            `protobuf:"varint,2,opt,name=state,proto3,enum=crane.grpc.PartitionState" json:"state,omitempty"`
	CranedLists   []*TrimmedPartitionInfo_TrimmedCranedInfo `protobuf:"bytes,3,rep,name=craned_lists,json=cranedLists,proto3" json:"craned_lists,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrimmedPartitionInfo) Reset() {
	*x = TrimmedPartitionInfo{}
	mi := &file_PublicDefs_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimmedPartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimmedPartitionInfo) ProtoMessage() {}

func (x *TrimmedPartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimmedPartitionInfo.ProtoReflect.Descriptor instead.
func (*TrimmedPartitionInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{20}
}

func (x *TrimmedPartitionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TrimmedPartitionInfo) GetState() PartitionState {
	if x != nil {
		return x.State
	}
	return PartitionState_PARTITION_UP
}

func (x *TrimmedPartitionInfo) GetCranedLists() []*TrimmedPartitionInfo_TrimmedCranedInfo {
	if x != nil {
		return x.CranedLists
	}
	return nil
}

type RichError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrCode                `protobuf:"varint,1,opt,name=code,proto3,enum=crane.grpc.ErrCode" json:"code,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RichError) Reset() {
	*x = RichError{}
	mi := &file_PublicDefs_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RichError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichError) ProtoMessage() {}

func (x *RichError) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichError.ProtoReflect.Descriptor instead.
func (*RichError) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{21}
}

func (x *RichError) GetCode() ErrCode {
	if x != nil {
		return x.Code
	}
	return ErrCode_SUCCESS
}

func (x *RichError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AccountInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Users             []string               `protobuf:"bytes,3,rep,name=users,proto3" json:"users,omitempty"`
	ChildAccounts     []string               `protobuf:"bytes,4,rep,name=child_accounts,json=childAccounts,proto3" json:"child_accounts,omitempty"`
	ParentAccount     string                 `protobuf:"bytes,5,opt,name=parent_account,json=parentAccount,proto3" json:"parent_account,omitempty"`
	AllowedPartitions []string               `protobuf:"bytes,6,rep,name=allowed_partitions,json=allowedPartitions,proto3" json:"allowed_partitions,omitempty"`
	DefaultQos        string                 `protobuf:"bytes,7,opt,name=default_qos,json=defaultQos,proto3" json:"default_qos,omitempty"`
	AllowedQosList    []string               `protobuf:"bytes,8,rep,name=allowed_qos_list,json=allowedQosList,proto3" json:"allowed_qos_list,omitempty"`
	Coordinators      []string               `protobuf:"bytes,9,rep,name=coordinators,proto3" json:"coordinators,omitempty"`
	Blocked           bool                   `protobuf:"varint,10,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AccountInfo) Reset() {
	*x = AccountInfo{}
	mi := &file_PublicDefs_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountInfo) ProtoMessage() {}

func (x *AccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountInfo.ProtoReflect.Descriptor instead.
func (*AccountInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{22}
}

func (x *AccountInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccountInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AccountInfo) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *AccountInfo) GetChildAccounts() []string {
	if x != nil {
		return x.ChildAccounts
	}
	return nil
}

func (x *AccountInfo) GetParentAccount() string {
	if x != nil {
		return x.ParentAccount
	}
	return ""
}

func (x *AccountInfo) GetAllowedPartitions() []string {
	if x != nil {
		return x.AllowedPartitions
	}
	return nil
}

func (x *AccountInfo) GetDefaultQos() string {
	if x != nil {
		return x.DefaultQos
	}
	return ""
}

func (x *AccountInfo) GetAllowedQosList() []string {
	if x != nil {
		return x.AllowedQosList
	}
	return nil
}

func (x *AccountInfo) GetCoordinators() []string {
	if x != nil {
		return x.Coordinators
	}
	return nil
}

func (x *AccountInfo) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

// Note: UserInfo DIFFERS from the `User` struct in C++ code and database representation
//       and is ONLY used for communication between CraneCtld and cacctmgr command.
//       If an user belongs to multiple accounts, There will be multiple `UserInfo`
//       messages with `account` pointing to each account.
//       For example, if a user (uid=1) belongs to accounts `1,2,3`,
//       there will be three `UserInfo` messages: (uid=1, account=1), (uid=1, account=2),
//       (uid=1, account=3).
//       The c++ code and database representation use a Map<account name, AttrsInAccount> to contain
//       in ONE UserInfo message all the information belonging to different accounts.
type UserInfo struct {
	state                   protoimpl.MessageState          `protogen:"open.v1"`
	Uid                     uint32                          `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                    string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Account                 string                          `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	Blocked                 bool                            `protobuf:"varint,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	AllowedPartitionQosList []*UserInfo_AllowedPartitionQos `protobuf:"bytes,5,rep,name=allowed_partition_qos_list,json=allowedPartitionQosList,proto3" json:"allowed_partition_qos_list,omitempty"`
	CoordinatorAccounts     []string                        `protobuf:"bytes,6,rep,name=coordinator_accounts,json=coordinatorAccounts,proto3" json:"coordinator_accounts,omitempty"`
	AdminLevel              UserInfo_AdminLevel             `protobuf:"varint,7,opt,name=admin_level,json=adminLevel,proto3,enum=crane.grpc.UserInfo_AdminLevel" json:"admin_level,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *UserInfo) Reset() {
	*x = UserInfo{}
	mi := &file_PublicDefs_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo) ProtoMessage() {}

func (x *UserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo.ProtoReflect.Descriptor instead.
func (*UserInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{23}
}

func (x *UserInfo) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *UserInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UserInfo) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *UserInfo) GetAllowedPartitionQosList() []*UserInfo_AllowedPartitionQos {
	if x != nil {
		return x.AllowedPartitionQosList
	}
	return nil
}

func (x *UserInfo) GetCoordinatorAccounts() []string {
	if x != nil {
		return x.CoordinatorAccounts
	}
	return nil
}

func (x *UserInfo) GetAdminLevel() UserInfo_AdminLevel {
	if x != nil {
		return x.AdminLevel
	}
	return UserInfo_None
}

type QosInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description         string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Priority            uint32                 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	MaxJobsPerUser      uint32                 `protobuf:"varint,4,opt,name=max_jobs_per_user,json=maxJobsPerUser,proto3" json:"max_jobs_per_user,omitempty"`
	MaxCpusPerUser      uint32                 `protobuf:"varint,5,opt,name=max_cpus_per_user,json=maxCpusPerUser,proto3" json:"max_cpus_per_user,omitempty"`
	MaxTimeLimitPerTask uint64                 `protobuf:"varint,6,opt,name=max_time_limit_per_task,json=maxTimeLimitPerTask,proto3" json:"max_time_limit_per_task,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *QosInfo) Reset() {
	*x = QosInfo{}
	mi := &file_PublicDefs_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QosInfo) ProtoMessage() {}

func (x *QosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QosInfo.ProtoReflect.Descriptor instead.
func (*QosInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{24}
}

func (x *QosInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QosInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *QosInfo) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *QosInfo) GetMaxJobsPerUser() uint32 {
	if x != nil {
		return x.MaxJobsPerUser
	}
	return 0
}

func (x *QosInfo) GetMaxCpusPerUser() uint32 {
	if x != nil {
		return x.MaxCpusPerUser
	}
	return 0
}

func (x *QosInfo) GetMaxTimeLimitPerTask() uint64 {
	if x != nil {
		return x.MaxTimeLimitPerTask
	}
	return 0
}

type TimeInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LowerBound    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	UpperBound    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeInterval) Reset() {
	*x = TimeInterval{}
	mi := &file_PublicDefs_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeInterval) ProtoMessage() {}

func (x *TimeInterval) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeInterval.ProtoReflect.Descriptor instead.
func (*TimeInterval) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{25}
}

func (x *TimeInterval) GetLowerBound() *timestamppb.Timestamp {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *TimeInterval) GetUpperBound() *timestamppb.Timestamp {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

type SystemRelInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Release       string                 `protobuf:"bytes,2,opt,name=release,proto3" json:"release,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemRelInfo) Reset() {
	*x = SystemRelInfo{}
	mi := &file_PublicDefs_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemRelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemRelInfo) ProtoMessage() {}

func (x *SystemRelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemRelInfo.ProtoReflect.Descriptor instead.
func (*SystemRelInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{26}
}

func (x *SystemRelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemRelInfo) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *SystemRelInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type CranedRemoteMeta struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	DresInNode      *DedicatedResourceInNode `protobuf:"bytes,1,opt,name=dres_in_node,json=dresInNode,proto3" json:"dres_in_node,omitempty"`
	SysRelInfo      *SystemRelInfo           `protobuf:"bytes,2,opt,name=sys_rel_info,json=sysRelInfo,proto3" json:"sys_rel_info,omitempty"`
	CranedVersion   string                   `protobuf:"bytes,3,opt,name=craned_version,json=cranedVersion,proto3" json:"craned_version,omitempty"`
	CranedStartTime *timestamppb.Timestamp   `protobuf:"bytes,4,opt,name=craned_start_time,json=cranedStartTime,proto3" json:"craned_start_time,omitempty"`
	SystemBootTime  *timestamppb.Timestamp   `protobuf:"bytes,5,opt,name=system_boot_time,json=systemBootTime,proto3" json:"system_boot_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CranedRemoteMeta) Reset() {
	*x = CranedRemoteMeta{}
	mi := &file_PublicDefs_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CranedRemoteMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CranedRemoteMeta) ProtoMessage() {}

func (x *CranedRemoteMeta) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CranedRemoteMeta.ProtoReflect.Descriptor instead.
func (*CranedRemoteMeta) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{27}
}

func (x *CranedRemoteMeta) GetDresInNode() *DedicatedResourceInNode {
	if x != nil {
		return x.DresInNode
	}
	return nil
}

func (x *CranedRemoteMeta) GetSysRelInfo() *SystemRelInfo {
	if x != nil {
		return x.SysRelInfo
	}
	return nil
}

func (x *CranedRemoteMeta) GetCranedVersion() string {
	if x != nil {
		return x.CranedVersion
	}
	return ""
}

func (x *CranedRemoteMeta) GetCranedStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CranedStartTime
	}
	return nil
}

func (x *CranedRemoteMeta) GetSystemBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SystemBootTime
	}
	return nil
}

type TrimmedPartitionInfo_TrimmedCranedInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ResourceState   CranedResourceState    `protobuf:"varint,1,opt,name=resource_state,json=resourceState,proto3,enum=crane.grpc.CranedResourceState" json:"resource_state,omitempty"`
	ControlState    CranedControlState     `protobuf:"varint,2,opt,name=control_state,json=controlState,proto3,enum=crane.grpc.CranedControlState" json:"control_state,omitempty"`
	Count           uint32                 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	CranedListRegex string                 `protobuf:"bytes,4,opt,name=craned_list_regex,json=cranedListRegex,proto3" json:"craned_list_regex,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) Reset() {
	*x = TrimmedPartitionInfo_TrimmedCranedInfo{}
	mi := &file_PublicDefs_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrimmedPartitionInfo_TrimmedCranedInfo) ProtoMessage() {}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrimmedPartitionInfo_TrimmedCranedInfo.ProtoReflect.Descriptor instead.
func (*TrimmedPartitionInfo_TrimmedCranedInfo) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) GetResourceState() CranedResourceState {
	if x != nil {
		return x.ResourceState
	}
	return CranedResourceState_CRANE_IDLE
}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) GetControlState() CranedControlState {
	if x != nil {
		return x.ControlState
	}
	return CranedControlState_CRANE_NONE
}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TrimmedPartitionInfo_TrimmedCranedInfo) GetCranedListRegex() string {
	if x != nil {
		return x.CranedListRegex
	}
	return ""
}

type UserInfo_AllowedPartitionQos struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PartitionName string                 `protobuf:"bytes,1,opt,name=partition_name,json=partitionName,proto3" json:"partition_name,omitempty"`
	QosList       []string               `protobuf:"bytes,2,rep,name=qos_list,json=qosList,proto3" json:"qos_list,omitempty"`
	DefaultQos    string                 `protobuf:"bytes,3,opt,name=default_qos,json=defaultQos,proto3" json:"default_qos,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfo_AllowedPartitionQos) Reset() {
	*x = UserInfo_AllowedPartitionQos{}
	mi := &file_PublicDefs_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfo_AllowedPartitionQos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfo_AllowedPartitionQos) ProtoMessage() {}

func (x *UserInfo_AllowedPartitionQos) ProtoReflect() protoreflect.Message {
	mi := &file_PublicDefs_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfo_AllowedPartitionQos.ProtoReflect.Descriptor instead.
func (*UserInfo_AllowedPartitionQos) Descriptor() ([]byte, []int) {
	return file_PublicDefs_proto_rawDescGZIP(), []int{23, 0}
}

func (x *UserInfo_AllowedPartitionQos) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

func (x *UserInfo_AllowedPartitionQos) GetQosList() []string {
	if x != nil {
		return x.QosList
	}
	return nil
}

func (x *UserInfo_AllowedPartitionQos) GetDefaultQos() string {
	if x != nil {
		return x.DefaultQos
	}
	return ""
}

var File_PublicDefs_proto protoreflect.FileDescriptor

var file_PublicDefs_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x65, 0x66, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x50, 0x0a, 0x08, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x9c, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x70, 0x75,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x50, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x3f, 0x0a, 0x11, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x01, 0x0a, 0x09, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x4a, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x1a, 0x58, 0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d,
	0x0a, 0x05, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0xc0, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x52, 0x0a, 0x11,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd3, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x5e, 0x0a, 0x10, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x56, 0x0a, 0x17, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x14, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x56, 0x0a, 0x15, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x0a, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x12, 0x4b, 0x0a, 0x0d, 0x65, 0x61, 0x63, 0x68,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x2e, 0x45, 0x61, 0x63, 0x68, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x61, 0x63, 0x68, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x10, 0x45, 0x61, 0x63, 0x68, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x48, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x22, 0x80, 0x07, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c,
	0x64, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x70, 0x75, 0x73, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a,
	0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x66, 0x5f, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x66, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x67,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x44, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x74, 0x74, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x31, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x2e, 0x45, 0x6e, 0x76,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x44, 0x62, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x0c,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x74, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b,
	0x54, 0x6f, 0x43, 0x74, 0x6c, 0x64, 0x22, 0x99, 0x04, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4f, 0x66, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x44,
	0x62, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x75, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64,
	0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68,
	0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x32, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x22, 0xad, 0x07, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x6f, 0x44, 0x12, 0x17,
	0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00,
	0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x10, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61,
	0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x6f, 0x44, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03,
	0x65, 0x6e, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x77, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x71, 0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6e, 0x74, 0x61, 0x73,
	0x6b, 0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x70, 0x75,
	0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x63, 0x70, 0x75, 0x73, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6e, 0x76, 0x1a,
	0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x22, 0x7a, 0x0a, 0x07, 0x58, 0x31, 0x31,
	0x4d, 0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x98, 0x02, 0x0a, 0x1d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x66, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x66,
	0x6f, 0x72, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x68, 0x5f, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x65, 0x6e,
	0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x72, 0x6d, 0x45, 0x6e, 0x76,
	0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x74, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x78, 0x31, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x78, 0x31, 0x31,
	0x12, 0x2e, 0x0a, 0x08, 0x78, 0x31, 0x31, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x58, 0x31, 0x31, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x07, 0x78, 0x31, 0x31, 0x4d, 0x65, 0x74, 0x61,
	0x22, 0x81, 0x08, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x77,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x71, 0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12,
	0x33, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x61, 0x74, 0x74, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x65, 0x6c, 0x64, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x26,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xac, 0x03, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x72, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x72,
	0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x72, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12,
	0x29, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65,
	0x6e, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0xcb, 0x05, 0x0a, 0x0a, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a,
	0x09, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x75, 0x73, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x98, 0x03, 0x0a, 0x14, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x6d, 0x6d, 0x65, 0x64,
	0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x72, 0x61, 0x6e,
	0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0xe2, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x6d,
	0x6d, 0x65, 0x64, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a,
	0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x61,
	0x6e, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0x56, 0x0a, 0x09,
	0x52, 0x69, 0x63, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x02, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x6f, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x51, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0xf5, 0x03, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x65, 0x0a,
	0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x71, 0x6f, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x6f, 0x73, 0x52, 0x17, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x6f, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0a, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x78, 0x0a, 0x13, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x6f, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x71, 0x6f, 0x73, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x71, 0x6f, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x6f,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x51, 0x6f, 0x73, 0x22, 0x39, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x74, 0x10, 0x03, 0x22, 0xe7,
	0x01, 0x0a, 0x07, 0x51, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x11,
	0x6d, 0x61, 0x78, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73,
	0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x63,
	0x70, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x88, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0b, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x02, 0x0a,
	0x10, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x72,
	0x65, 0x73, 0x49, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x5f,
	0x72, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x52, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x11,
	0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x42, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x36, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x2a, 0x55, 0x0a, 0x13, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x41,
	0x4e, 0x45, 0x5f, 0x49, 0x44, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x52, 0x41,
	0x4e, 0x45, 0x5f, 0x4d, 0x49, 0x58, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x41, 0x4e,
	0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x41,
	0x4e, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x2a, 0x35, 0x0a, 0x12, 0x43, 0x72, 0x61,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x43, 0x52, 0x41, 0x4e, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x43, 0x52, 0x41, 0x4e, 0x45, 0x5f, 0x44, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x01,
	0x2a, 0x72, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x0f, 0x2a, 0x26, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x10, 0x01, 0x2a, 0x2b, 0x0a, 0x13,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x72, 0x75, 0x6e, 0x10, 0x01, 0x2a, 0xc0, 0x0e, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x49, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x09, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0d, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x52, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x5f,
	0x43, 0x48, 0x49, 0x4c, 0x44, 0x52, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52,
	0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x19,
	0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x11, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x12, 0x12, 0x28, 0x0a, 0x24, 0x45,
	0x52, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x13, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x5f, 0x48, 0x41, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x15,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x51,
	0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x16, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x52, 0x52, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x4f, 0x53, 0x10, 0x18, 0x12, 0x1d, 0x0a, 0x19,
	0x45, 0x52, 0x52, 0x5f, 0x44, 0x42, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x19, 0x12, 0x1c, 0x0a, 0x18, 0x45,
	0x52, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x1d, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x1e, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x52,
	0x52, 0x5f, 0x50, 0x41, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x1f, 0x12, 0x17,
	0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45,
	0x44, 0x5f, 0x51, 0x4f, 0x53, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49,
	0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x45, 0x44, 0x10, 0x21, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52,
	0x52, 0x5f, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x10, 0x22, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52,
	0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x10,
	0x24, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x10, 0x25, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x52,
	0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x51, 0x4f, 0x53, 0x5f, 0x4d, 0x4f,
	0x44, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45,
	0x44, 0x10, 0x26, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x52, 0x52, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x29, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x2a,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x49, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x10, 0x2c, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x49, 0x4c, 0x44, 0x5f, 0x45, 0x58, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x2d, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x10, 0x2e, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x50, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x10, 0x2f, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x10, 0x30, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x32, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x49, 0x44, 0x10, 0x33, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x10, 0x34, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x35, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x52, 0x52, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x36, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x37, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x38, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x52, 0x52, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x39, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45,
	0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52,
	0x45, 0x10, 0x3a, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x3b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x55, 0x42, 0x10, 0x3c,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x5f, 0x43, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x3d,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x52, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x42, 0x55, 0x46,
	0x10, 0x3e, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x5f, 0x4c, 0x49, 0x42, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x10, 0x3f, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x40, 0x12, 0x1e, 0x0a, 0x1a,
	0x45, 0x52, 0x52, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x41, 0x12, 0x19, 0x0a, 0x15,
	0x45, 0x52, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x49, 0x56,
	0x49, 0x4c, 0x45, 0x47, 0x45, 0x10, 0x42, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x4c, 0x49,
	0x53, 0x54, 0x10, 0x43, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x5f, 0x44,
	0x45, 0x4e, 0x49, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x44, 0x2a, 0x23, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x01, 0x2a, 0x33, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x2a, 0xb9, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x6f, 0x73, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x6f, 0x73, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x10, 0x14, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10,
	0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4a, 0x6f, 0x62, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x43, 0x70, 0x75, 0x73,
	0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x10, 0x20, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x61, 0x78,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b,
	0x10, 0x21, 0x42, 0x82, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x44, 0x65, 0x66,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x16, 0x73, 0x63, 0x6f, 0x77, 0x2d, 0x63,
	0x72, 0x61, 0x6e, 0x65, 0x2d, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e,
	0xa2, 0x02, 0x03, 0x43, 0x47, 0x58, 0xaa, 0x02, 0x0a, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0xca, 0x02, 0x0a, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x5c, 0x47, 0x72, 0x70, 0x63,
	0xe2, 0x02, 0x16, 0x43, 0x72, 0x61, 0x6e, 0x65, 0x5c, 0x47, 0x72, 0x70, 0x63, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0b, 0x43, 0x72, 0x61, 0x6e,
	0x65, 0x3a, 0x3a, 0x47, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_PublicDefs_proto_rawDescOnce sync.Once
	file_PublicDefs_proto_rawDescData []byte
)

func file_PublicDefs_proto_rawDescGZIP() []byte {
	file_PublicDefs_proto_rawDescOnce.Do(func() {
		file_PublicDefs_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_PublicDefs_proto_rawDesc), len(file_PublicDefs_proto_rawDesc)))
	})
	return file_PublicDefs_proto_rawDescData
}

var file_PublicDefs_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_PublicDefs_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_PublicDefs_proto_goTypes = []any{
	(PartitionState)(0),                   // 0: crane.grpc.PartitionState
	(CranedResourceState)(0),              // 1: crane.grpc.CranedResourceState
	(CranedControlState)(0),               // 2: crane.grpc.CranedControlState
	(TaskStatus)(0),                       // 3: crane.grpc.TaskStatus
	(TaskType)(0),                         // 4: crane.grpc.TaskType
	(InteractiveTaskType)(0),              // 5: crane.grpc.InteractiveTaskType
	(ErrCode)(0),                          // 6: crane.grpc.ErrCode
	(EntityType)(0),                       // 7: crane.grpc.EntityType
	(OperationType)(0),                    // 8: crane.grpc.OperationType
	(ModifyField)(0),                      // 9: crane.grpc.ModifyField
	(UserInfo_AdminLevel)(0),              // 10: crane.grpc.UserInfo.AdminLevel
	(*CranedId)(nil),                      // 11: crane.grpc.CranedId
	(*AllocatableResource)(nil),           // 12: crane.grpc.AllocatableResource
	(*TypeCountMap)(nil),                  // 13: crane.grpc.TypeCountMap
	(*DeviceMap)(nil),                     // 14: crane.grpc.DeviceMap
	(*Slots)(nil),                         // 15: crane.grpc.Slots
	(*DeviceTypeSlotsMap)(nil),            // 16: crane.grpc.DeviceTypeSlotsMap
	(*DedicatedResourceInNode)(nil),       // 17: crane.grpc.DedicatedResourceInNode
	(*ResourceInNode)(nil),                // 18: crane.grpc.ResourceInNode
	(*ResourceV2)(nil),                    // 19: crane.grpc.ResourceV2
	(*ResourceView)(nil),                  // 20: crane.grpc.ResourceView
	(*TaskToCtld)(nil),                    // 21: crane.grpc.TaskToCtld
	(*TaskInEmbeddedDb)(nil),              // 22: crane.grpc.TaskInEmbeddedDb
	(*RuntimeAttrOfTask)(nil),             // 23: crane.grpc.RuntimeAttrOfTask
	(*TaskToD)(nil),                       // 24: crane.grpc.TaskToD
	(*BatchTaskAdditionalMeta)(nil),       // 25: crane.grpc.BatchTaskAdditionalMeta
	(*X11Meta)(nil),                       // 26: crane.grpc.X11Meta
	(*InteractiveTaskAdditionalMeta)(nil), // 27: crane.grpc.InteractiveTaskAdditionalMeta
	(*TaskInfo)(nil),                      // 28: crane.grpc.TaskInfo
	(*PartitionInfo)(nil),                 // 29: crane.grpc.PartitionInfo
	(*CranedInfo)(nil),                    // 30: crane.grpc.CranedInfo
	(*TrimmedPartitionInfo)(nil),          // 31: crane.grpc.TrimmedPartitionInfo
	(*RichError)(nil),                     // 32: crane.grpc.RichError
	(*AccountInfo)(nil),                   // 33: crane.grpc.AccountInfo
	(*UserInfo)(nil),                      // 34: crane.grpc.UserInfo
	(*QosInfo)(nil),                       // 35: crane.grpc.QosInfo
	(*TimeInterval)(nil),                  // 36: crane.grpc.TimeInterval
	(*SystemRelInfo)(nil),                 // 37: crane.grpc.SystemRelInfo
	(*CranedRemoteMeta)(nil),              // 38: crane.grpc.CranedRemoteMeta
	nil,                                   // 39: crane.grpc.TypeCountMap.TypeCountMapEntry
	nil,                                   // 40: crane.grpc.DeviceMap.NameTypeMapEntry
	nil,                                   // 41: crane.grpc.DeviceTypeSlotsMap.TypeSlotsMapEntry
	nil,                                   // 42: crane.grpc.DedicatedResourceInNode.NameTypeMapEntry
	nil,                                   // 43: crane.grpc.ResourceV2.EachNodeResEntry
	nil,                                   // 44: crane.grpc.TaskToCtld.EnvEntry
	nil,                                   // 45: crane.grpc.TaskToD.EnvEntry
	(*TrimmedPartitionInfo_TrimmedCranedInfo)(nil), // 46: crane.grpc.TrimmedPartitionInfo.TrimmedCranedInfo
	(*UserInfo_AllowedPartitionQos)(nil),           // 47: crane.grpc.UserInfo.AllowedPartitionQos
	(*durationpb.Duration)(nil),                    // 48: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                  // 49: google.protobuf.Timestamp
}
var file_PublicDefs_proto_depIdxs = []int32{
	39, // 0: crane.grpc.TypeCountMap.type_count_map:type_name -> crane.grpc.TypeCountMap.TypeCountMapEntry
	40, // 1: crane.grpc.DeviceMap.name_type_map:type_name -> crane.grpc.DeviceMap.NameTypeMapEntry
	41, // 2: crane.grpc.DeviceTypeSlotsMap.type_slots_map:type_name -> crane.grpc.DeviceTypeSlotsMap.TypeSlotsMapEntry
	42, // 3: crane.grpc.DedicatedResourceInNode.name_type_map:type_name -> crane.grpc.DedicatedResourceInNode.NameTypeMapEntry
	12, // 4: crane.grpc.ResourceInNode.allocatable_res_in_node:type_name -> crane.grpc.AllocatableResource
	17, // 5: crane.grpc.ResourceInNode.dedicated_res_in_node:type_name -> crane.grpc.DedicatedResourceInNode
	43, // 6: crane.grpc.ResourceV2.each_node_res:type_name -> crane.grpc.ResourceV2.EachNodeResEntry
	12, // 7: crane.grpc.ResourceView.allocatable_res:type_name -> crane.grpc.AllocatableResource
	14, // 8: crane.grpc.ResourceView.device_map:type_name -> crane.grpc.DeviceMap
	48, // 9: crane.grpc.TaskToCtld.time_limit:type_name -> google.protobuf.Duration
	20, // 10: crane.grpc.TaskToCtld.resources:type_name -> crane.grpc.ResourceView
	4,  // 11: crane.grpc.TaskToCtld.type:type_name -> crane.grpc.TaskType
	25, // 12: crane.grpc.TaskToCtld.batch_meta:type_name -> crane.grpc.BatchTaskAdditionalMeta
	27, // 13: crane.grpc.TaskToCtld.interactive_meta:type_name -> crane.grpc.InteractiveTaskAdditionalMeta
	44, // 14: crane.grpc.TaskToCtld.env:type_name -> crane.grpc.TaskToCtld.EnvEntry
	23, // 15: crane.grpc.TaskInEmbeddedDb.runtime_attr:type_name -> crane.grpc.RuntimeAttrOfTask
	21, // 16: crane.grpc.TaskInEmbeddedDb.task_to_ctld:type_name -> crane.grpc.TaskToCtld
	3,  // 17: crane.grpc.RuntimeAttrOfTask.status:type_name -> crane.grpc.TaskStatus
	49, // 18: crane.grpc.RuntimeAttrOfTask.submit_time:type_name -> google.protobuf.Timestamp
	49, // 19: crane.grpc.RuntimeAttrOfTask.start_time:type_name -> google.protobuf.Timestamp
	49, // 20: crane.grpc.RuntimeAttrOfTask.end_time:type_name -> google.protobuf.Timestamp
	19, // 21: crane.grpc.RuntimeAttrOfTask.resources:type_name -> crane.grpc.ResourceV2
	4,  // 22: crane.grpc.TaskToD.type:type_name -> crane.grpc.TaskType
	18, // 23: crane.grpc.TaskToD.resources:type_name -> crane.grpc.ResourceInNode
	49, // 24: crane.grpc.TaskToD.start_time:type_name -> google.protobuf.Timestamp
	48, // 25: crane.grpc.TaskToD.time_limit:type_name -> google.protobuf.Duration
	25, // 26: crane.grpc.TaskToD.batch_meta:type_name -> crane.grpc.BatchTaskAdditionalMeta
	27, // 27: crane.grpc.TaskToD.interactive_meta:type_name -> crane.grpc.InteractiveTaskAdditionalMeta
	45, // 28: crane.grpc.TaskToD.env:type_name -> crane.grpc.TaskToD.EnvEntry
	5,  // 29: crane.grpc.InteractiveTaskAdditionalMeta.interactive_type:type_name -> crane.grpc.InteractiveTaskType
	26, // 30: crane.grpc.InteractiveTaskAdditionalMeta.x11_meta:type_name -> crane.grpc.X11Meta
	4,  // 31: crane.grpc.TaskInfo.type:type_name -> crane.grpc.TaskType
	48, // 32: crane.grpc.TaskInfo.time_limit:type_name -> google.protobuf.Duration
	49, // 33: crane.grpc.TaskInfo.start_time:type_name -> google.protobuf.Timestamp
	49, // 34: crane.grpc.TaskInfo.end_time:type_name -> google.protobuf.Timestamp
	49, // 35: crane.grpc.TaskInfo.submit_time:type_name -> google.protobuf.Timestamp
	20, // 36: crane.grpc.TaskInfo.res_view:type_name -> crane.grpc.ResourceView
	3,  // 37: crane.grpc.TaskInfo.status:type_name -> crane.grpc.TaskStatus
	48, // 38: crane.grpc.TaskInfo.elapsed_time:type_name -> google.protobuf.Duration
	0,  // 39: crane.grpc.PartitionInfo.state:type_name -> crane.grpc.PartitionState
	20, // 40: crane.grpc.PartitionInfo.res_total:type_name -> crane.grpc.ResourceView
	20, // 41: crane.grpc.PartitionInfo.res_avail:type_name -> crane.grpc.ResourceView
	20, // 42: crane.grpc.PartitionInfo.res_alloc:type_name -> crane.grpc.ResourceView
	1,  // 43: crane.grpc.CranedInfo.resource_state:type_name -> crane.grpc.CranedResourceState
	2,  // 44: crane.grpc.CranedInfo.control_state:type_name -> crane.grpc.CranedControlState
	18, // 45: crane.grpc.CranedInfo.res_total:type_name -> crane.grpc.ResourceInNode
	18, // 46: crane.grpc.CranedInfo.res_avail:type_name -> crane.grpc.ResourceInNode
	18, // 47: crane.grpc.CranedInfo.res_alloc:type_name -> crane.grpc.ResourceInNode
	49, // 48: crane.grpc.CranedInfo.craned_start_time:type_name -> google.protobuf.Timestamp
	49, // 49: crane.grpc.CranedInfo.system_boot_time:type_name -> google.protobuf.Timestamp
	49, // 50: crane.grpc.CranedInfo.last_busy_time:type_name -> google.protobuf.Timestamp
	0,  // 51: crane.grpc.TrimmedPartitionInfo.state:type_name -> crane.grpc.PartitionState
	46, // 52: crane.grpc.TrimmedPartitionInfo.craned_lists:type_name -> crane.grpc.TrimmedPartitionInfo.TrimmedCranedInfo
	6,  // 53: crane.grpc.RichError.code:type_name -> crane.grpc.ErrCode
	47, // 54: crane.grpc.UserInfo.allowed_partition_qos_list:type_name -> crane.grpc.UserInfo.AllowedPartitionQos
	10, // 55: crane.grpc.UserInfo.admin_level:type_name -> crane.grpc.UserInfo.AdminLevel
	49, // 56: crane.grpc.TimeInterval.lower_bound:type_name -> google.protobuf.Timestamp
	49, // 57: crane.grpc.TimeInterval.upper_bound:type_name -> google.protobuf.Timestamp
	17, // 58: crane.grpc.CranedRemoteMeta.dres_in_node:type_name -> crane.grpc.DedicatedResourceInNode
	37, // 59: crane.grpc.CranedRemoteMeta.sys_rel_info:type_name -> crane.grpc.SystemRelInfo
	49, // 60: crane.grpc.CranedRemoteMeta.craned_start_time:type_name -> google.protobuf.Timestamp
	49, // 61: crane.grpc.CranedRemoteMeta.system_boot_time:type_name -> google.protobuf.Timestamp
	13, // 62: crane.grpc.DeviceMap.NameTypeMapEntry.value:type_name -> crane.grpc.TypeCountMap
	15, // 63: crane.grpc.DeviceTypeSlotsMap.TypeSlotsMapEntry.value:type_name -> crane.grpc.Slots
	16, // 64: crane.grpc.DedicatedResourceInNode.NameTypeMapEntry.value:type_name -> crane.grpc.DeviceTypeSlotsMap
	18, // 65: crane.grpc.ResourceV2.EachNodeResEntry.value:type_name -> crane.grpc.ResourceInNode
	1,  // 66: crane.grpc.TrimmedPartitionInfo.TrimmedCranedInfo.resource_state:type_name -> crane.grpc.CranedResourceState
	2,  // 67: crane.grpc.TrimmedPartitionInfo.TrimmedCranedInfo.control_state:type_name -> crane.grpc.CranedControlState
	68, // [68:68] is the sub-list for method output_type
	68, // [68:68] is the sub-list for method input_type
	68, // [68:68] is the sub-list for extension type_name
	68, // [68:68] is the sub-list for extension extendee
	0,  // [0:68] is the sub-list for field type_name
}

func init() { file_PublicDefs_proto_init() }
func file_PublicDefs_proto_init() {
	if File_PublicDefs_proto != nil {
		return
	}
	file_PublicDefs_proto_msgTypes[10].OneofWrappers = []any{
		(*TaskToCtld_BatchMeta)(nil),
		(*TaskToCtld_InteractiveMeta)(nil),
	}
	file_PublicDefs_proto_msgTypes[13].OneofWrappers = []any{
		(*TaskToD_BatchMeta)(nil),
		(*TaskToD_InteractiveMeta)(nil),
	}
	file_PublicDefs_proto_msgTypes[17].OneofWrappers = []any{
		(*TaskInfo_PendingReason)(nil),
		(*TaskInfo_CranedList)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_PublicDefs_proto_rawDesc), len(file_PublicDefs_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_PublicDefs_proto_goTypes,
		DependencyIndexes: file_PublicDefs_proto_depIdxs,
		EnumInfos:         file_PublicDefs_proto_enumTypes,
		MessageInfos:      file_PublicDefs_proto_msgTypes,
	}.Build()
	File_PublicDefs_proto = out.File
	file_PublicDefs_proto_goTypes = nil
	file_PublicDefs_proto_depIdxs = nil
}
