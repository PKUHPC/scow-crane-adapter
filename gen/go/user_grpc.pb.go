//*
// Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
// SCOW is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: user.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_AddUserToAccount_FullMethodName              = "/scow.scheduler_adapter.UserService/AddUserToAccount"
	UserService_RemoveUserFromAccount_FullMethodName         = "/scow.scheduler_adapter.UserService/RemoveUserFromAccount"
	UserService_BlockUserInAccount_FullMethodName            = "/scow.scheduler_adapter.UserService/BlockUserInAccount"
	UserService_UnblockUserInAccount_FullMethodName          = "/scow.scheduler_adapter.UserService/UnblockUserInAccount"
	UserService_QueryUserInAccountBlockStatus_FullMethodName = "/scow.scheduler_adapter.UserService/QueryUserInAccountBlockStatus"
	UserService_DeleteUser_FullMethodName                    = "/scow.scheduler_adapter.UserService/DeleteUser"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	//
	// description: add user to account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user already exists in account
	//   ALREADY_EXISTS, USER_ACCOUNT_ALREADY_EXISTS, {}
	AddUserToAccount(ctx context.Context, in *AddUserToAccountRequest, opts ...grpc.CallOption) (*AddUserToAccountResponse, error)
	//
	// description: remove user from account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	RemoveUserFromAccount(ctx context.Context, in *RemoveUserFromAccountRequest, opts ...grpc.CallOption) (*RemoveUserFromAccountResponse, error)
	//
	// description: block user in account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	// special case:
	// - already blocked, don't throw error
	BlockUserInAccount(ctx context.Context, in *BlockUserInAccountRequest, opts ...grpc.CallOption) (*BlockUserInAccountResponse, error)
	//
	// description: unblock user in account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	// special case:
	// - already unblocked, don't throw error
	UnblockUserInAccount(ctx context.Context, in *UnblockUserInAccountRequest, opts ...grpc.CallOption) (*UnblockUserInAccountResponse, error)
	//
	// description: query if a user is blocked in an account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	QueryUserInAccountBlockStatus(ctx context.Context, in *QueryUserInAccountBlockStatusRequest, opts ...grpc.CallOption) (*QueryUserInAccountBlockStatusResponse, error)
	//
	// description: delete user
	// errors:
	// - user not exist
	//   NOT_FOUND, USER_NOT_FOUND, {}
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) AddUserToAccount(ctx context.Context, in *AddUserToAccountRequest, opts ...grpc.CallOption) (*AddUserToAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddUserToAccountResponse)
	err := c.cc.Invoke(ctx, UserService_AddUserToAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) RemoveUserFromAccount(ctx context.Context, in *RemoveUserFromAccountRequest, opts ...grpc.CallOption) (*RemoveUserFromAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveUserFromAccountResponse)
	err := c.cc.Invoke(ctx, UserService_RemoveUserFromAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BlockUserInAccount(ctx context.Context, in *BlockUserInAccountRequest, opts ...grpc.CallOption) (*BlockUserInAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockUserInAccountResponse)
	err := c.cc.Invoke(ctx, UserService_BlockUserInAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UnblockUserInAccount(ctx context.Context, in *UnblockUserInAccountRequest, opts ...grpc.CallOption) (*UnblockUserInAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnblockUserInAccountResponse)
	err := c.cc.Invoke(ctx, UserService_UnblockUserInAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) QueryUserInAccountBlockStatus(ctx context.Context, in *QueryUserInAccountBlockStatusRequest, opts ...grpc.CallOption) (*QueryUserInAccountBlockStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryUserInAccountBlockStatusResponse)
	err := c.cc.Invoke(ctx, UserService_QueryUserInAccountBlockStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations should embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	//
	// description: add user to account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user already exists in account
	//   ALREADY_EXISTS, USER_ACCOUNT_ALREADY_EXISTS, {}
	AddUserToAccount(context.Context, *AddUserToAccountRequest) (*AddUserToAccountResponse, error)
	//
	// description: remove user from account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	RemoveUserFromAccount(context.Context, *RemoveUserFromAccountRequest) (*RemoveUserFromAccountResponse, error)
	//
	// description: block user in account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	// special case:
	// - already blocked, don't throw error
	BlockUserInAccount(context.Context, *BlockUserInAccountRequest) (*BlockUserInAccountResponse, error)
	//
	// description: unblock user in account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	// special case:
	// - already unblocked, don't throw error
	UnblockUserInAccount(context.Context, *UnblockUserInAccountRequest) (*UnblockUserInAccountResponse, error)
	//
	// description: query if a user is blocked in an account
	// errors:
	// - account not exist
	//   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
	// - user not exist in account
	//   NOT_FOUND, USER_ACCOUNT_NOT_FOUND, {}
	QueryUserInAccountBlockStatus(context.Context, *QueryUserInAccountBlockStatusRequest) (*QueryUserInAccountBlockStatusResponse, error)
	//
	// description: delete user
	// errors:
	// - user not exist
	//   NOT_FOUND, USER_NOT_FOUND, {}
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
}

// UnimplementedUserServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) AddUserToAccount(context.Context, *AddUserToAccountRequest) (*AddUserToAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToAccount not implemented")
}
func (UnimplementedUserServiceServer) RemoveUserFromAccount(context.Context, *RemoveUserFromAccountRequest) (*RemoveUserFromAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromAccount not implemented")
}
func (UnimplementedUserServiceServer) BlockUserInAccount(context.Context, *BlockUserInAccountRequest) (*BlockUserInAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockUserInAccount not implemented")
}
func (UnimplementedUserServiceServer) UnblockUserInAccount(context.Context, *UnblockUserInAccountRequest) (*UnblockUserInAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockUserInAccount not implemented")
}
func (UnimplementedUserServiceServer) QueryUserInAccountBlockStatus(context.Context, *QueryUserInAccountBlockStatusRequest) (*QueryUserInAccountBlockStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryUserInAccountBlockStatus not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) testEmbeddedByValue() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_AddUserToAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).AddUserToAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_AddUserToAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).AddUserToAccount(ctx, req.(*AddUserToAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_RemoveUserFromAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserFromAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).RemoveUserFromAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_RemoveUserFromAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).RemoveUserFromAccount(ctx, req.(*RemoveUserFromAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BlockUserInAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockUserInAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BlockUserInAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BlockUserInAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BlockUserInAccount(ctx, req.(*BlockUserInAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UnblockUserInAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnblockUserInAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UnblockUserInAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UnblockUserInAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UnblockUserInAccount(ctx, req.(*UnblockUserInAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_QueryUserInAccountBlockStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInAccountBlockStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).QueryUserInAccountBlockStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_QueryUserInAccountBlockStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).QueryUserInAccountBlockStatus(ctx, req.(*QueryUserInAccountBlockStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scow.scheduler_adapter.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUserToAccount",
			Handler:    _UserService_AddUserToAccount_Handler,
		},
		{
			MethodName: "RemoveUserFromAccount",
			Handler:    _UserService_RemoveUserFromAccount_Handler,
		},
		{
			MethodName: "BlockUserInAccount",
			Handler:    _UserService_BlockUserInAccount_Handler,
		},
		{
			MethodName: "UnblockUserInAccount",
			Handler:    _UserService_UnblockUserInAccount_Handler,
		},
		{
			MethodName: "QueryUserInAccountBlockStatus",
			Handler:    _UserService_QueryUserInAccountBlockStatus_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
