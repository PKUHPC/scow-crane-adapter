//*
// Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
// SCOW is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: account.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListAccountsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccountsRequest) Reset() {
	*x = ListAccountsRequest{}
	mi := &file_account_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsRequest) ProtoMessage() {}

func (x *ListAccountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsRequest.ProtoReflect.Descriptor instead.
func (*ListAccountsRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{0}
}

func (x *ListAccountsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type ListAccountsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []string               `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAccountsResponse) Reset() {
	*x = ListAccountsResponse{}
	mi := &file_account_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAccountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAccountsResponse) ProtoMessage() {}

func (x *ListAccountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAccountsResponse.ProtoReflect.Descriptor instead.
func (*ListAccountsResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{1}
}

func (x *ListAccountsResponse) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type CreateAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	OwnerUserId   string                 `protobuf:"bytes,2,opt,name=owner_user_id,json=ownerUserId,proto3" json:"owner_user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	mi := &file_account_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *CreateAccountRequest) GetOwnerUserId() string {
	if x != nil {
		return x.OwnerUserId
	}
	return ""
}

type CreateAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAccountResponse) Reset() {
	*x = CreateAccountResponse{}
	mi := &file_account_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountResponse) ProtoMessage() {}

func (x *CreateAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{3}
}

type BlockAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockAccountRequest) Reset() {
	*x = BlockAccountRequest{}
	mi := &file_account_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAccountRequest) ProtoMessage() {}

func (x *BlockAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAccountRequest.ProtoReflect.Descriptor instead.
func (*BlockAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{4}
}

func (x *BlockAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type BlockAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockAccountResponse) Reset() {
	*x = BlockAccountResponse{}
	mi := &file_account_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAccountResponse) ProtoMessage() {}

func (x *BlockAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAccountResponse.ProtoReflect.Descriptor instead.
func (*BlockAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{5}
}

type UnblockAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockAccountRequest) Reset() {
	*x = UnblockAccountRequest{}
	mi := &file_account_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockAccountRequest) ProtoMessage() {}

func (x *UnblockAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockAccountRequest.ProtoReflect.Descriptor instead.
func (*UnblockAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{6}
}

func (x *UnblockAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type UnblockAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockAccountResponse) Reset() {
	*x = UnblockAccountResponse{}
	mi := &file_account_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockAccountResponse) ProtoMessage() {}

func (x *UnblockAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockAccountResponse.ProtoReflect.Descriptor instead.
func (*UnblockAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{7}
}

type ClusterAccountInfo struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	AccountName   string                              `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Users         []*ClusterAccountInfo_UserInAccount `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Owner         *string                             `protobuf:"bytes,3,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	Blocked       bool                                `protobuf:"varint,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterAccountInfo) Reset() {
	*x = ClusterAccountInfo{}
	mi := &file_account_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccountInfo) ProtoMessage() {}

func (x *ClusterAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccountInfo.ProtoReflect.Descriptor instead.
func (*ClusterAccountInfo) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{8}
}

func (x *ClusterAccountInfo) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ClusterAccountInfo) GetUsers() []*ClusterAccountInfo_UserInAccount {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ClusterAccountInfo) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ClusterAccountInfo) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type GetAllAccountsWithUsersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllAccountsWithUsersRequest) Reset() {
	*x = GetAllAccountsWithUsersRequest{}
	mi := &file_account_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllAccountsWithUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAccountsWithUsersRequest) ProtoMessage() {}

func (x *GetAllAccountsWithUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAccountsWithUsersRequest.ProtoReflect.Descriptor instead.
func (*GetAllAccountsWithUsersRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{9}
}

type GetAllAccountsWithUsersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Accounts      []*ClusterAccountInfo  `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllAccountsWithUsersResponse) Reset() {
	*x = GetAllAccountsWithUsersResponse{}
	mi := &file_account_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllAccountsWithUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAccountsWithUsersResponse) ProtoMessage() {}

func (x *GetAllAccountsWithUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAccountsWithUsersResponse.ProtoReflect.Descriptor instead.
func (*GetAllAccountsWithUsersResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllAccountsWithUsersResponse) GetAccounts() []*ClusterAccountInfo {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type QueryAccountBlockStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryAccountBlockStatusRequest) Reset() {
	*x = QueryAccountBlockStatusRequest{}
	mi := &file_account_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccountBlockStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBlockStatusRequest) ProtoMessage() {}

func (x *QueryAccountBlockStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBlockStatusRequest.ProtoReflect.Descriptor instead.
func (*QueryAccountBlockStatusRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{11}
}

func (x *QueryAccountBlockStatusRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type AccountStatusInPartition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partition     string                 `protobuf:"bytes,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Blocked       bool                   `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountStatusInPartition) Reset() {
	*x = AccountStatusInPartition{}
	mi := &file_account_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountStatusInPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatusInPartition) ProtoMessage() {}

func (x *AccountStatusInPartition) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatusInPartition.ProtoReflect.Descriptor instead.
func (*AccountStatusInPartition) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{12}
}

func (x *AccountStatusInPartition) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *AccountStatusInPartition) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type QueryAccountBlockStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// In versions later than 1.7.0:
	// - The field "blocked" represents whether the account is completely blocked across all partitions:
	// - true: The account is fully blocked in all partitions.
	// - false: The account has one or more partitions where it is not blocked.
	Blocked bool `protobuf:"varint,1,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// the details of account blocked status in every partition
	// only returns in version later than 1.7.0
	AccountBlockedDetails []*AccountStatusInPartition `protobuf:"bytes,2,rep,name=account_blocked_details,json=accountBlockedDetails,proto3" json:"account_blocked_details,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueryAccountBlockStatusResponse) Reset() {
	*x = QueryAccountBlockStatusResponse{}
	mi := &file_account_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccountBlockStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBlockStatusResponse) ProtoMessage() {}

func (x *QueryAccountBlockStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBlockStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryAccountBlockStatusResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{13}
}

func (x *QueryAccountBlockStatusResponse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *QueryAccountBlockStatusResponse) GetAccountBlockedDetails() []*AccountStatusInPartition {
	if x != nil {
		return x.AccountBlockedDetails
	}
	return nil
}

type DeleteAccountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAccountRequest) Reset() {
	*x = DeleteAccountRequest{}
	mi := &file_account_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountRequest) ProtoMessage() {}

func (x *DeleteAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteAccountRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteAccountRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type DeleteAccountResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteAccountResponse) Reset() {
	*x = DeleteAccountResponse{}
	mi := &file_account_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAccountResponse) ProtoMessage() {}

func (x *DeleteAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteAccountResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{15}
}

// ************ Below is the interfaces for optional feature: RESOURCE_MANAGEMENT ***************
type BlockAccountWithPartitionsRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	AccountName string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// when the value exists: block specified partition(s) of the account
	BlockedPartitions []string `protobuf:"bytes,2,rep,name=blocked_partitions,json=blockedPartitions,proto3" json:"blocked_partitions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *BlockAccountWithPartitionsRequest) Reset() {
	*x = BlockAccountWithPartitionsRequest{}
	mi := &file_account_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockAccountWithPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAccountWithPartitionsRequest) ProtoMessage() {}

func (x *BlockAccountWithPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAccountWithPartitionsRequest.ProtoReflect.Descriptor instead.
func (*BlockAccountWithPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{16}
}

func (x *BlockAccountWithPartitionsRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *BlockAccountWithPartitionsRequest) GetBlockedPartitions() []string {
	if x != nil {
		return x.BlockedPartitions
	}
	return nil
}

type BlockAccountWithPartitionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlockAccountWithPartitionsResponse) Reset() {
	*x = BlockAccountWithPartitionsResponse{}
	mi := &file_account_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockAccountWithPartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockAccountWithPartitionsResponse) ProtoMessage() {}

func (x *BlockAccountWithPartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockAccountWithPartitionsResponse.ProtoReflect.Descriptor instead.
func (*BlockAccountWithPartitionsResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{17}
}

type UnblockAccountWithPartitionsRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	AccountName string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// specify the available partition(s) when executing unblock
	UnblockedPartitions []string `protobuf:"bytes,2,rep,name=unblocked_partitions,json=unblockedPartitions,proto3" json:"unblocked_partitions,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *UnblockAccountWithPartitionsRequest) Reset() {
	*x = UnblockAccountWithPartitionsRequest{}
	mi := &file_account_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockAccountWithPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockAccountWithPartitionsRequest) ProtoMessage() {}

func (x *UnblockAccountWithPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockAccountWithPartitionsRequest.ProtoReflect.Descriptor instead.
func (*UnblockAccountWithPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{18}
}

func (x *UnblockAccountWithPartitionsRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *UnblockAccountWithPartitionsRequest) GetUnblockedPartitions() []string {
	if x != nil {
		return x.UnblockedPartitions
	}
	return nil
}

type UnblockAccountWithPartitionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnblockAccountWithPartitionsResponse) Reset() {
	*x = UnblockAccountWithPartitionsResponse{}
	mi := &file_account_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnblockAccountWithPartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnblockAccountWithPartitionsResponse) ProtoMessage() {}

func (x *UnblockAccountWithPartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnblockAccountWithPartitionsResponse.ProtoReflect.Descriptor instead.
func (*UnblockAccountWithPartitionsResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{19}
}

type QueryAccountBlockStatusWithPartitionsRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	AccountName string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	// query in specified partition(s)
	// when the value is [] or undefined, return all partitions blocked details
	QueriedPartitions []string `protobuf:"bytes,2,rep,name=queried_partitions,json=queriedPartitions,proto3" json:"queried_partitions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *QueryAccountBlockStatusWithPartitionsRequest) Reset() {
	*x = QueryAccountBlockStatusWithPartitionsRequest{}
	mi := &file_account_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccountBlockStatusWithPartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBlockStatusWithPartitionsRequest) ProtoMessage() {}

func (x *QueryAccountBlockStatusWithPartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBlockStatusWithPartitionsRequest.ProtoReflect.Descriptor instead.
func (*QueryAccountBlockStatusWithPartitionsRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{20}
}

func (x *QueryAccountBlockStatusWithPartitionsRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *QueryAccountBlockStatusWithPartitionsRequest) GetQueriedPartitions() []string {
	if x != nil {
		return x.QueriedPartitions
	}
	return nil
}

type QueryAccountBlockStatusWithPartitionsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// return the overall blocked_status in all partitions
	// false: when the queried account has on or more available partitions
	// true: when the queried account has no available partitions
	Blocked bool `protobuf:"varint,1,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// the details of account blocked status in every partition
	AccountBlockedDetails []*AccountStatusInPartition `protobuf:"bytes,2,rep,name=account_blocked_details,json=accountBlockedDetails,proto3" json:"account_blocked_details,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *QueryAccountBlockStatusWithPartitionsResponse) Reset() {
	*x = QueryAccountBlockStatusWithPartitionsResponse{}
	mi := &file_account_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryAccountBlockStatusWithPartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryAccountBlockStatusWithPartitionsResponse) ProtoMessage() {}

func (x *QueryAccountBlockStatusWithPartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryAccountBlockStatusWithPartitionsResponse.ProtoReflect.Descriptor instead.
func (*QueryAccountBlockStatusWithPartitionsResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{21}
}

func (x *QueryAccountBlockStatusWithPartitionsResponse) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *QueryAccountBlockStatusWithPartitionsResponse) GetAccountBlockedDetails() []*AccountStatusInPartition {
	if x != nil {
		return x.AccountBlockedDetails
	}
	return nil
}

type ClusterAccountInfoWithBlockedDetails struct {
	state       protoimpl.MessageState                                `protogen:"open.v1"`
	AccountName string                                                `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Users       []*ClusterAccountInfoWithBlockedDetails_UserInAccount `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	Owner       *string                                               `protobuf:"bytes,3,opt,name=owner,proto3,oneof" json:"owner,omitempty"`
	// return the overall blocked_status in all partitions
	// false: when the queried account has one or more available partitions
	// true: when the queried account has no available partitions
	Blocked bool `protobuf:"varint,4,opt,name=blocked,proto3" json:"blocked,omitempty"`
	// the details of account blocked status in every partition
	AccountBlockedDetails []*AccountStatusInPartition `protobuf:"bytes,5,rep,name=account_blocked_details,json=accountBlockedDetails,proto3" json:"account_blocked_details,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ClusterAccountInfoWithBlockedDetails) Reset() {
	*x = ClusterAccountInfoWithBlockedDetails{}
	mi := &file_account_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterAccountInfoWithBlockedDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccountInfoWithBlockedDetails) ProtoMessage() {}

func (x *ClusterAccountInfoWithBlockedDetails) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccountInfoWithBlockedDetails.ProtoReflect.Descriptor instead.
func (*ClusterAccountInfoWithBlockedDetails) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{22}
}

func (x *ClusterAccountInfoWithBlockedDetails) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *ClusterAccountInfoWithBlockedDetails) GetUsers() []*ClusterAccountInfoWithBlockedDetails_UserInAccount {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ClusterAccountInfoWithBlockedDetails) GetOwner() string {
	if x != nil && x.Owner != nil {
		return *x.Owner
	}
	return ""
}

func (x *ClusterAccountInfoWithBlockedDetails) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *ClusterAccountInfoWithBlockedDetails) GetAccountBlockedDetails() []*AccountStatusInPartition {
	if x != nil {
		return x.AccountBlockedDetails
	}
	return nil
}

type GetAllAccountsWithUsersAndBlockedDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllAccountsWithUsersAndBlockedDetailsRequest) Reset() {
	*x = GetAllAccountsWithUsersAndBlockedDetailsRequest{}
	mi := &file_account_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllAccountsWithUsersAndBlockedDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAccountsWithUsersAndBlockedDetailsRequest) ProtoMessage() {}

func (x *GetAllAccountsWithUsersAndBlockedDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAccountsWithUsersAndBlockedDetailsRequest.ProtoReflect.Descriptor instead.
func (*GetAllAccountsWithUsersAndBlockedDetailsRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{23}
}

type GetAllAccountsWithUsersAndBlockedDetailsResponse struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Accounts      []*ClusterAccountInfoWithBlockedDetails `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAllAccountsWithUsersAndBlockedDetailsResponse) Reset() {
	*x = GetAllAccountsWithUsersAndBlockedDetailsResponse{}
	mi := &file_account_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllAccountsWithUsersAndBlockedDetailsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAccountsWithUsersAndBlockedDetailsResponse) ProtoMessage() {}

func (x *GetAllAccountsWithUsersAndBlockedDetailsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAccountsWithUsersAndBlockedDetailsResponse.ProtoReflect.Descriptor instead.
func (*GetAllAccountsWithUsersAndBlockedDetailsResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{24}
}

func (x *GetAllAccountsWithUsersAndBlockedDetailsResponse) GetAccounts() []*ClusterAccountInfoWithBlockedDetails {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type SyncAccountInfo struct {
	state            protoimpl.MessageState           `protogen:"open.v1"`
	AccountName      string                           `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	Users            []*SyncAccountInfo_UserInAccount `protobuf:"bytes,2,rep,name=users,proto3" json:"users,omitempty"`
	OwnerId          *string                          `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3,oneof" json:"owner_id,omitempty"`
	BlockedInCluster bool                             `protobuf:"varint,4,opt,name=blocked_in_cluster,json=blockedInCluster,proto3" json:"blocked_in_cluster,omitempty"`
	WhitelistId      *uint32                          `protobuf:"varint,5,opt,name=whitelist_id,json=whitelistId,proto3,oneof" json:"whitelist_id,omitempty"`
	// use assigned partitions or all partitions
	//
	// Types that are valid to be assigned to UnblockedPartitions:
	//
	//	*SyncAccountInfo_AssignedPartitions_
	//	*SyncAccountInfo_UseAllPartitions
	UnblockedPartitions isSyncAccountInfo_UnblockedPartitions `protobuf_oneof:"unblocked_partitions"`
	Deleted             *bool                                 `protobuf:"varint,8,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SyncAccountInfo) Reset() {
	*x = SyncAccountInfo{}
	mi := &file_account_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountInfo) ProtoMessage() {}

func (x *SyncAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountInfo.ProtoReflect.Descriptor instead.
func (*SyncAccountInfo) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{25}
}

func (x *SyncAccountInfo) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SyncAccountInfo) GetUsers() []*SyncAccountInfo_UserInAccount {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *SyncAccountInfo) GetOwnerId() string {
	if x != nil && x.OwnerId != nil {
		return *x.OwnerId
	}
	return ""
}

func (x *SyncAccountInfo) GetBlockedInCluster() bool {
	if x != nil {
		return x.BlockedInCluster
	}
	return false
}

func (x *SyncAccountInfo) GetWhitelistId() uint32 {
	if x != nil && x.WhitelistId != nil {
		return *x.WhitelistId
	}
	return 0
}

func (x *SyncAccountInfo) GetUnblockedPartitions() isSyncAccountInfo_UnblockedPartitions {
	if x != nil {
		return x.UnblockedPartitions
	}
	return nil
}

func (x *SyncAccountInfo) GetAssignedPartitions() *SyncAccountInfo_AssignedPartitions {
	if x != nil {
		if x, ok := x.UnblockedPartitions.(*SyncAccountInfo_AssignedPartitions_); ok {
			return x.AssignedPartitions
		}
	}
	return nil
}

func (x *SyncAccountInfo) GetUseAllPartitions() bool {
	if x != nil {
		if x, ok := x.UnblockedPartitions.(*SyncAccountInfo_UseAllPartitions); ok {
			return x.UseAllPartitions
		}
	}
	return false
}

func (x *SyncAccountInfo) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

type isSyncAccountInfo_UnblockedPartitions interface {
	isSyncAccountInfo_UnblockedPartitions()
}

type SyncAccountInfo_AssignedPartitions_ struct {
	AssignedPartitions *SyncAccountInfo_AssignedPartitions `protobuf:"bytes,6,opt,name=assigned_partitions,json=assignedPartitions,proto3,oneof"`
}

type SyncAccountInfo_UseAllPartitions struct {
	UseAllPartitions bool `protobuf:"varint,7,opt,name=use_all_partitions,json=useAllPartitions,proto3,oneof"`
}

func (*SyncAccountInfo_AssignedPartitions_) isSyncAccountInfo_UnblockedPartitions() {}

func (*SyncAccountInfo_UseAllPartitions) isSyncAccountInfo_UnblockedPartitions() {}

type SyncAccountUserInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// session id during one same data sync operation
	// the scheduler can only process the same data once with the same session_id.
	SessionId    string             `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SyncAccounts []*SyncAccountInfo `protobuf:"bytes,2,rep,name=sync_accounts,json=syncAccounts,proto3" json:"sync_accounts,omitempty"`
	// maximum execution time for this request in milliseconds
	TimeoutMilliseconds *uint32 `protobuf:"varint,3,opt,name=timeout_milliseconds,json=timeoutMilliseconds,proto3,oneof" json:"timeout_milliseconds,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SyncAccountUserInfoRequest) Reset() {
	*x = SyncAccountUserInfoRequest{}
	mi := &file_account_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoRequest) ProtoMessage() {}

func (x *SyncAccountUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoRequest.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{26}
}

func (x *SyncAccountUserInfoRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SyncAccountUserInfoRequest) GetSyncAccounts() []*SyncAccountInfo {
	if x != nil {
		return x.SyncAccounts
	}
	return nil
}

func (x *SyncAccountUserInfoRequest) GetTimeoutMilliseconds() uint32 {
	if x != nil && x.TimeoutMilliseconds != nil {
		return *x.TimeoutMilliseconds
	}
	return 0
}

type SyncAccountUserInfoResponse struct {
	state       protoimpl.MessageState                             `protogen:"open.v1"`
	SyncResults []*SyncAccountUserInfoResponse_SyncOperationResult `protobuf:"bytes,1,rep,name=sync_results,json=syncResults,proto3" json:"sync_results,omitempty"`
	// true: The entire request was processed successfully and all data was handled within the specified timeout_seconds.
	// false: The request processing was interrupted due to timeout_seconds limit.
	CompletelyExecuted bool `protobuf:"varint,2,opt,name=completely_executed,json=completelyExecuted,proto3" json:"completely_executed,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse) Reset() {
	*x = SyncAccountUserInfoResponse{}
	mi := &file_account_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27}
}

func (x *SyncAccountUserInfoResponse) GetSyncResults() []*SyncAccountUserInfoResponse_SyncOperationResult {
	if x != nil {
		return x.SyncResults
	}
	return nil
}

func (x *SyncAccountUserInfoResponse) GetCompletelyExecuted() bool {
	if x != nil {
		return x.CompletelyExecuted
	}
	return false
}

type ClusterAccountInfo_UserInAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Blocked       bool                   `protobuf:"varint,3,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterAccountInfo_UserInAccount) Reset() {
	*x = ClusterAccountInfo_UserInAccount{}
	mi := &file_account_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterAccountInfo_UserInAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccountInfo_UserInAccount) ProtoMessage() {}

func (x *ClusterAccountInfo_UserInAccount) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccountInfo_UserInAccount.ProtoReflect.Descriptor instead.
func (*ClusterAccountInfo_UserInAccount) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{8, 0}
}

func (x *ClusterAccountInfo_UserInAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClusterAccountInfo_UserInAccount) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ClusterAccountInfo_UserInAccount) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type ClusterAccountInfoWithBlockedDetails_UserInAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName      string                 `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	Blocked       bool                   `protobuf:"varint,3,opt,name=blocked,proto3" json:"blocked,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterAccountInfoWithBlockedDetails_UserInAccount) Reset() {
	*x = ClusterAccountInfoWithBlockedDetails_UserInAccount{}
	mi := &file_account_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterAccountInfoWithBlockedDetails_UserInAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterAccountInfoWithBlockedDetails_UserInAccount) ProtoMessage() {}

func (x *ClusterAccountInfoWithBlockedDetails_UserInAccount) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterAccountInfoWithBlockedDetails_UserInAccount.ProtoReflect.Descriptor instead.
func (*ClusterAccountInfoWithBlockedDetails_UserInAccount) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{22, 0}
}

func (x *ClusterAccountInfoWithBlockedDetails_UserInAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClusterAccountInfoWithBlockedDetails_UserInAccount) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ClusterAccountInfoWithBlockedDetails_UserInAccount) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

type SyncAccountInfo_UserInAccount struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Blocked       bool                   `protobuf:"varint,2,opt,name=blocked,proto3" json:"blocked,omitempty"`
	Deleted       *bool                  `protobuf:"varint,3,opt,name=deleted,proto3,oneof" json:"deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountInfo_UserInAccount) Reset() {
	*x = SyncAccountInfo_UserInAccount{}
	mi := &file_account_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountInfo_UserInAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountInfo_UserInAccount) ProtoMessage() {}

func (x *SyncAccountInfo_UserInAccount) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountInfo_UserInAccount.ProtoReflect.Descriptor instead.
func (*SyncAccountInfo_UserInAccount) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{25, 0}
}

func (x *SyncAccountInfo_UserInAccount) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SyncAccountInfo_UserInAccount) GetBlocked() bool {
	if x != nil {
		return x.Blocked
	}
	return false
}

func (x *SyncAccountInfo_UserInAccount) GetDeleted() bool {
	if x != nil && x.Deleted != nil {
		return *x.Deleted
	}
	return false
}

type SyncAccountInfo_AssignedPartitions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partitions    []string               `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountInfo_AssignedPartitions) Reset() {
	*x = SyncAccountInfo_AssignedPartitions{}
	mi := &file_account_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountInfo_AssignedPartitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountInfo_AssignedPartitions) ProtoMessage() {}

func (x *SyncAccountInfo_AssignedPartitions) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountInfo_AssignedPartitions.ProtoReflect.Descriptor instead.
func (*SyncAccountInfo_AssignedPartitions) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{25, 1}
}

func (x *SyncAccountInfo_AssignedPartitions) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type SyncAccountUserInfoResponse_CreateAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_CreateAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_CreateAccountOperation{}
	mi := &file_account_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_CreateAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_CreateAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_CreateAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_CreateAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_CreateAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 0}
}

func (x *SyncAccountUserInfoResponse_CreateAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type SyncAccountUserInfoResponse_BlockAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_BlockAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_BlockAccountOperation{}
	mi := &file_account_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_BlockAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_BlockAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_BlockAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_BlockAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_BlockAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 1}
}

func (x *SyncAccountUserInfoResponse_BlockAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type SyncAccountUserInfoResponse_UnblockAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_UnblockAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_UnblockAccountOperation{}
	mi := &file_account_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_UnblockAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_UnblockAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_UnblockAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_UnblockAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_UnblockAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 2}
}

func (x *SyncAccountUserInfoResponse_UnblockAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type SyncAccountUserInfoResponse_AddUserToAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_AddUserToAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_AddUserToAccountOperation{}
	mi := &file_account_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_AddUserToAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_AddUserToAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_AddUserToAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_AddUserToAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_AddUserToAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 3}
}

func (x *SyncAccountUserInfoResponse_AddUserToAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SyncAccountUserInfoResponse_AddUserToAccountOperation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SyncAccountUserInfoResponse_RemoveUserFromAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_RemoveUserFromAccountOperation{}
	mi := &file_account_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_RemoveUserFromAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 4}
}

func (x *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SyncAccountUserInfoResponse_BlockUserInAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_BlockUserInAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_BlockUserInAccountOperation{}
	mi := &file_account_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_BlockUserInAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_BlockUserInAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_BlockUserInAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_BlockUserInAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_BlockUserInAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 5}
}

func (x *SyncAccountUserInfoResponse_BlockUserInAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SyncAccountUserInfoResponse_BlockUserInAccountOperation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SyncAccountUserInfoResponse_UnblockUserInAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_UnblockUserInAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_UnblockUserInAccountOperation{}
	mi := &file_account_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_UnblockUserInAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_UnblockUserInAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_UnblockUserInAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_UnblockUserInAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_UnblockUserInAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 6}
}

func (x *SyncAccountUserInfoResponse_UnblockUserInAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *SyncAccountUserInfoResponse_UnblockUserInAccountOperation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SyncAccountUserInfoResponse_DeleteAccountOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_DeleteAccountOperation) Reset() {
	*x = SyncAccountUserInfoResponse_DeleteAccountOperation{}
	mi := &file_account_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_DeleteAccountOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_DeleteAccountOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_DeleteAccountOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_DeleteAccountOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_DeleteAccountOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 7}
}

func (x *SyncAccountUserInfoResponse_DeleteAccountOperation) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

type SyncAccountUserInfoResponse_DeleteUserOperation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_DeleteUserOperation) Reset() {
	*x = SyncAccountUserInfoResponse_DeleteUserOperation{}
	mi := &file_account_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_DeleteUserOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_DeleteUserOperation) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_DeleteUserOperation) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_DeleteUserOperation.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_DeleteUserOperation) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 8}
}

func (x *SyncAccountUserInfoResponse_DeleteUserOperation) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type SyncAccountUserInfoResponse_SyncOperationResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to SyncOperation:
	//
	//	*SyncAccountUserInfoResponse_SyncOperationResult_CreateAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_BlockAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_UnblockAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_AddUserToAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_RemoveUserFromAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_BlockUserInAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_UnblockUserInAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_DeleteAccount
	//	*SyncAccountUserInfoResponse_SyncOperationResult_DeleteUser
	SyncOperation isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation `protobuf_oneof:"sync_operation"`
	Success       bool                                                            `protobuf:"varint,10,opt,name=success,proto3" json:"success,omitempty"`
	// if success = false, return the failure message
	FailureMessage *string `protobuf:"bytes,11,opt,name=failure_message,json=failureMessage,proto3,oneof" json:"failure_message,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) Reset() {
	*x = SyncAccountUserInfoResponse_SyncOperationResult{}
	mi := &file_account_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncAccountUserInfoResponse_SyncOperationResult) ProtoMessage() {}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) ProtoReflect() protoreflect.Message {
	mi := &file_account_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncAccountUserInfoResponse_SyncOperationResult.ProtoReflect.Descriptor instead.
func (*SyncAccountUserInfoResponse_SyncOperationResult) Descriptor() ([]byte, []int) {
	return file_account_proto_rawDescGZIP(), []int{27, 9}
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetSyncOperation() isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation {
	if x != nil {
		return x.SyncOperation
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetCreateAccount() *SyncAccountUserInfoResponse_CreateAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_CreateAccount); ok {
			return x.CreateAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetBlockAccount() *SyncAccountUserInfoResponse_BlockAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_BlockAccount); ok {
			return x.BlockAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetUnblockAccount() *SyncAccountUserInfoResponse_UnblockAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_UnblockAccount); ok {
			return x.UnblockAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetAddUserToAccount() *SyncAccountUserInfoResponse_AddUserToAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_AddUserToAccount); ok {
			return x.AddUserToAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetRemoveUserFromAccount() *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_RemoveUserFromAccount); ok {
			return x.RemoveUserFromAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetBlockUserInAccount() *SyncAccountUserInfoResponse_BlockUserInAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_BlockUserInAccount); ok {
			return x.BlockUserInAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetUnblockUserInAccount() *SyncAccountUserInfoResponse_UnblockUserInAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_UnblockUserInAccount); ok {
			return x.UnblockUserInAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetDeleteAccount() *SyncAccountUserInfoResponse_DeleteAccountOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_DeleteAccount); ok {
			return x.DeleteAccount
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetDeleteUser() *SyncAccountUserInfoResponse_DeleteUserOperation {
	if x != nil {
		if x, ok := x.SyncOperation.(*SyncAccountUserInfoResponse_SyncOperationResult_DeleteUser); ok {
			return x.DeleteUser
		}
	}
	return nil
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncAccountUserInfoResponse_SyncOperationResult) GetFailureMessage() string {
	if x != nil && x.FailureMessage != nil {
		return *x.FailureMessage
	}
	return ""
}

type isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation interface {
	isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation()
}

type SyncAccountUserInfoResponse_SyncOperationResult_CreateAccount struct {
	CreateAccount *SyncAccountUserInfoResponse_CreateAccountOperation `protobuf:"bytes,1,opt,name=create_account,json=createAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_BlockAccount struct {
	BlockAccount *SyncAccountUserInfoResponse_BlockAccountOperation `protobuf:"bytes,2,opt,name=block_account,json=blockAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_UnblockAccount struct {
	UnblockAccount *SyncAccountUserInfoResponse_UnblockAccountOperation `protobuf:"bytes,3,opt,name=unblock_account,json=unblockAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_AddUserToAccount struct {
	AddUserToAccount *SyncAccountUserInfoResponse_AddUserToAccountOperation `protobuf:"bytes,4,opt,name=add_user_to_account,json=addUserToAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_RemoveUserFromAccount struct {
	RemoveUserFromAccount *SyncAccountUserInfoResponse_RemoveUserFromAccountOperation `protobuf:"bytes,5,opt,name=remove_user_from_account,json=removeUserFromAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_BlockUserInAccount struct {
	BlockUserInAccount *SyncAccountUserInfoResponse_BlockUserInAccountOperation `protobuf:"bytes,6,opt,name=block_user_in_account,json=blockUserInAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_UnblockUserInAccount struct {
	UnblockUserInAccount *SyncAccountUserInfoResponse_UnblockUserInAccountOperation `protobuf:"bytes,7,opt,name=unblock_user_in_account,json=unblockUserInAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_DeleteAccount struct {
	DeleteAccount *SyncAccountUserInfoResponse_DeleteAccountOperation `protobuf:"bytes,8,opt,name=delete_account,json=deleteAccount,proto3,oneof"`
}

type SyncAccountUserInfoResponse_SyncOperationResult_DeleteUser struct {
	DeleteUser *SyncAccountUserInfoResponse_DeleteUserOperation `protobuf:"bytes,9,opt,name=delete_user,json=deleteUser,proto3,oneof"`
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_CreateAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_BlockAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_UnblockAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_AddUserToAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_RemoveUserFromAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_BlockUserInAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_UnblockUserInAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_DeleteAccount) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

func (*SyncAccountUserInfoResponse_SyncOperationResult_DeleteUser) isSyncAccountUserInfoResponse_SyncOperationResult_SyncOperation() {
}

var File_account_proto protoreflect.FileDescriptor

const file_account_proto_rawDesc = "" +
	"\n" +
	"\raccount.proto\x12\x16scow.scheduler_adapter\".\n" +
	"\x13ListAccountsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\"2\n" +
	"\x14ListAccountsResponse\x12\x1a\n" +
	"\baccounts\x18\x01 \x03(\tR\baccounts\"]\n" +
	"\x14CreateAccountRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12\"\n" +
	"\rowner_user_id\x18\x02 \x01(\tR\vownerUserId\"\x17\n" +
	"\x15CreateAccountResponse\"8\n" +
	"\x13BlockAccountRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\"\x16\n" +
	"\x14BlockAccountResponse\":\n" +
	"\x15UnblockAccountRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\"\x18\n" +
	"\x16UnblockAccountResponse\"\xa7\x02\n" +
	"\x12ClusterAccountInfo\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12N\n" +
	"\x05users\x18\x02 \x03(\v28.scow.scheduler_adapter.ClusterAccountInfo.UserInAccountR\x05users\x12\x19\n" +
	"\x05owner\x18\x03 \x01(\tH\x00R\x05owner\x88\x01\x01\x12\x18\n" +
	"\ablocked\x18\x04 \x01(\bR\ablocked\x1a_\n" +
	"\rUserInAccount\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x18\n" +
	"\ablocked\x18\x03 \x01(\bR\ablockedB\b\n" +
	"\x06_owner\" \n" +
	"\x1eGetAllAccountsWithUsersRequest\"i\n" +
	"\x1fGetAllAccountsWithUsersResponse\x12F\n" +
	"\baccounts\x18\x01 \x03(\v2*.scow.scheduler_adapter.ClusterAccountInfoR\baccounts\"C\n" +
	"\x1eQueryAccountBlockStatusRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\"R\n" +
	"\x18AccountStatusInPartition\x12\x1c\n" +
	"\tpartition\x18\x01 \x01(\tR\tpartition\x12\x18\n" +
	"\ablocked\x18\x02 \x01(\bR\ablocked\"\xa5\x01\n" +
	"\x1fQueryAccountBlockStatusResponse\x12\x18\n" +
	"\ablocked\x18\x01 \x01(\bR\ablocked\x12h\n" +
	"\x17account_blocked_details\x18\x02 \x03(\v20.scow.scheduler_adapter.AccountStatusInPartitionR\x15accountBlockedDetails\"9\n" +
	"\x14DeleteAccountRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\"\x17\n" +
	"\x15DeleteAccountResponse\"u\n" +
	"!BlockAccountWithPartitionsRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12-\n" +
	"\x12blocked_partitions\x18\x02 \x03(\tR\x11blockedPartitions\"$\n" +
	"\"BlockAccountWithPartitionsResponse\"{\n" +
	"#UnblockAccountWithPartitionsRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x121\n" +
	"\x14unblocked_partitions\x18\x02 \x03(\tR\x13unblockedPartitions\"&\n" +
	"$UnblockAccountWithPartitionsResponse\"\x80\x01\n" +
	",QueryAccountBlockStatusWithPartitionsRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12-\n" +
	"\x12queried_partitions\x18\x02 \x03(\tR\x11queriedPartitions\"\xb3\x01\n" +
	"-QueryAccountBlockStatusWithPartitionsResponse\x12\x18\n" +
	"\ablocked\x18\x01 \x01(\bR\ablocked\x12h\n" +
	"\x17account_blocked_details\x18\x02 \x03(\v20.scow.scheduler_adapter.AccountStatusInPartitionR\x15accountBlockedDetails\"\xb5\x03\n" +
	"$ClusterAccountInfoWithBlockedDetails\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12`\n" +
	"\x05users\x18\x02 \x03(\v2J.scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails.UserInAccountR\x05users\x12\x19\n" +
	"\x05owner\x18\x03 \x01(\tH\x00R\x05owner\x88\x01\x01\x12\x18\n" +
	"\ablocked\x18\x04 \x01(\bR\ablocked\x12h\n" +
	"\x17account_blocked_details\x18\x05 \x03(\v20.scow.scheduler_adapter.AccountStatusInPartitionR\x15accountBlockedDetails\x1a_\n" +
	"\rUserInAccount\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x1b\n" +
	"\tuser_name\x18\x02 \x01(\tR\buserName\x12\x18\n" +
	"\ablocked\x18\x03 \x01(\bR\ablockedB\b\n" +
	"\x06_owner\"1\n" +
	"/GetAllAccountsWithUsersAndBlockedDetailsRequest\"\x8c\x01\n" +
	"0GetAllAccountsWithUsersAndBlockedDetailsResponse\x12X\n" +
	"\baccounts\x18\x01 \x03(\v2<.scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetailsR\baccounts\"\x9c\x05\n" +
	"\x0fSyncAccountInfo\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12K\n" +
	"\x05users\x18\x02 \x03(\v25.scow.scheduler_adapter.SyncAccountInfo.UserInAccountR\x05users\x12\x1e\n" +
	"\bowner_id\x18\x03 \x01(\tH\x01R\aownerId\x88\x01\x01\x12,\n" +
	"\x12blocked_in_cluster\x18\x04 \x01(\bR\x10blockedInCluster\x12&\n" +
	"\fwhitelist_id\x18\x05 \x01(\rH\x02R\vwhitelistId\x88\x01\x01\x12m\n" +
	"\x13assigned_partitions\x18\x06 \x01(\v2:.scow.scheduler_adapter.SyncAccountInfo.AssignedPartitionsH\x00R\x12assignedPartitions\x12.\n" +
	"\x12use_all_partitions\x18\a \x01(\bH\x00R\x10useAllPartitions\x12\x1d\n" +
	"\adeleted\x18\b \x01(\bH\x03R\adeleted\x88\x01\x01\x1am\n" +
	"\rUserInAccount\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x12\x18\n" +
	"\ablocked\x18\x02 \x01(\bR\ablocked\x12\x1d\n" +
	"\adeleted\x18\x03 \x01(\bH\x00R\adeleted\x88\x01\x01B\n" +
	"\n" +
	"\b_deleted\x1a4\n" +
	"\x12AssignedPartitions\x12\x1e\n" +
	"\n" +
	"partitions\x18\x01 \x03(\tR\n" +
	"partitionsB\x16\n" +
	"\x14unblocked_partitionsB\v\n" +
	"\t_owner_idB\x0f\n" +
	"\r_whitelist_idB\n" +
	"\n" +
	"\b_deleted\"\xda\x01\n" +
	"\x1aSyncAccountUserInfoRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12L\n" +
	"\rsync_accounts\x18\x02 \x03(\v2'.scow.scheduler_adapter.SyncAccountInfoR\fsyncAccounts\x126\n" +
	"\x14timeout_milliseconds\x18\x03 \x01(\rH\x00R\x13timeoutMilliseconds\x88\x01\x01B\x17\n" +
	"\x15_timeout_milliseconds\"\xb7\x10\n" +
	"\x1bSyncAccountUserInfoResponse\x12j\n" +
	"\fsync_results\x18\x01 \x03(\v2G.scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResultR\vsyncResults\x12/\n" +
	"\x13completely_executed\x18\x02 \x01(\bR\x12completelyExecuted\x1a;\n" +
	"\x16CreateAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x1a:\n" +
	"\x15BlockAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x1a<\n" +
	"\x17UnblockAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x1aW\n" +
	"\x19AddUserToAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x1a\\\n" +
	"\x1eRemoveUserFromAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x1aY\n" +
	"\x1bBlockUserInAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x1a[\n" +
	"\x1dUnblockUserInAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x1a;\n" +
	"\x16DeleteAccountOperation\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x1a.\n" +
	"\x13DeleteUserOperation\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\tR\x06userId\x1a\xe7\t\n" +
	"\x13SyncOperationResult\x12s\n" +
	"\x0ecreate_account\x18\x01 \x01(\v2J.scow.scheduler_adapter.SyncAccountUserInfoResponse.CreateAccountOperationH\x00R\rcreateAccount\x12p\n" +
	"\rblock_account\x18\x02 \x01(\v2I.scow.scheduler_adapter.SyncAccountUserInfoResponse.BlockAccountOperationH\x00R\fblockAccount\x12v\n" +
	"\x0funblock_account\x18\x03 \x01(\v2K.scow.scheduler_adapter.SyncAccountUserInfoResponse.UnblockAccountOperationH\x00R\x0eunblockAccount\x12~\n" +
	"\x13add_user_to_account\x18\x04 \x01(\v2M.scow.scheduler_adapter.SyncAccountUserInfoResponse.AddUserToAccountOperationH\x00R\x10addUserToAccount\x12\x8d\x01\n" +
	"\x18remove_user_from_account\x18\x05 \x01(\v2R.scow.scheduler_adapter.SyncAccountUserInfoResponse.RemoveUserFromAccountOperationH\x00R\x15removeUserFromAccount\x12\x84\x01\n" +
	"\x15block_user_in_account\x18\x06 \x01(\v2O.scow.scheduler_adapter.SyncAccountUserInfoResponse.BlockUserInAccountOperationH\x00R\x12blockUserInAccount\x12\x8a\x01\n" +
	"\x17unblock_user_in_account\x18\a \x01(\v2Q.scow.scheduler_adapter.SyncAccountUserInfoResponse.UnblockUserInAccountOperationH\x00R\x14unblockUserInAccount\x12s\n" +
	"\x0edelete_account\x18\b \x01(\v2J.scow.scheduler_adapter.SyncAccountUserInfoResponse.DeleteAccountOperationH\x00R\rdeleteAccount\x12j\n" +
	"\vdelete_user\x18\t \x01(\v2G.scow.scheduler_adapter.SyncAccountUserInfoResponse.DeleteUserOperationH\x00R\n" +
	"deleteUser\x12\x18\n" +
	"\asuccess\x18\n" +
	" \x01(\bR\asuccess\x12,\n" +
	"\x0ffailure_message\x18\v \x01(\tH\x01R\x0efailureMessage\x88\x01\x01B\x10\n" +
	"\x0esync_operationB\x12\n" +
	"\x10_failure_message2\xf6\f\n" +
	"\x0eAccountService\x12i\n" +
	"\fListAccounts\x12+.scow.scheduler_adapter.ListAccountsRequest\x1a,.scow.scheduler_adapter.ListAccountsResponse\x12l\n" +
	"\rCreateAccount\x12,.scow.scheduler_adapter.CreateAccountRequest\x1a-.scow.scheduler_adapter.CreateAccountResponse\x12i\n" +
	"\fBlockAccount\x12+.scow.scheduler_adapter.BlockAccountRequest\x1a,.scow.scheduler_adapter.BlockAccountResponse\x12o\n" +
	"\x0eUnblockAccount\x12-.scow.scheduler_adapter.UnblockAccountRequest\x1a..scow.scheduler_adapter.UnblockAccountResponse\x12\x8a\x01\n" +
	"\x17GetAllAccountsWithUsers\x126.scow.scheduler_adapter.GetAllAccountsWithUsersRequest\x1a7.scow.scheduler_adapter.GetAllAccountsWithUsersResponse\x12\x8a\x01\n" +
	"\x17QueryAccountBlockStatus\x126.scow.scheduler_adapter.QueryAccountBlockStatusRequest\x1a7.scow.scheduler_adapter.QueryAccountBlockStatusResponse\x12l\n" +
	"\rDeleteAccount\x12,.scow.scheduler_adapter.DeleteAccountRequest\x1a-.scow.scheduler_adapter.DeleteAccountResponse\x12\x93\x01\n" +
	"\x1aBlockAccountWithPartitions\x129.scow.scheduler_adapter.BlockAccountWithPartitionsRequest\x1a:.scow.scheduler_adapter.BlockAccountWithPartitionsResponse\x12\x99\x01\n" +
	"\x1cUnblockAccountWithPartitions\x12;.scow.scheduler_adapter.UnblockAccountWithPartitionsRequest\x1a<.scow.scheduler_adapter.UnblockAccountWithPartitionsResponse\x12\xb4\x01\n" +
	"%QueryAccountBlockStatusWithPartitions\x12D.scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsRequest\x1aE.scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsResponse\x12\xbd\x01\n" +
	"(GetAllAccountsWithUsersAndBlockedDetails\x12G.scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsRequest\x1aH.scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsResponse\x12~\n" +
	"\x13SyncAccountUserInfo\x122.scow.scheduler_adapter.SyncAccountUserInfoRequest\x1a3.scow.scheduler_adapter.SyncAccountUserInfoResponseB\xb7\x01\n" +
	"\x1acom.scow.scheduler_adapterB\fAccountProtoP\x01Z\x16scow-crane-adapter/gen\xa2\x02\x03SSX\xaa\x02\x15Scow.SchedulerAdapter\xca\x02\x15Scow\\SchedulerAdapter\xe2\x02!Scow\\SchedulerAdapter\\GPBMetadata\xea\x02\x16Scow::SchedulerAdapterb\x06proto3"

var (
	file_account_proto_rawDescOnce sync.Once
	file_account_proto_rawDescData []byte
)

func file_account_proto_rawDescGZIP() []byte {
	file_account_proto_rawDescOnce.Do(func() {
		file_account_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_account_proto_rawDesc), len(file_account_proto_rawDesc)))
	})
	return file_account_proto_rawDescData
}

var file_account_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_account_proto_goTypes = []any{
	(*ListAccountsRequest)(nil),                                        // 0: scow.scheduler_adapter.ListAccountsRequest
	(*ListAccountsResponse)(nil),                                       // 1: scow.scheduler_adapter.ListAccountsResponse
	(*CreateAccountRequest)(nil),                                       // 2: scow.scheduler_adapter.CreateAccountRequest
	(*CreateAccountResponse)(nil),                                      // 3: scow.scheduler_adapter.CreateAccountResponse
	(*BlockAccountRequest)(nil),                                        // 4: scow.scheduler_adapter.BlockAccountRequest
	(*BlockAccountResponse)(nil),                                       // 5: scow.scheduler_adapter.BlockAccountResponse
	(*UnblockAccountRequest)(nil),                                      // 6: scow.scheduler_adapter.UnblockAccountRequest
	(*UnblockAccountResponse)(nil),                                     // 7: scow.scheduler_adapter.UnblockAccountResponse
	(*ClusterAccountInfo)(nil),                                         // 8: scow.scheduler_adapter.ClusterAccountInfo
	(*GetAllAccountsWithUsersRequest)(nil),                             // 9: scow.scheduler_adapter.GetAllAccountsWithUsersRequest
	(*GetAllAccountsWithUsersResponse)(nil),                            // 10: scow.scheduler_adapter.GetAllAccountsWithUsersResponse
	(*QueryAccountBlockStatusRequest)(nil),                             // 11: scow.scheduler_adapter.QueryAccountBlockStatusRequest
	(*AccountStatusInPartition)(nil),                                   // 12: scow.scheduler_adapter.AccountStatusInPartition
	(*QueryAccountBlockStatusResponse)(nil),                            // 13: scow.scheduler_adapter.QueryAccountBlockStatusResponse
	(*DeleteAccountRequest)(nil),                                       // 14: scow.scheduler_adapter.DeleteAccountRequest
	(*DeleteAccountResponse)(nil),                                      // 15: scow.scheduler_adapter.DeleteAccountResponse
	(*BlockAccountWithPartitionsRequest)(nil),                          // 16: scow.scheduler_adapter.BlockAccountWithPartitionsRequest
	(*BlockAccountWithPartitionsResponse)(nil),                         // 17: scow.scheduler_adapter.BlockAccountWithPartitionsResponse
	(*UnblockAccountWithPartitionsRequest)(nil),                        // 18: scow.scheduler_adapter.UnblockAccountWithPartitionsRequest
	(*UnblockAccountWithPartitionsResponse)(nil),                       // 19: scow.scheduler_adapter.UnblockAccountWithPartitionsResponse
	(*QueryAccountBlockStatusWithPartitionsRequest)(nil),               // 20: scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsRequest
	(*QueryAccountBlockStatusWithPartitionsResponse)(nil),              // 21: scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsResponse
	(*ClusterAccountInfoWithBlockedDetails)(nil),                       // 22: scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails
	(*GetAllAccountsWithUsersAndBlockedDetailsRequest)(nil),            // 23: scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsRequest
	(*GetAllAccountsWithUsersAndBlockedDetailsResponse)(nil),           // 24: scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsResponse
	(*SyncAccountInfo)(nil),                                            // 25: scow.scheduler_adapter.SyncAccountInfo
	(*SyncAccountUserInfoRequest)(nil),                                 // 26: scow.scheduler_adapter.SyncAccountUserInfoRequest
	(*SyncAccountUserInfoResponse)(nil),                                // 27: scow.scheduler_adapter.SyncAccountUserInfoResponse
	(*ClusterAccountInfo_UserInAccount)(nil),                           // 28: scow.scheduler_adapter.ClusterAccountInfo.UserInAccount
	(*ClusterAccountInfoWithBlockedDetails_UserInAccount)(nil),         // 29: scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails.UserInAccount
	(*SyncAccountInfo_UserInAccount)(nil),                              // 30: scow.scheduler_adapter.SyncAccountInfo.UserInAccount
	(*SyncAccountInfo_AssignedPartitions)(nil),                         // 31: scow.scheduler_adapter.SyncAccountInfo.AssignedPartitions
	(*SyncAccountUserInfoResponse_CreateAccountOperation)(nil),         // 32: scow.scheduler_adapter.SyncAccountUserInfoResponse.CreateAccountOperation
	(*SyncAccountUserInfoResponse_BlockAccountOperation)(nil),          // 33: scow.scheduler_adapter.SyncAccountUserInfoResponse.BlockAccountOperation
	(*SyncAccountUserInfoResponse_UnblockAccountOperation)(nil),        // 34: scow.scheduler_adapter.SyncAccountUserInfoResponse.UnblockAccountOperation
	(*SyncAccountUserInfoResponse_AddUserToAccountOperation)(nil),      // 35: scow.scheduler_adapter.SyncAccountUserInfoResponse.AddUserToAccountOperation
	(*SyncAccountUserInfoResponse_RemoveUserFromAccountOperation)(nil), // 36: scow.scheduler_adapter.SyncAccountUserInfoResponse.RemoveUserFromAccountOperation
	(*SyncAccountUserInfoResponse_BlockUserInAccountOperation)(nil),    // 37: scow.scheduler_adapter.SyncAccountUserInfoResponse.BlockUserInAccountOperation
	(*SyncAccountUserInfoResponse_UnblockUserInAccountOperation)(nil),  // 38: scow.scheduler_adapter.SyncAccountUserInfoResponse.UnblockUserInAccountOperation
	(*SyncAccountUserInfoResponse_DeleteAccountOperation)(nil),         // 39: scow.scheduler_adapter.SyncAccountUserInfoResponse.DeleteAccountOperation
	(*SyncAccountUserInfoResponse_DeleteUserOperation)(nil),            // 40: scow.scheduler_adapter.SyncAccountUserInfoResponse.DeleteUserOperation
	(*SyncAccountUserInfoResponse_SyncOperationResult)(nil),            // 41: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult
}
var file_account_proto_depIdxs = []int32{
	28, // 0: scow.scheduler_adapter.ClusterAccountInfo.users:type_name -> scow.scheduler_adapter.ClusterAccountInfo.UserInAccount
	8,  // 1: scow.scheduler_adapter.GetAllAccountsWithUsersResponse.accounts:type_name -> scow.scheduler_adapter.ClusterAccountInfo
	12, // 2: scow.scheduler_adapter.QueryAccountBlockStatusResponse.account_blocked_details:type_name -> scow.scheduler_adapter.AccountStatusInPartition
	12, // 3: scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsResponse.account_blocked_details:type_name -> scow.scheduler_adapter.AccountStatusInPartition
	29, // 4: scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails.users:type_name -> scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails.UserInAccount
	12, // 5: scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails.account_blocked_details:type_name -> scow.scheduler_adapter.AccountStatusInPartition
	22, // 6: scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsResponse.accounts:type_name -> scow.scheduler_adapter.ClusterAccountInfoWithBlockedDetails
	30, // 7: scow.scheduler_adapter.SyncAccountInfo.users:type_name -> scow.scheduler_adapter.SyncAccountInfo.UserInAccount
	31, // 8: scow.scheduler_adapter.SyncAccountInfo.assigned_partitions:type_name -> scow.scheduler_adapter.SyncAccountInfo.AssignedPartitions
	25, // 9: scow.scheduler_adapter.SyncAccountUserInfoRequest.sync_accounts:type_name -> scow.scheduler_adapter.SyncAccountInfo
	41, // 10: scow.scheduler_adapter.SyncAccountUserInfoResponse.sync_results:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult
	32, // 11: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.create_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.CreateAccountOperation
	33, // 12: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.block_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.BlockAccountOperation
	34, // 13: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.unblock_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.UnblockAccountOperation
	35, // 14: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.add_user_to_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.AddUserToAccountOperation
	36, // 15: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.remove_user_from_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.RemoveUserFromAccountOperation
	37, // 16: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.block_user_in_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.BlockUserInAccountOperation
	38, // 17: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.unblock_user_in_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.UnblockUserInAccountOperation
	39, // 18: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.delete_account:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.DeleteAccountOperation
	40, // 19: scow.scheduler_adapter.SyncAccountUserInfoResponse.SyncOperationResult.delete_user:type_name -> scow.scheduler_adapter.SyncAccountUserInfoResponse.DeleteUserOperation
	0,  // 20: scow.scheduler_adapter.AccountService.ListAccounts:input_type -> scow.scheduler_adapter.ListAccountsRequest
	2,  // 21: scow.scheduler_adapter.AccountService.CreateAccount:input_type -> scow.scheduler_adapter.CreateAccountRequest
	4,  // 22: scow.scheduler_adapter.AccountService.BlockAccount:input_type -> scow.scheduler_adapter.BlockAccountRequest
	6,  // 23: scow.scheduler_adapter.AccountService.UnblockAccount:input_type -> scow.scheduler_adapter.UnblockAccountRequest
	9,  // 24: scow.scheduler_adapter.AccountService.GetAllAccountsWithUsers:input_type -> scow.scheduler_adapter.GetAllAccountsWithUsersRequest
	11, // 25: scow.scheduler_adapter.AccountService.QueryAccountBlockStatus:input_type -> scow.scheduler_adapter.QueryAccountBlockStatusRequest
	14, // 26: scow.scheduler_adapter.AccountService.DeleteAccount:input_type -> scow.scheduler_adapter.DeleteAccountRequest
	16, // 27: scow.scheduler_adapter.AccountService.BlockAccountWithPartitions:input_type -> scow.scheduler_adapter.BlockAccountWithPartitionsRequest
	18, // 28: scow.scheduler_adapter.AccountService.UnblockAccountWithPartitions:input_type -> scow.scheduler_adapter.UnblockAccountWithPartitionsRequest
	20, // 29: scow.scheduler_adapter.AccountService.QueryAccountBlockStatusWithPartitions:input_type -> scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsRequest
	23, // 30: scow.scheduler_adapter.AccountService.GetAllAccountsWithUsersAndBlockedDetails:input_type -> scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsRequest
	26, // 31: scow.scheduler_adapter.AccountService.SyncAccountUserInfo:input_type -> scow.scheduler_adapter.SyncAccountUserInfoRequest
	1,  // 32: scow.scheduler_adapter.AccountService.ListAccounts:output_type -> scow.scheduler_adapter.ListAccountsResponse
	3,  // 33: scow.scheduler_adapter.AccountService.CreateAccount:output_type -> scow.scheduler_adapter.CreateAccountResponse
	5,  // 34: scow.scheduler_adapter.AccountService.BlockAccount:output_type -> scow.scheduler_adapter.BlockAccountResponse
	7,  // 35: scow.scheduler_adapter.AccountService.UnblockAccount:output_type -> scow.scheduler_adapter.UnblockAccountResponse
	10, // 36: scow.scheduler_adapter.AccountService.GetAllAccountsWithUsers:output_type -> scow.scheduler_adapter.GetAllAccountsWithUsersResponse
	13, // 37: scow.scheduler_adapter.AccountService.QueryAccountBlockStatus:output_type -> scow.scheduler_adapter.QueryAccountBlockStatusResponse
	15, // 38: scow.scheduler_adapter.AccountService.DeleteAccount:output_type -> scow.scheduler_adapter.DeleteAccountResponse
	17, // 39: scow.scheduler_adapter.AccountService.BlockAccountWithPartitions:output_type -> scow.scheduler_adapter.BlockAccountWithPartitionsResponse
	19, // 40: scow.scheduler_adapter.AccountService.UnblockAccountWithPartitions:output_type -> scow.scheduler_adapter.UnblockAccountWithPartitionsResponse
	21, // 41: scow.scheduler_adapter.AccountService.QueryAccountBlockStatusWithPartitions:output_type -> scow.scheduler_adapter.QueryAccountBlockStatusWithPartitionsResponse
	24, // 42: scow.scheduler_adapter.AccountService.GetAllAccountsWithUsersAndBlockedDetails:output_type -> scow.scheduler_adapter.GetAllAccountsWithUsersAndBlockedDetailsResponse
	27, // 43: scow.scheduler_adapter.AccountService.SyncAccountUserInfo:output_type -> scow.scheduler_adapter.SyncAccountUserInfoResponse
	32, // [32:44] is the sub-list for method output_type
	20, // [20:32] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_account_proto_init() }
func file_account_proto_init() {
	if File_account_proto != nil {
		return
	}
	file_account_proto_msgTypes[8].OneofWrappers = []any{}
	file_account_proto_msgTypes[22].OneofWrappers = []any{}
	file_account_proto_msgTypes[25].OneofWrappers = []any{
		(*SyncAccountInfo_AssignedPartitions_)(nil),
		(*SyncAccountInfo_UseAllPartitions)(nil),
	}
	file_account_proto_msgTypes[26].OneofWrappers = []any{}
	file_account_proto_msgTypes[30].OneofWrappers = []any{}
	file_account_proto_msgTypes[41].OneofWrappers = []any{
		(*SyncAccountUserInfoResponse_SyncOperationResult_CreateAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_BlockAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_UnblockAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_AddUserToAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_RemoveUserFromAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_BlockUserInAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_UnblockUserInAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_DeleteAccount)(nil),
		(*SyncAccountUserInfoResponse_SyncOperationResult_DeleteUser)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_account_proto_rawDesc), len(file_account_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_account_proto_goTypes,
		DependencyIndexes: file_account_proto_depIdxs,
		MessageInfos:      file_account_proto_msgTypes,
	}.Build()
	File_account_proto = out.File
	file_account_proto_goTypes = nil
	file_account_proto_depIdxs = nil
}
