//*
// Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
// SCOW is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: config.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OptionalFeatures int32

const (
	OptionalFeatures_UNKNOWN             OptionalFeatures = 0
	OptionalFeatures_RESOURCE_MANAGEMENT OptionalFeatures = 1
)

// Enum value maps for OptionalFeatures.
var (
	OptionalFeatures_name = map[int32]string{
		0: "UNKNOWN",
		1: "RESOURCE_MANAGEMENT",
	}
	OptionalFeatures_value = map[string]int32{
		"UNKNOWN":             0,
		"RESOURCE_MANAGEMENT": 1,
	}
)

func (x OptionalFeatures) Enum() *OptionalFeatures {
	p := new(OptionalFeatures)
	*p = x
	return p
}

func (x OptionalFeatures) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionalFeatures) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (OptionalFeatures) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x OptionalFeatures) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionalFeatures.Descriptor instead.
func (OptionalFeatures) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

type PartitionInfo_PartitionStatus int32

const (
	PartitionInfo_NOT_AVAILABLE PartitionInfo_PartitionStatus = 0
	PartitionInfo_AVAILABLE     PartitionInfo_PartitionStatus = 1
)

// Enum value maps for PartitionInfo_PartitionStatus.
var (
	PartitionInfo_PartitionStatus_name = map[int32]string{
		0: "NOT_AVAILABLE",
		1: "AVAILABLE",
	}
	PartitionInfo_PartitionStatus_value = map[string]int32{
		"NOT_AVAILABLE": 0,
		"AVAILABLE":     1,
	}
)

func (x PartitionInfo_PartitionStatus) Enum() *PartitionInfo_PartitionStatus {
	p := new(PartitionInfo_PartitionStatus)
	*p = x
	return p
}

func (x PartitionInfo_PartitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionInfo_PartitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (PartitionInfo_PartitionStatus) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x PartitionInfo_PartitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionInfo_PartitionStatus.Descriptor instead.
func (PartitionInfo_PartitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5, 0}
}

type SummaryPartitionInfo_PartitionStatus int32

const (
	SummaryPartitionInfo_NOT_AVAILABLE SummaryPartitionInfo_PartitionStatus = 0
	SummaryPartitionInfo_AVAILABLE     SummaryPartitionInfo_PartitionStatus = 1
)

// Enum value maps for SummaryPartitionInfo_PartitionStatus.
var (
	SummaryPartitionInfo_PartitionStatus_name = map[int32]string{
		0: "NOT_AVAILABLE",
		1: "AVAILABLE",
	}
	SummaryPartitionInfo_PartitionStatus_value = map[string]int32{
		"NOT_AVAILABLE": 0,
		"AVAILABLE":     1,
	}
)

func (x SummaryPartitionInfo_PartitionStatus) Enum() *SummaryPartitionInfo_PartitionStatus {
	p := new(SummaryPartitionInfo_PartitionStatus)
	*p = x
	return p
}

func (x SummaryPartitionInfo_PartitionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummaryPartitionInfo_PartitionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (SummaryPartitionInfo_PartitionStatus) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x SummaryPartitionInfo_PartitionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummaryPartitionInfo_PartitionStatus.Descriptor instead.
func (SummaryPartitionInfo_PartitionStatus) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8, 0}
}

type NodeInfo_NodeState int32

const (
	NodeInfo_UNKNOWN       NodeInfo_NodeState = 0
	NodeInfo_IDLE          NodeInfo_NodeState = 1
	NodeInfo_RUNNING       NodeInfo_NodeState = 2
	NodeInfo_NOT_AVAILABLE NodeInfo_NodeState = 3
)

// Enum value maps for NodeInfo_NodeState.
var (
	NodeInfo_NodeState_name = map[int32]string{
		0: "UNKNOWN",
		1: "IDLE",
		2: "RUNNING",
		3: "NOT_AVAILABLE",
	}
	NodeInfo_NodeState_value = map[string]int32{
		"UNKNOWN":       0,
		"IDLE":          1,
		"RUNNING":       2,
		"NOT_AVAILABLE": 3,
	}
)

func (x NodeInfo_NodeState) Enum() *NodeInfo_NodeState {
	p := new(NodeInfo_NodeState)
	*p = x
	return p
}

func (x NodeInfo_NodeState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeInfo_NodeState) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[3].Descriptor()
}

func (NodeInfo_NodeState) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[3]
}

func (x NodeInfo_NodeState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeInfo_NodeState.Descriptor instead.
func (NodeInfo_NodeState) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{11, 0}
}

type GetClusterConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterConfigRequest) Reset() {
	*x = GetClusterConfigRequest{}
	mi := &file_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigRequest) ProtoMessage() {}

func (x *GetClusterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigRequest.ProtoReflect.Descriptor instead.
func (*GetClusterConfigRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

// static configuration of partition
type Partition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// mem: memory size in M
	MemMb uint64 `protobuf:"varint,2,opt,name=mem_mb,json=memMb,proto3" json:"mem_mb,omitempty"`
	// cores: number of cores
	Cores uint32 `protobuf:"varint,3,opt,name=cores,proto3" json:"cores,omitempty"`
	// gpus: number of gpu
	Gpus uint32 `protobuf:"varint,4,opt,name=gpus,proto3" json:"gpus,omitempty"`
	// nodes: number of nodes
	Nodes uint32 `protobuf:"varint,5,opt,name=nodes,proto3" json:"nodes,omitempty"`
	// list that stores qos. the list can be empty.
	Qos []string `protobuf:"bytes,6,rep,name=qos,proto3" json:"qos,omitempty"`
	// price item description
	Comment       *string `protobuf:"bytes,7,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Partition) Reset() {
	*x = Partition{}
	mi := &file_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *Partition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Partition) GetMemMb() uint64 {
	if x != nil {
		return x.MemMb
	}
	return 0
}

func (x *Partition) GetCores() uint32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *Partition) GetGpus() uint32 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

func (x *Partition) GetNodes() uint32 {
	if x != nil {
		return x.Nodes
	}
	return 0
}

func (x *Partition) GetQos() []string {
	if x != nil {
		return x.Qos
	}
	return nil
}

func (x *Partition) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

type GetClusterConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partitions    []*Partition           `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
	SchedulerName string                 `protobuf:"bytes,2,opt,name=scheduler_name,json=schedulerName,proto3" json:"scheduler_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterConfigResponse) Reset() {
	*x = GetClusterConfigResponse{}
	mi := &file_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterConfigResponse) ProtoMessage() {}

func (x *GetClusterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterConfigResponse.ProtoReflect.Descriptor instead.
func (*GetClusterConfigResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *GetClusterConfigResponse) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *GetClusterConfigResponse) GetSchedulerName() string {
	if x != nil {
		return x.SchedulerName
	}
	return ""
}

type GetAvailablePartitionsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountName   string                 `protobuf:"bytes,1,opt,name=account_name,json=accountName,proto3" json:"account_name,omitempty"`
	UserId        string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAvailablePartitionsRequest) Reset() {
	*x = GetAvailablePartitionsRequest{}
	mi := &file_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailablePartitionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailablePartitionsRequest) ProtoMessage() {}

func (x *GetAvailablePartitionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailablePartitionsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailablePartitionsRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *GetAvailablePartitionsRequest) GetAccountName() string {
	if x != nil {
		return x.AccountName
	}
	return ""
}

func (x *GetAvailablePartitionsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetAvailablePartitionsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partitions    []*Partition           `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAvailablePartitionsResponse) Reset() {
	*x = GetAvailablePartitionsResponse{}
	mi := &file_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailablePartitionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailablePartitionsResponse) ProtoMessage() {}

func (x *GetAvailablePartitionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailablePartitionsResponse.ProtoReflect.Descriptor instead.
func (*GetAvailablePartitionsResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *GetAvailablePartitionsResponse) GetPartitions() []*Partition {
	if x != nil {
		return x.Partitions
	}
	return nil
}

// the runtime state of the partition
type PartitionInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PartitionName         string                 `protobuf:"bytes,1,opt,name=partition_name,json=partitionName,proto3" json:"partition_name,omitempty"`
	NodeCount             uint32                 `protobuf:"varint,2,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	RunningNodeCount      uint32                 `protobuf:"varint,3,opt,name=running_node_count,json=runningNodeCount,proto3" json:"running_node_count,omitempty"`
	IdleNodeCount         uint32                 `protobuf:"varint,4,opt,name=idle_node_count,json=idleNodeCount,proto3" json:"idle_node_count,omitempty"`
	NotAvailableNodeCount uint32                 `protobuf:"varint,5,opt,name=not_available_node_count,json=notAvailableNodeCount,proto3" json:"not_available_node_count,omitempty"`
	CpuCoreCount          uint32                 `protobuf:"varint,6,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	RunningCpuCount       uint32                 `protobuf:"varint,7,opt,name=running_cpu_count,json=runningCpuCount,proto3" json:"running_cpu_count,omitempty"`
	IdleCpuCount          uint32                 `protobuf:"varint,8,opt,name=idle_cpu_count,json=idleCpuCount,proto3" json:"idle_cpu_count,omitempty"`
	NotAvailableCpuCount  uint32                 `protobuf:"varint,9,opt,name=not_available_cpu_count,json=notAvailableCpuCount,proto3" json:"not_available_cpu_count,omitempty"`
	GpuCoreCount          uint32                 `protobuf:"varint,10,opt,name=gpu_core_count,json=gpuCoreCount,proto3" json:"gpu_core_count,omitempty"`
	RunningGpuCount       uint32                 `protobuf:"varint,11,opt,name=running_gpu_count,json=runningGpuCount,proto3" json:"running_gpu_count,omitempty"`
	IdleGpuCount          uint32                 `protobuf:"varint,12,opt,name=idle_gpu_count,json=idleGpuCount,proto3" json:"idle_gpu_count,omitempty"`
	NotAvailableGpuCount  uint32                 `protobuf:"varint,13,opt,name=not_available_gpu_count,json=notAvailableGpuCount,proto3" json:"not_available_gpu_count,omitempty"`
	JobCount              uint32                 `protobuf:"varint,14,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty"`
	RunningJobCount       uint32                 `protobuf:"varint,15,opt,name=running_job_count,json=runningJobCount,proto3" json:"running_job_count,omitempty"`
	PendingJobCount       uint32                 `protobuf:"varint,16,opt,name=pending_job_count,json=pendingJobCount,proto3" json:"pending_job_count,omitempty"`
	// node utilization rate
	UsageRatePercentage uint32                        `protobuf:"varint,17,opt,name=usage_rate_percentage,json=usageRatePercentage,proto3" json:"usage_rate_percentage,omitempty"`
	PartitionStatus     PartitionInfo_PartitionStatus `protobuf:"varint,18,opt,name=partition_status,json=partitionStatus,proto3,enum=scow.scheduler_adapter.PartitionInfo_PartitionStatus" json:"partition_status,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PartitionInfo) Reset() {
	*x = PartitionInfo{}
	mi := &file_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfo) ProtoMessage() {}

func (x *PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfo.ProtoReflect.Descriptor instead.
func (*PartitionInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *PartitionInfo) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

func (x *PartitionInfo) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *PartitionInfo) GetRunningNodeCount() uint32 {
	if x != nil {
		return x.RunningNodeCount
	}
	return 0
}

func (x *PartitionInfo) GetIdleNodeCount() uint32 {
	if x != nil {
		return x.IdleNodeCount
	}
	return 0
}

func (x *PartitionInfo) GetNotAvailableNodeCount() uint32 {
	if x != nil {
		return x.NotAvailableNodeCount
	}
	return 0
}

func (x *PartitionInfo) GetCpuCoreCount() uint32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *PartitionInfo) GetRunningCpuCount() uint32 {
	if x != nil {
		return x.RunningCpuCount
	}
	return 0
}

func (x *PartitionInfo) GetIdleCpuCount() uint32 {
	if x != nil {
		return x.IdleCpuCount
	}
	return 0
}

func (x *PartitionInfo) GetNotAvailableCpuCount() uint32 {
	if x != nil {
		return x.NotAvailableCpuCount
	}
	return 0
}

func (x *PartitionInfo) GetGpuCoreCount() uint32 {
	if x != nil {
		return x.GpuCoreCount
	}
	return 0
}

func (x *PartitionInfo) GetRunningGpuCount() uint32 {
	if x != nil {
		return x.RunningGpuCount
	}
	return 0
}

func (x *PartitionInfo) GetIdleGpuCount() uint32 {
	if x != nil {
		return x.IdleGpuCount
	}
	return 0
}

func (x *PartitionInfo) GetNotAvailableGpuCount() uint32 {
	if x != nil {
		return x.NotAvailableGpuCount
	}
	return 0
}

func (x *PartitionInfo) GetJobCount() uint32 {
	if x != nil {
		return x.JobCount
	}
	return 0
}

func (x *PartitionInfo) GetRunningJobCount() uint32 {
	if x != nil {
		return x.RunningJobCount
	}
	return 0
}

func (x *PartitionInfo) GetPendingJobCount() uint32 {
	if x != nil {
		return x.PendingJobCount
	}
	return 0
}

func (x *PartitionInfo) GetUsageRatePercentage() uint32 {
	if x != nil {
		return x.UsageRatePercentage
	}
	return 0
}

func (x *PartitionInfo) GetPartitionStatus() PartitionInfo_PartitionStatus {
	if x != nil {
		return x.PartitionStatus
	}
	return PartitionInfo_NOT_AVAILABLE
}

type GetClusterInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterInfoRequest) Reset() {
	*x = GetClusterInfoRequest{}
	mi := &file_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoRequest) ProtoMessage() {}

func (x *GetClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

type GetClusterInfoResponse struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	ClusterName string                 `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Partitions  []*PartitionInfo       `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// 3-17 Newly added parameters
	// only returns in version later than 1.7.0
	NodeCount             uint32 `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	RunningNodeCount      uint32 `protobuf:"varint,4,opt,name=running_node_count,json=runningNodeCount,proto3" json:"running_node_count,omitempty"`
	IdleNodeCount         uint32 `protobuf:"varint,5,opt,name=idle_node_count,json=idleNodeCount,proto3" json:"idle_node_count,omitempty"`
	NotAvailableNodeCount uint32 `protobuf:"varint,6,opt,name=not_available_node_count,json=notAvailableNodeCount,proto3" json:"not_available_node_count,omitempty"`
	CpuCoreCount          uint32 `protobuf:"varint,7,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	RunningCpuCount       uint32 `protobuf:"varint,8,opt,name=running_cpu_count,json=runningCpuCount,proto3" json:"running_cpu_count,omitempty"`
	IdleCpuCount          uint32 `protobuf:"varint,9,opt,name=idle_cpu_count,json=idleCpuCount,proto3" json:"idle_cpu_count,omitempty"`
	NotAvailableCpuCount  uint32 `protobuf:"varint,10,opt,name=not_available_cpu_count,json=notAvailableCpuCount,proto3" json:"not_available_cpu_count,omitempty"`
	GpuCoreCount          uint32 `protobuf:"varint,11,opt,name=gpu_core_count,json=gpuCoreCount,proto3" json:"gpu_core_count,omitempty"`
	RunningGpuCount       uint32 `protobuf:"varint,12,opt,name=running_gpu_count,json=runningGpuCount,proto3" json:"running_gpu_count,omitempty"`
	IdleGpuCount          uint32 `protobuf:"varint,13,opt,name=idle_gpu_count,json=idleGpuCount,proto3" json:"idle_gpu_count,omitempty"`
	NotAvailableGpuCount  uint32 `protobuf:"varint,14,opt,name=not_available_gpu_count,json=notAvailableGpuCount,proto3" json:"not_available_gpu_count,omitempty"`
	JobCount              uint32 `protobuf:"varint,15,opt,name=job_count,json=jobCount,proto3" json:"job_count,omitempty"`
	RunningJobCount       uint32 `protobuf:"varint,16,opt,name=running_job_count,json=runningJobCount,proto3" json:"running_job_count,omitempty"`
	PendingJobCount       uint32 `protobuf:"varint,17,opt,name=pending_job_count,json=pendingJobCount,proto3" json:"pending_job_count,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetClusterInfoResponse) Reset() {
	*x = GetClusterInfoResponse{}
	mi := &file_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterInfoResponse) ProtoMessage() {}

func (x *GetClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *GetClusterInfoResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetClusterInfoResponse) GetPartitions() []*PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *GetClusterInfoResponse) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetRunningNodeCount() uint32 {
	if x != nil {
		return x.RunningNodeCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetIdleNodeCount() uint32 {
	if x != nil {
		return x.IdleNodeCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetNotAvailableNodeCount() uint32 {
	if x != nil {
		return x.NotAvailableNodeCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetCpuCoreCount() uint32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetRunningCpuCount() uint32 {
	if x != nil {
		return x.RunningCpuCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetIdleCpuCount() uint32 {
	if x != nil {
		return x.IdleCpuCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetNotAvailableCpuCount() uint32 {
	if x != nil {
		return x.NotAvailableCpuCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetGpuCoreCount() uint32 {
	if x != nil {
		return x.GpuCoreCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetRunningGpuCount() uint32 {
	if x != nil {
		return x.RunningGpuCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetIdleGpuCount() uint32 {
	if x != nil {
		return x.IdleGpuCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetNotAvailableGpuCount() uint32 {
	if x != nil {
		return x.NotAvailableGpuCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetJobCount() uint32 {
	if x != nil {
		return x.JobCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetRunningJobCount() uint32 {
	if x != nil {
		return x.RunningJobCount
	}
	return 0
}

func (x *GetClusterInfoResponse) GetPendingJobCount() uint32 {
	if x != nil {
		return x.PendingJobCount
	}
	return 0
}

type SummaryPartitionInfo struct {
	state           protoimpl.MessageState               `protogen:"open.v1"`
	PartitionName   string                               `protobuf:"bytes,1,opt,name=partition_name,json=partitionName,proto3" json:"partition_name,omitempty"`
	NodeCount       uint32                               `protobuf:"varint,2,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	NodeUsage       float32                              `protobuf:"fixed32,3,opt,name=node_usage,json=nodeUsage,proto3" json:"node_usage,omitempty"`
	CpuCoreCount    uint32                               `protobuf:"varint,4,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	CpuUsage        float32                              `protobuf:"fixed32,5,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	GpuCoreCount    uint32                               `protobuf:"varint,6,opt,name=gpu_core_count,json=gpuCoreCount,proto3" json:"gpu_core_count,omitempty"`
	GpuUsage        float32                              `protobuf:"fixed32,7,opt,name=gpu_usage,json=gpuUsage,proto3" json:"gpu_usage,omitempty"`
	PendingJobCount uint32                               `protobuf:"varint,8,opt,name=pending_job_count,json=pendingJobCount,proto3" json:"pending_job_count,omitempty"`
	PartitionStatus SummaryPartitionInfo_PartitionStatus `protobuf:"varint,9,opt,name=partition_status,json=partitionStatus,proto3,enum=scow.scheduler_adapter.SummaryPartitionInfo_PartitionStatus" json:"partition_status,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SummaryPartitionInfo) Reset() {
	*x = SummaryPartitionInfo{}
	mi := &file_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SummaryPartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryPartitionInfo) ProtoMessage() {}

func (x *SummaryPartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryPartitionInfo.ProtoReflect.Descriptor instead.
func (*SummaryPartitionInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *SummaryPartitionInfo) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

func (x *SummaryPartitionInfo) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *SummaryPartitionInfo) GetNodeUsage() float32 {
	if x != nil {
		return x.NodeUsage
	}
	return 0
}

func (x *SummaryPartitionInfo) GetCpuCoreCount() uint32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *SummaryPartitionInfo) GetCpuUsage() float32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *SummaryPartitionInfo) GetGpuCoreCount() uint32 {
	if x != nil {
		return x.GpuCoreCount
	}
	return 0
}

func (x *SummaryPartitionInfo) GetGpuUsage() float32 {
	if x != nil {
		return x.GpuUsage
	}
	return 0
}

func (x *SummaryPartitionInfo) GetPendingJobCount() uint32 {
	if x != nil {
		return x.PendingJobCount
	}
	return 0
}

func (x *SummaryPartitionInfo) GetPartitionStatus() SummaryPartitionInfo_PartitionStatus {
	if x != nil {
		return x.PartitionStatus
	}
	return SummaryPartitionInfo_NOT_AVAILABLE
}

type GetSummaryClusterInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccountNames  []string               `protobuf:"bytes,1,rep,name=account_names,json=accountNames,proto3" json:"account_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSummaryClusterInfoRequest) Reset() {
	*x = GetSummaryClusterInfoRequest{}
	mi := &file_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSummaryClusterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryClusterInfoRequest) ProtoMessage() {}

func (x *GetSummaryClusterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryClusterInfoRequest.ProtoReflect.Descriptor instead.
func (*GetSummaryClusterInfoRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{9}
}

func (x *GetSummaryClusterInfoRequest) GetAccountNames() []string {
	if x != nil {
		return x.AccountNames
	}
	return nil
}

type GetSummaryClusterInfoResponse struct {
	state       protoimpl.MessageState  `protogen:"open.v1"`
	ClusterName string                  `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	Partitions  []*SummaryPartitionInfo `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// 3-17 Newly added parameters
	// only returns in version later than 1.7.0
	NodeCount             uint32  `protobuf:"varint,3,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	RunningNodeCount      uint32  `protobuf:"varint,4,opt,name=running_node_count,json=runningNodeCount,proto3" json:"running_node_count,omitempty"`
	IdleNodeCount         uint32  `protobuf:"varint,5,opt,name=idle_node_count,json=idleNodeCount,proto3" json:"idle_node_count,omitempty"`
	NotAvailableNodeCount uint32  `protobuf:"varint,6,opt,name=not_available_node_count,json=notAvailableNodeCount,proto3" json:"not_available_node_count,omitempty"`
	CpuCoreCount          uint32  `protobuf:"varint,7,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	RunningCpuCount       uint32  `protobuf:"varint,8,opt,name=running_cpu_count,json=runningCpuCount,proto3" json:"running_cpu_count,omitempty"`
	IdleCpuCount          uint32  `protobuf:"varint,9,opt,name=idle_cpu_count,json=idleCpuCount,proto3" json:"idle_cpu_count,omitempty"`
	NotAvailableCpuCount  uint32  `protobuf:"varint,10,opt,name=not_available_cpu_count,json=notAvailableCpuCount,proto3" json:"not_available_cpu_count,omitempty"`
	GpuCoreCount          uint32  `protobuf:"varint,11,opt,name=gpu_core_count,json=gpuCoreCount,proto3" json:"gpu_core_count,omitempty"`
	RunningGpuCount       uint32  `protobuf:"varint,12,opt,name=running_gpu_count,json=runningGpuCount,proto3" json:"running_gpu_count,omitempty"`
	IdleGpuCount          uint32  `protobuf:"varint,13,opt,name=idle_gpu_count,json=idleGpuCount,proto3" json:"idle_gpu_count,omitempty"`
	NotAvailableGpuCount  uint32  `protobuf:"varint,14,opt,name=not_available_gpu_count,json=notAvailableGpuCount,proto3" json:"not_available_gpu_count,omitempty"`
	RunningJobCount       uint32  `protobuf:"varint,15,opt,name=running_job_count,json=runningJobCount,proto3" json:"running_job_count,omitempty"`
	PendingJobCount       uint32  `protobuf:"varint,16,opt,name=pending_job_count,json=pendingJobCount,proto3" json:"pending_job_count,omitempty"`
	NodeUsage             float32 `protobuf:"fixed32,17,opt,name=node_usage,json=nodeUsage,proto3" json:"node_usage,omitempty"`
	CpuUsage              float32 `protobuf:"fixed32,18,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
	GpuUsage              float32 `protobuf:"fixed32,19,opt,name=gpu_usage,json=gpuUsage,proto3" json:"gpu_usage,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetSummaryClusterInfoResponse) Reset() {
	*x = GetSummaryClusterInfoResponse{}
	mi := &file_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSummaryClusterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryClusterInfoResponse) ProtoMessage() {}

func (x *GetSummaryClusterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryClusterInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSummaryClusterInfoResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{10}
}

func (x *GetSummaryClusterInfoResponse) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *GetSummaryClusterInfoResponse) GetPartitions() []*SummaryPartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *GetSummaryClusterInfoResponse) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetRunningNodeCount() uint32 {
	if x != nil {
		return x.RunningNodeCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetIdleNodeCount() uint32 {
	if x != nil {
		return x.IdleNodeCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetNotAvailableNodeCount() uint32 {
	if x != nil {
		return x.NotAvailableNodeCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetCpuCoreCount() uint32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetRunningCpuCount() uint32 {
	if x != nil {
		return x.RunningCpuCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetIdleCpuCount() uint32 {
	if x != nil {
		return x.IdleCpuCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetNotAvailableCpuCount() uint32 {
	if x != nil {
		return x.NotAvailableCpuCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetGpuCoreCount() uint32 {
	if x != nil {
		return x.GpuCoreCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetRunningGpuCount() uint32 {
	if x != nil {
		return x.RunningGpuCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetIdleGpuCount() uint32 {
	if x != nil {
		return x.IdleGpuCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetNotAvailableGpuCount() uint32 {
	if x != nil {
		return x.NotAvailableGpuCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetRunningJobCount() uint32 {
	if x != nil {
		return x.RunningJobCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetPendingJobCount() uint32 {
	if x != nil {
		return x.PendingJobCount
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetNodeUsage() float32 {
	if x != nil {
		return x.NodeUsage
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetCpuUsage() float32 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *GetSummaryClusterInfoResponse) GetGpuUsage() float32 {
	if x != nil {
		return x.GpuUsage
	}
	return 0
}

type NodeInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NodeName          string                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Partitions        []string               `protobuf:"bytes,2,rep,name=partitions,proto3" json:"partitions,omitempty"`
	State             NodeInfo_NodeState     `protobuf:"varint,3,opt,name=state,proto3,enum=scow.scheduler_adapter.NodeInfo_NodeState" json:"state,omitempty"`
	CpuCoreCount      uint32                 `protobuf:"varint,4,opt,name=cpu_core_count,json=cpuCoreCount,proto3" json:"cpu_core_count,omitempty"`
	AllocCpuCoreCount uint32                 `protobuf:"varint,5,opt,name=alloc_cpu_core_count,json=allocCpuCoreCount,proto3" json:"alloc_cpu_core_count,omitempty"`
	IdleCpuCoreCount  uint32                 `protobuf:"varint,6,opt,name=idle_cpu_core_count,json=idleCpuCoreCount,proto3" json:"idle_cpu_core_count,omitempty"`
	TotalMemMb        uint32                 `protobuf:"varint,7,opt,name=total_mem_mb,json=totalMemMb,proto3" json:"total_mem_mb,omitempty"`
	AllocMemMb        uint32                 `protobuf:"varint,8,opt,name=alloc_mem_mb,json=allocMemMb,proto3" json:"alloc_mem_mb,omitempty"`
	IdleMemMb         uint32                 `protobuf:"varint,9,opt,name=idle_mem_mb,json=idleMemMb,proto3" json:"idle_mem_mb,omitempty"`
	GpuCount          uint32                 `protobuf:"varint,10,opt,name=gpu_count,json=gpuCount,proto3" json:"gpu_count,omitempty"`
	AllocGpuCount     uint32                 `protobuf:"varint,11,opt,name=alloc_gpu_count,json=allocGpuCount,proto3" json:"alloc_gpu_count,omitempty"`
	IdleGpuCount      uint32                 `protobuf:"varint,12,opt,name=idle_gpu_count,json=idleGpuCount,proto3" json:"idle_gpu_count,omitempty"`
	// node migration flag
	Removable     bool `protobuf:"varint,13,opt,name=removable,proto3" json:"removable,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	mi := &file_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{11}
}

func (x *NodeInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeInfo) GetPartitions() []string {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *NodeInfo) GetState() NodeInfo_NodeState {
	if x != nil {
		return x.State
	}
	return NodeInfo_UNKNOWN
}

func (x *NodeInfo) GetCpuCoreCount() uint32 {
	if x != nil {
		return x.CpuCoreCount
	}
	return 0
}

func (x *NodeInfo) GetAllocCpuCoreCount() uint32 {
	if x != nil {
		return x.AllocCpuCoreCount
	}
	return 0
}

func (x *NodeInfo) GetIdleCpuCoreCount() uint32 {
	if x != nil {
		return x.IdleCpuCoreCount
	}
	return 0
}

func (x *NodeInfo) GetTotalMemMb() uint32 {
	if x != nil {
		return x.TotalMemMb
	}
	return 0
}

func (x *NodeInfo) GetAllocMemMb() uint32 {
	if x != nil {
		return x.AllocMemMb
	}
	return 0
}

func (x *NodeInfo) GetIdleMemMb() uint32 {
	if x != nil {
		return x.IdleMemMb
	}
	return 0
}

func (x *NodeInfo) GetGpuCount() uint32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

func (x *NodeInfo) GetAllocGpuCount() uint32 {
	if x != nil {
		return x.AllocGpuCount
	}
	return 0
}

func (x *NodeInfo) GetIdleGpuCount() uint32 {
	if x != nil {
		return x.IdleGpuCount
	}
	return 0
}

func (x *NodeInfo) GetRemovable() bool {
	if x != nil {
		return x.Removable
	}
	return false
}

type GetClusterNodesInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// if the value of node_names = [], request all nodes info
	NodeNames     []string `protobuf:"bytes,1,rep,name=node_names,json=nodeNames,proto3" json:"node_names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterNodesInfoRequest) Reset() {
	*x = GetClusterNodesInfoRequest{}
	mi := &file_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterNodesInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterNodesInfoRequest) ProtoMessage() {}

func (x *GetClusterNodesInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterNodesInfoRequest.ProtoReflect.Descriptor instead.
func (*GetClusterNodesInfoRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{12}
}

func (x *GetClusterNodesInfoRequest) GetNodeNames() []string {
	if x != nil {
		return x.NodeNames
	}
	return nil
}

type GetClusterNodesInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*NodeInfo            `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterNodesInfoResponse) Reset() {
	*x = GetClusterNodesInfoResponse{}
	mi := &file_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterNodesInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterNodesInfoResponse) ProtoMessage() {}

func (x *GetClusterNodesInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterNodesInfoResponse.ProtoReflect.Descriptor instead.
func (*GetClusterNodesInfoResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{13}
}

func (x *GetClusterNodesInfoResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ListImplementedOptionalFeaturesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImplementedOptionalFeaturesRequest) Reset() {
	*x = ListImplementedOptionalFeaturesRequest{}
	mi := &file_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImplementedOptionalFeaturesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImplementedOptionalFeaturesRequest) ProtoMessage() {}

func (x *ListImplementedOptionalFeaturesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImplementedOptionalFeaturesRequest.ProtoReflect.Descriptor instead.
func (*ListImplementedOptionalFeaturesRequest) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{14}
}

type ListImplementedOptionalFeaturesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Features      []OptionalFeatures     `protobuf:"varint,1,rep,packed,name=features,proto3,enum=scow.scheduler_adapter.OptionalFeatures" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListImplementedOptionalFeaturesResponse) Reset() {
	*x = ListImplementedOptionalFeaturesResponse{}
	mi := &file_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListImplementedOptionalFeaturesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImplementedOptionalFeaturesResponse) ProtoMessage() {}

func (x *ListImplementedOptionalFeaturesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImplementedOptionalFeaturesResponse.ProtoReflect.Descriptor instead.
func (*ListImplementedOptionalFeaturesResponse) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{15}
}

func (x *ListImplementedOptionalFeaturesResponse) GetFeatures() []OptionalFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

const file_config_proto_rawDesc = "" +
	"\n" +
	"\fconfig.proto\x12\x16scow.scheduler_adapter\"\x19\n" +
	"\x17GetClusterConfigRequest\"\xb3\x01\n" +
	"\tPartition\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x15\n" +
	"\x06mem_mb\x18\x02 \x01(\x04R\x05memMb\x12\x14\n" +
	"\x05cores\x18\x03 \x01(\rR\x05cores\x12\x12\n" +
	"\x04gpus\x18\x04 \x01(\rR\x04gpus\x12\x14\n" +
	"\x05nodes\x18\x05 \x01(\rR\x05nodes\x12\x10\n" +
	"\x03qos\x18\x06 \x03(\tR\x03qos\x12\x1d\n" +
	"\acomment\x18\a \x01(\tH\x00R\acomment\x88\x01\x01B\n" +
	"\n" +
	"\b_comment\"\x84\x01\n" +
	"\x18GetClusterConfigResponse\x12A\n" +
	"\n" +
	"partitions\x18\x01 \x03(\v2!.scow.scheduler_adapter.PartitionR\n" +
	"partitions\x12%\n" +
	"\x0escheduler_name\x18\x02 \x01(\tR\rschedulerName\"[\n" +
	"\x1dGetAvailablePartitionsRequest\x12!\n" +
	"\faccount_name\x18\x01 \x01(\tR\vaccountName\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\"c\n" +
	"\x1eGetAvailablePartitionsResponse\x12A\n" +
	"\n" +
	"partitions\x18\x01 \x03(\v2!.scow.scheduler_adapter.PartitionR\n" +
	"partitions\"\x82\a\n" +
	"\rPartitionInfo\x12%\n" +
	"\x0epartition_name\x18\x01 \x01(\tR\rpartitionName\x12\x1d\n" +
	"\n" +
	"node_count\x18\x02 \x01(\rR\tnodeCount\x12,\n" +
	"\x12running_node_count\x18\x03 \x01(\rR\x10runningNodeCount\x12&\n" +
	"\x0fidle_node_count\x18\x04 \x01(\rR\ridleNodeCount\x127\n" +
	"\x18not_available_node_count\x18\x05 \x01(\rR\x15notAvailableNodeCount\x12$\n" +
	"\x0ecpu_core_count\x18\x06 \x01(\rR\fcpuCoreCount\x12*\n" +
	"\x11running_cpu_count\x18\a \x01(\rR\x0frunningCpuCount\x12$\n" +
	"\x0eidle_cpu_count\x18\b \x01(\rR\fidleCpuCount\x125\n" +
	"\x17not_available_cpu_count\x18\t \x01(\rR\x14notAvailableCpuCount\x12$\n" +
	"\x0egpu_core_count\x18\n" +
	" \x01(\rR\fgpuCoreCount\x12*\n" +
	"\x11running_gpu_count\x18\v \x01(\rR\x0frunningGpuCount\x12$\n" +
	"\x0eidle_gpu_count\x18\f \x01(\rR\fidleGpuCount\x125\n" +
	"\x17not_available_gpu_count\x18\r \x01(\rR\x14notAvailableGpuCount\x12\x1b\n" +
	"\tjob_count\x18\x0e \x01(\rR\bjobCount\x12*\n" +
	"\x11running_job_count\x18\x0f \x01(\rR\x0frunningJobCount\x12*\n" +
	"\x11pending_job_count\x18\x10 \x01(\rR\x0fpendingJobCount\x122\n" +
	"\x15usage_rate_percentage\x18\x11 \x01(\rR\x13usageRatePercentage\x12`\n" +
	"\x10partition_status\x18\x12 \x01(\x0e25.scow.scheduler_adapter.PartitionInfo.PartitionStatusR\x0fpartitionStatus\"3\n" +
	"\x0fPartitionStatus\x12\x11\n" +
	"\rNOT_AVAILABLE\x10\x00\x12\r\n" +
	"\tAVAILABLE\x10\x01\"\x17\n" +
	"\x15GetClusterInfoRequest\"\x83\x06\n" +
	"\x16GetClusterInfoResponse\x12!\n" +
	"\fcluster_name\x18\x01 \x01(\tR\vclusterName\x12E\n" +
	"\n" +
	"partitions\x18\x02 \x03(\v2%.scow.scheduler_adapter.PartitionInfoR\n" +
	"partitions\x12\x1d\n" +
	"\n" +
	"node_count\x18\x03 \x01(\rR\tnodeCount\x12,\n" +
	"\x12running_node_count\x18\x04 \x01(\rR\x10runningNodeCount\x12&\n" +
	"\x0fidle_node_count\x18\x05 \x01(\rR\ridleNodeCount\x127\n" +
	"\x18not_available_node_count\x18\x06 \x01(\rR\x15notAvailableNodeCount\x12$\n" +
	"\x0ecpu_core_count\x18\a \x01(\rR\fcpuCoreCount\x12*\n" +
	"\x11running_cpu_count\x18\b \x01(\rR\x0frunningCpuCount\x12$\n" +
	"\x0eidle_cpu_count\x18\t \x01(\rR\fidleCpuCount\x125\n" +
	"\x17not_available_cpu_count\x18\n" +
	" \x01(\rR\x14notAvailableCpuCount\x12$\n" +
	"\x0egpu_core_count\x18\v \x01(\rR\fgpuCoreCount\x12*\n" +
	"\x11running_gpu_count\x18\f \x01(\rR\x0frunningGpuCount\x12$\n" +
	"\x0eidle_gpu_count\x18\r \x01(\rR\fidleGpuCount\x125\n" +
	"\x17not_available_gpu_count\x18\x0e \x01(\rR\x14notAvailableGpuCount\x12\x1b\n" +
	"\tjob_count\x18\x0f \x01(\rR\bjobCount\x12*\n" +
	"\x11running_job_count\x18\x10 \x01(\rR\x0frunningJobCount\x12*\n" +
	"\x11pending_job_count\x18\x11 \x01(\rR\x0fpendingJobCount\"\xcb\x03\n" +
	"\x14SummaryPartitionInfo\x12%\n" +
	"\x0epartition_name\x18\x01 \x01(\tR\rpartitionName\x12\x1d\n" +
	"\n" +
	"node_count\x18\x02 \x01(\rR\tnodeCount\x12\x1d\n" +
	"\n" +
	"node_usage\x18\x03 \x01(\x02R\tnodeUsage\x12$\n" +
	"\x0ecpu_core_count\x18\x04 \x01(\rR\fcpuCoreCount\x12\x1b\n" +
	"\tcpu_usage\x18\x05 \x01(\x02R\bcpuUsage\x12$\n" +
	"\x0egpu_core_count\x18\x06 \x01(\rR\fgpuCoreCount\x12\x1b\n" +
	"\tgpu_usage\x18\a \x01(\x02R\bgpuUsage\x12*\n" +
	"\x11pending_job_count\x18\b \x01(\rR\x0fpendingJobCount\x12g\n" +
	"\x10partition_status\x18\t \x01(\x0e2<.scow.scheduler_adapter.SummaryPartitionInfo.PartitionStatusR\x0fpartitionStatus\"3\n" +
	"\x0fPartitionStatus\x12\x11\n" +
	"\rNOT_AVAILABLE\x10\x00\x12\r\n" +
	"\tAVAILABLE\x10\x01\"C\n" +
	"\x1cGetSummaryClusterInfoRequest\x12#\n" +
	"\raccount_names\x18\x01 \x03(\tR\faccountNames\"\xcd\x06\n" +
	"\x1dGetSummaryClusterInfoResponse\x12!\n" +
	"\fcluster_name\x18\x01 \x01(\tR\vclusterName\x12L\n" +
	"\n" +
	"partitions\x18\x02 \x03(\v2,.scow.scheduler_adapter.SummaryPartitionInfoR\n" +
	"partitions\x12\x1d\n" +
	"\n" +
	"node_count\x18\x03 \x01(\rR\tnodeCount\x12,\n" +
	"\x12running_node_count\x18\x04 \x01(\rR\x10runningNodeCount\x12&\n" +
	"\x0fidle_node_count\x18\x05 \x01(\rR\ridleNodeCount\x127\n" +
	"\x18not_available_node_count\x18\x06 \x01(\rR\x15notAvailableNodeCount\x12$\n" +
	"\x0ecpu_core_count\x18\a \x01(\rR\fcpuCoreCount\x12*\n" +
	"\x11running_cpu_count\x18\b \x01(\rR\x0frunningCpuCount\x12$\n" +
	"\x0eidle_cpu_count\x18\t \x01(\rR\fidleCpuCount\x125\n" +
	"\x17not_available_cpu_count\x18\n" +
	" \x01(\rR\x14notAvailableCpuCount\x12$\n" +
	"\x0egpu_core_count\x18\v \x01(\rR\fgpuCoreCount\x12*\n" +
	"\x11running_gpu_count\x18\f \x01(\rR\x0frunningGpuCount\x12$\n" +
	"\x0eidle_gpu_count\x18\r \x01(\rR\fidleGpuCount\x125\n" +
	"\x17not_available_gpu_count\x18\x0e \x01(\rR\x14notAvailableGpuCount\x12*\n" +
	"\x11running_job_count\x18\x0f \x01(\rR\x0frunningJobCount\x12*\n" +
	"\x11pending_job_count\x18\x10 \x01(\rR\x0fpendingJobCount\x12\x1d\n" +
	"\n" +
	"node_usage\x18\x11 \x01(\x02R\tnodeUsage\x12\x1b\n" +
	"\tcpu_usage\x18\x12 \x01(\x02R\bcpuUsage\x12\x1b\n" +
	"\tgpu_usage\x18\x13 \x01(\x02R\bgpuUsage\"\xc0\x04\n" +
	"\bNodeInfo\x12\x1b\n" +
	"\tnode_name\x18\x01 \x01(\tR\bnodeName\x12\x1e\n" +
	"\n" +
	"partitions\x18\x02 \x03(\tR\n" +
	"partitions\x12@\n" +
	"\x05state\x18\x03 \x01(\x0e2*.scow.scheduler_adapter.NodeInfo.NodeStateR\x05state\x12$\n" +
	"\x0ecpu_core_count\x18\x04 \x01(\rR\fcpuCoreCount\x12/\n" +
	"\x14alloc_cpu_core_count\x18\x05 \x01(\rR\x11allocCpuCoreCount\x12-\n" +
	"\x13idle_cpu_core_count\x18\x06 \x01(\rR\x10idleCpuCoreCount\x12 \n" +
	"\ftotal_mem_mb\x18\a \x01(\rR\n" +
	"totalMemMb\x12 \n" +
	"\falloc_mem_mb\x18\b \x01(\rR\n" +
	"allocMemMb\x12\x1e\n" +
	"\vidle_mem_mb\x18\t \x01(\rR\tidleMemMb\x12\x1b\n" +
	"\tgpu_count\x18\n" +
	" \x01(\rR\bgpuCount\x12&\n" +
	"\x0falloc_gpu_count\x18\v \x01(\rR\rallocGpuCount\x12$\n" +
	"\x0eidle_gpu_count\x18\f \x01(\rR\fidleGpuCount\x12\x1c\n" +
	"\tremovable\x18\r \x01(\bR\tremovable\"B\n" +
	"\tNodeState\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04IDLE\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\x11\n" +
	"\rNOT_AVAILABLE\x10\x03\";\n" +
	"\x1aGetClusterNodesInfoRequest\x12\x1d\n" +
	"\n" +
	"node_names\x18\x01 \x03(\tR\tnodeNames\"U\n" +
	"\x1bGetClusterNodesInfoResponse\x126\n" +
	"\x05nodes\x18\x01 \x03(\v2 .scow.scheduler_adapter.NodeInfoR\x05nodes\"(\n" +
	"&ListImplementedOptionalFeaturesRequest\"o\n" +
	"'ListImplementedOptionalFeaturesResponse\x12D\n" +
	"\bfeatures\x18\x01 \x03(\x0e2(.scow.scheduler_adapter.OptionalFeaturesR\bfeatures*8\n" +
	"\x10OptionalFeatures\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\x17\n" +
	"\x13RESOURCE_MANAGEMENT\x10\x012\xad\x06\n" +
	"\rConfigService\x12u\n" +
	"\x10GetClusterConfig\x12/.scow.scheduler_adapter.GetClusterConfigRequest\x1a0.scow.scheduler_adapter.GetClusterConfigResponse\x12\x87\x01\n" +
	"\x16GetAvailablePartitions\x125.scow.scheduler_adapter.GetAvailablePartitionsRequest\x1a6.scow.scheduler_adapter.GetAvailablePartitionsResponse\x12o\n" +
	"\x0eGetClusterInfo\x12-.scow.scheduler_adapter.GetClusterInfoRequest\x1a..scow.scheduler_adapter.GetClusterInfoResponse\x12\x84\x01\n" +
	"\x15GetSummaryClusterInfo\x124.scow.scheduler_adapter.GetSummaryClusterInfoRequest\x1a5.scow.scheduler_adapter.GetSummaryClusterInfoResponse\x12~\n" +
	"\x13GetClusterNodesInfo\x122.scow.scheduler_adapter.GetClusterNodesInfoRequest\x1a3.scow.scheduler_adapter.GetClusterNodesInfoResponse\x12\xa2\x01\n" +
	"\x1fListImplementedOptionalFeatures\x12>.scow.scheduler_adapter.ListImplementedOptionalFeaturesRequest\x1a?.scow.scheduler_adapter.ListImplementedOptionalFeaturesResponseB\xb6\x01\n" +
	"\x1acom.scow.scheduler_adapterB\vConfigProtoP\x01Z\x16scow-crane-adapter/gen\xa2\x02\x03SSX\xaa\x02\x15Scow.SchedulerAdapter\xca\x02\x15Scow\\SchedulerAdapter\xe2\x02!Scow\\SchedulerAdapter\\GPBMetadata\xea\x02\x16Scow::SchedulerAdapterb\x06proto3"

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData []byte
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)))
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_config_proto_goTypes = []any{
	(OptionalFeatures)(0),                           // 0: scow.scheduler_adapter.OptionalFeatures
	(PartitionInfo_PartitionStatus)(0),              // 1: scow.scheduler_adapter.PartitionInfo.PartitionStatus
	(SummaryPartitionInfo_PartitionStatus)(0),       // 2: scow.scheduler_adapter.SummaryPartitionInfo.PartitionStatus
	(NodeInfo_NodeState)(0),                         // 3: scow.scheduler_adapter.NodeInfo.NodeState
	(*GetClusterConfigRequest)(nil),                 // 4: scow.scheduler_adapter.GetClusterConfigRequest
	(*Partition)(nil),                               // 5: scow.scheduler_adapter.Partition
	(*GetClusterConfigResponse)(nil),                // 6: scow.scheduler_adapter.GetClusterConfigResponse
	(*GetAvailablePartitionsRequest)(nil),           // 7: scow.scheduler_adapter.GetAvailablePartitionsRequest
	(*GetAvailablePartitionsResponse)(nil),          // 8: scow.scheduler_adapter.GetAvailablePartitionsResponse
	(*PartitionInfo)(nil),                           // 9: scow.scheduler_adapter.PartitionInfo
	(*GetClusterInfoRequest)(nil),                   // 10: scow.scheduler_adapter.GetClusterInfoRequest
	(*GetClusterInfoResponse)(nil),                  // 11: scow.scheduler_adapter.GetClusterInfoResponse
	(*SummaryPartitionInfo)(nil),                    // 12: scow.scheduler_adapter.SummaryPartitionInfo
	(*GetSummaryClusterInfoRequest)(nil),            // 13: scow.scheduler_adapter.GetSummaryClusterInfoRequest
	(*GetSummaryClusterInfoResponse)(nil),           // 14: scow.scheduler_adapter.GetSummaryClusterInfoResponse
	(*NodeInfo)(nil),                                // 15: scow.scheduler_adapter.NodeInfo
	(*GetClusterNodesInfoRequest)(nil),              // 16: scow.scheduler_adapter.GetClusterNodesInfoRequest
	(*GetClusterNodesInfoResponse)(nil),             // 17: scow.scheduler_adapter.GetClusterNodesInfoResponse
	(*ListImplementedOptionalFeaturesRequest)(nil),  // 18: scow.scheduler_adapter.ListImplementedOptionalFeaturesRequest
	(*ListImplementedOptionalFeaturesResponse)(nil), // 19: scow.scheduler_adapter.ListImplementedOptionalFeaturesResponse
}
var file_config_proto_depIdxs = []int32{
	5,  // 0: scow.scheduler_adapter.GetClusterConfigResponse.partitions:type_name -> scow.scheduler_adapter.Partition
	5,  // 1: scow.scheduler_adapter.GetAvailablePartitionsResponse.partitions:type_name -> scow.scheduler_adapter.Partition
	1,  // 2: scow.scheduler_adapter.PartitionInfo.partition_status:type_name -> scow.scheduler_adapter.PartitionInfo.PartitionStatus
	9,  // 3: scow.scheduler_adapter.GetClusterInfoResponse.partitions:type_name -> scow.scheduler_adapter.PartitionInfo
	2,  // 4: scow.scheduler_adapter.SummaryPartitionInfo.partition_status:type_name -> scow.scheduler_adapter.SummaryPartitionInfo.PartitionStatus
	12, // 5: scow.scheduler_adapter.GetSummaryClusterInfoResponse.partitions:type_name -> scow.scheduler_adapter.SummaryPartitionInfo
	3,  // 6: scow.scheduler_adapter.NodeInfo.state:type_name -> scow.scheduler_adapter.NodeInfo.NodeState
	15, // 7: scow.scheduler_adapter.GetClusterNodesInfoResponse.nodes:type_name -> scow.scheduler_adapter.NodeInfo
	0,  // 8: scow.scheduler_adapter.ListImplementedOptionalFeaturesResponse.features:type_name -> scow.scheduler_adapter.OptionalFeatures
	4,  // 9: scow.scheduler_adapter.ConfigService.GetClusterConfig:input_type -> scow.scheduler_adapter.GetClusterConfigRequest
	7,  // 10: scow.scheduler_adapter.ConfigService.GetAvailablePartitions:input_type -> scow.scheduler_adapter.GetAvailablePartitionsRequest
	10, // 11: scow.scheduler_adapter.ConfigService.GetClusterInfo:input_type -> scow.scheduler_adapter.GetClusterInfoRequest
	13, // 12: scow.scheduler_adapter.ConfigService.GetSummaryClusterInfo:input_type -> scow.scheduler_adapter.GetSummaryClusterInfoRequest
	16, // 13: scow.scheduler_adapter.ConfigService.GetClusterNodesInfo:input_type -> scow.scheduler_adapter.GetClusterNodesInfoRequest
	18, // 14: scow.scheduler_adapter.ConfigService.ListImplementedOptionalFeatures:input_type -> scow.scheduler_adapter.ListImplementedOptionalFeaturesRequest
	6,  // 15: scow.scheduler_adapter.ConfigService.GetClusterConfig:output_type -> scow.scheduler_adapter.GetClusterConfigResponse
	8,  // 16: scow.scheduler_adapter.ConfigService.GetAvailablePartitions:output_type -> scow.scheduler_adapter.GetAvailablePartitionsResponse
	11, // 17: scow.scheduler_adapter.ConfigService.GetClusterInfo:output_type -> scow.scheduler_adapter.GetClusterInfoResponse
	14, // 18: scow.scheduler_adapter.ConfigService.GetSummaryClusterInfo:output_type -> scow.scheduler_adapter.GetSummaryClusterInfoResponse
	17, // 19: scow.scheduler_adapter.ConfigService.GetClusterNodesInfo:output_type -> scow.scheduler_adapter.GetClusterNodesInfoResponse
	19, // 20: scow.scheduler_adapter.ConfigService.ListImplementedOptionalFeatures:output_type -> scow.scheduler_adapter.ListImplementedOptionalFeaturesResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	file_config_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
