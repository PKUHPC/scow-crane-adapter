//*
// Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
// SCOW is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: config.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConfigService_GetClusterConfig_FullMethodName                = "/scow.scheduler_adapter.ConfigService/GetClusterConfig"
	ConfigService_GetAvailablePartitions_FullMethodName          = "/scow.scheduler_adapter.ConfigService/GetAvailablePartitions"
	ConfigService_GetClusterInfo_FullMethodName                  = "/scow.scheduler_adapter.ConfigService/GetClusterInfo"
	ConfigService_GetClusterNodesInfo_FullMethodName             = "/scow.scheduler_adapter.ConfigService/GetClusterNodesInfo"
	ConfigService_ListImplementedOptionalFeatures_FullMethodName = "/scow.scheduler_adapter.ConfigService/ListImplementedOptionalFeatures"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	//
	// description: get cluster config
	GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...grpc.CallOption) (*GetClusterConfigResponse, error)
	//
	// description: get available partitions and qos by user id and account name
	GetAvailablePartitions(ctx context.Context, in *GetAvailablePartitionsRequest, opts ...grpc.CallOption) (*GetAvailablePartitionsResponse, error)
	//
	// description: get cluster information
	GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error)
	//
	// description: get cluster nodes information
	GetClusterNodesInfo(ctx context.Context, in *GetClusterNodesInfoRequest, opts ...grpc.CallOption) (*GetClusterNodesInfoResponse, error)
	//
	// description: List optional features implemented by this scheduler adapter
	ListImplementedOptionalFeatures(ctx context.Context, in *ListImplementedOptionalFeaturesRequest, opts ...grpc.CallOption) (*ListImplementedOptionalFeaturesResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetClusterConfig(ctx context.Context, in *GetClusterConfigRequest, opts ...grpc.CallOption) (*GetClusterConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterConfigResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetClusterConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetAvailablePartitions(ctx context.Context, in *GetAvailablePartitionsRequest, opts ...grpc.CallOption) (*GetAvailablePartitionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailablePartitionsResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetAvailablePartitions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetClusterInfo(ctx context.Context, in *GetClusterInfoRequest, opts ...grpc.CallOption) (*GetClusterInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterInfoResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetClusterInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) GetClusterNodesInfo(ctx context.Context, in *GetClusterNodesInfoRequest, opts ...grpc.CallOption) (*GetClusterNodesInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterNodesInfoResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetClusterNodesInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ListImplementedOptionalFeatures(ctx context.Context, in *ListImplementedOptionalFeaturesRequest, opts ...grpc.CallOption) (*ListImplementedOptionalFeaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListImplementedOptionalFeaturesResponse)
	err := c.cc.Invoke(ctx, ConfigService_ListImplementedOptionalFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations should embed UnimplementedConfigServiceServer
// for forward compatibility.
type ConfigServiceServer interface {
	//
	// description: get cluster config
	GetClusterConfig(context.Context, *GetClusterConfigRequest) (*GetClusterConfigResponse, error)
	//
	// description: get available partitions and qos by user id and account name
	GetAvailablePartitions(context.Context, *GetAvailablePartitionsRequest) (*GetAvailablePartitionsResponse, error)
	//
	// description: get cluster information
	GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error)
	//
	// description: get cluster nodes information
	GetClusterNodesInfo(context.Context, *GetClusterNodesInfoRequest) (*GetClusterNodesInfoResponse, error)
	//
	// description: List optional features implemented by this scheduler adapter
	ListImplementedOptionalFeatures(context.Context, *ListImplementedOptionalFeaturesRequest) (*ListImplementedOptionalFeaturesResponse, error)
}

// UnimplementedConfigServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConfigServiceServer struct{}

func (UnimplementedConfigServiceServer) GetClusterConfig(context.Context, *GetClusterConfigRequest) (*GetClusterConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterConfig not implemented")
}
func (UnimplementedConfigServiceServer) GetAvailablePartitions(context.Context, *GetAvailablePartitionsRequest) (*GetAvailablePartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePartitions not implemented")
}
func (UnimplementedConfigServiceServer) GetClusterInfo(context.Context, *GetClusterInfoRequest) (*GetClusterInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterInfo not implemented")
}
func (UnimplementedConfigServiceServer) GetClusterNodesInfo(context.Context, *GetClusterNodesInfoRequest) (*GetClusterNodesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterNodesInfo not implemented")
}
func (UnimplementedConfigServiceServer) ListImplementedOptionalFeatures(context.Context, *ListImplementedOptionalFeaturesRequest) (*ListImplementedOptionalFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImplementedOptionalFeatures not implemented")
}
func (UnimplementedConfigServiceServer) testEmbeddedByValue() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetClusterConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetClusterConfig(ctx, req.(*GetClusterConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetAvailablePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailablePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetAvailablePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetAvailablePartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetAvailablePartitions(ctx, req.(*GetAvailablePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetClusterInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetClusterInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetClusterInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetClusterInfo(ctx, req.(*GetClusterInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_GetClusterNodesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterNodesInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetClusterNodesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetClusterNodesInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetClusterNodesInfo(ctx, req.(*GetClusterNodesInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ListImplementedOptionalFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImplementedOptionalFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ListImplementedOptionalFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ListImplementedOptionalFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ListImplementedOptionalFeatures(ctx, req.(*ListImplementedOptionalFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scow.scheduler_adapter.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClusterConfig",
			Handler:    _ConfigService_GetClusterConfig_Handler,
		},
		{
			MethodName: "GetAvailablePartitions",
			Handler:    _ConfigService_GetAvailablePartitions_Handler,
		},
		{
			MethodName: "GetClusterInfo",
			Handler:    _ConfigService_GetClusterInfo_Handler,
		},
		{
			MethodName: "GetClusterNodesInfo",
			Handler:    _ConfigService_GetClusterNodesInfo_Handler,
		},
		{
			MethodName: "ListImplementedOptionalFeatures",
			Handler:    _ConfigService_ListImplementedOptionalFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
