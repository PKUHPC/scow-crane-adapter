//*
// Copyright (c) 2022 Peking University and Peking University Institute for Computing and Digital Economy
// SCOW is licensed under Mulan PSL v2.
// You can use this software according to the terms and conditions of the Mulan PSL v2.
// You may obtain a copy of Mulan PSL v2 at:
//          http://license.coscl.org.cn/MulanPSL2
// THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
// EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
// MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
// See the Mulan PSL v2 for more details.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: job.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortInfo_SortOrder int32

const (
	SortInfo_ASC  SortInfo_SortOrder = 0
	SortInfo_DESC SortInfo_SortOrder = 1
)

// Enum value maps for SortInfo_SortOrder.
var (
	SortInfo_SortOrder_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	SortInfo_SortOrder_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x SortInfo_SortOrder) Enum() *SortInfo_SortOrder {
	p := new(SortInfo_SortOrder)
	*p = x
	return p
}

func (x SortInfo_SortOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortInfo_SortOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_job_proto_enumTypes[0].Descriptor()
}

func (SortInfo_SortOrder) Type() protoreflect.EnumType {
	return &file_job_proto_enumTypes[0]
}

func (x SortInfo_SortOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortInfo_SortOrder.Descriptor instead.
func (SortInfo_SortOrder) EnumDescriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{3, 0}
}

type JobInfo struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	JobId     uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Account   string                 `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	User      string                 `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	Partition string                 `protobuf:"bytes,5,opt,name=partition,proto3" json:"partition,omitempty"`
	Qos       string                 `protobuf:"bytes,6,opt,name=qos,proto3" json:"qos,omitempty"`
	//*
	// The job state field must include the following states:
	// PENDING, RUNNING, CANCELED, COMPLETED
	// - PENDING:
	//   A state indicating that a job has been submitted
	//   and is waiting for further action before it can be started.
	// - RUNNING:
	//   A state indicating that a job is currently in progress
	//   and is actively being worked on or executed.
	// - CANCELED:
	//   A state indicating that a job has been terminated prematurely
	//   and will not be completed as originally intended.
	// - COMPLETED:
	//   A state indicating that a job has been successfully finished
	//   and has reached its intended conclusion.
	// Other possible states should be represented in uppercase letters.
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// the number of CPUs requested by job
	CpusReq int32 `protobuf:"varint,8,opt,name=cpus_req,json=cpusReq,proto3" json:"cpus_req,omitempty"`
	// memory requested by job
	MemReqMb int64 `protobuf:"varint,9,opt,name=mem_req_mb,json=memReqMb,proto3" json:"mem_req_mb,omitempty"`
	// the number of nodes requested by job
	NodesReq         int32                  `protobuf:"varint,10,opt,name=nodes_req,json=nodesReq,proto3" json:"nodes_req,omitempty"`
	TimeLimitMinutes int64                  `protobuf:"varint,11,opt,name=time_limit_minutes,json=timeLimitMinutes,proto3" json:"time_limit_minutes,omitempty"`
	SubmitTime       *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`
	WorkingDirectory string                 `protobuf:"bytes,13,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	// name of the file that stdout outputs to, relative to the working directory.
	StdoutPath *string `protobuf:"bytes,14,opt,name=stdout_path,json=stdoutPath,proto3,oneof" json:"stdout_path,omitempty"`
	// name of the file that stderr outputs to, relative to the working directory.
	StderrPath     *string                `protobuf:"bytes,15,opt,name=stderr_path,json=stderrPath,proto3,oneof" json:"stderr_path,omitempty"`
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	ElapsedSeconds *int64                 `protobuf:"varint,17,opt,name=elapsed_seconds,json=elapsedSeconds,proto3,oneof" json:"elapsed_seconds,omitempty"`
	// indicates why is the job in this state
	Reason   *string `protobuf:"bytes,18,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	NodeList *string `protobuf:"bytes,19,opt,name=node_list,json=nodeList,proto3,oneof" json:"node_list,omitempty"`
	// the number of GPUs used by job
	GpusAlloc *int32 `protobuf:"varint,20,opt,name=gpus_alloc,json=gpusAlloc,proto3,oneof" json:"gpus_alloc,omitempty"`
	// the number of CPUs used by job
	CpusAlloc *int32 `protobuf:"varint,21,opt,name=cpus_alloc,json=cpusAlloc,proto3,oneof" json:"cpus_alloc,omitempty"`
	// memory used by job
	MemAllocMb *int64 `protobuf:"varint,22,opt,name=mem_alloc_mb,json=memAllocMb,proto3,oneof" json:"mem_alloc_mb,omitempty"`
	// the number of nodes used by job
	NodesAlloc    *int32                 `protobuf:"varint,23,opt,name=nodes_alloc,json=nodesAlloc,proto3,oneof" json:"nodes_alloc,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobInfo) Reset() {
	*x = JobInfo{}
	mi := &file_job_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobInfo) ProtoMessage() {}

func (x *JobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobInfo.ProtoReflect.Descriptor instead.
func (*JobInfo) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{0}
}

func (x *JobInfo) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *JobInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *JobInfo) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *JobInfo) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *JobInfo) GetQos() string {
	if x != nil {
		return x.Qos
	}
	return ""
}

func (x *JobInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *JobInfo) GetCpusReq() int32 {
	if x != nil {
		return x.CpusReq
	}
	return 0
}

func (x *JobInfo) GetMemReqMb() int64 {
	if x != nil {
		return x.MemReqMb
	}
	return 0
}

func (x *JobInfo) GetNodesReq() int32 {
	if x != nil {
		return x.NodesReq
	}
	return 0
}

func (x *JobInfo) GetTimeLimitMinutes() int64 {
	if x != nil {
		return x.TimeLimitMinutes
	}
	return 0
}

func (x *JobInfo) GetSubmitTime() *timestamppb.Timestamp {
	if x != nil {
		return x.SubmitTime
	}
	return nil
}

func (x *JobInfo) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *JobInfo) GetStdoutPath() string {
	if x != nil && x.StdoutPath != nil {
		return *x.StdoutPath
	}
	return ""
}

func (x *JobInfo) GetStderrPath() string {
	if x != nil && x.StderrPath != nil {
		return *x.StderrPath
	}
	return ""
}

func (x *JobInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *JobInfo) GetElapsedSeconds() int64 {
	if x != nil && x.ElapsedSeconds != nil {
		return *x.ElapsedSeconds
	}
	return 0
}

func (x *JobInfo) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *JobInfo) GetNodeList() string {
	if x != nil && x.NodeList != nil {
		return *x.NodeList
	}
	return ""
}

func (x *JobInfo) GetGpusAlloc() int32 {
	if x != nil && x.GpusAlloc != nil {
		return *x.GpusAlloc
	}
	return 0
}

func (x *JobInfo) GetCpusAlloc() int32 {
	if x != nil && x.CpusAlloc != nil {
		return *x.CpusAlloc
	}
	return 0
}

func (x *JobInfo) GetMemAllocMb() int64 {
	if x != nil && x.MemAllocMb != nil {
		return *x.MemAllocMb
	}
	return 0
}

func (x *JobInfo) GetNodesAlloc() int32 {
	if x != nil && x.NodesAlloc != nil {
		return *x.NodesAlloc
	}
	return 0
}

func (x *JobInfo) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type TimeRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	mi := &file_job_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{1}
}

func (x *TimeRange) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TimeRange) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type PageInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint64                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	mi := &file_job_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{2}
}

func (x *PageInfo) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfo) GetPageSize() uint64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type SortInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Order         SortInfo_SortOrder     `protobuf:"varint,2,opt,name=order,proto3,enum=scow.scheduler_adapter.SortInfo_SortOrder" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SortInfo) Reset() {
	*x = SortInfo{}
	mi := &file_job_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SortInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortInfo) ProtoMessage() {}

func (x *SortInfo) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortInfo.ProtoReflect.Descriptor instead.
func (*SortInfo) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{3}
}

func (x *SortInfo) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SortInfo) GetOrder() SortInfo_SortOrder {
	if x != nil {
		return x.Order
	}
	return SortInfo_ASC
}

type GetJobsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// required JobInfo fields
	// The value of the string corresponds to the name of each field in JobInfo
	Fields []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	// specify filter options
	Filter *GetJobsRequest_Filter `protobuf:"bytes,2,opt,name=filter,proto3,oneof" json:"filter,omitempty"`
	// 'page' number with a 'pagesize' pagination.
	// if not set, no pagination
	PageInfo *PageInfo `protobuf:"bytes,3,opt,name=page_info,json=pageInfo,proto3,oneof" json:"page_info,omitempty"`
	// returned jobs should be sorted if set
	Sort          *SortInfo `protobuf:"bytes,4,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobsRequest) Reset() {
	*x = GetJobsRequest{}
	mi := &file_job_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest) ProtoMessage() {}

func (x *GetJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest.ProtoReflect.Descriptor instead.
func (*GetJobsRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{4}
}

func (x *GetJobsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetJobsRequest) GetFilter() *GetJobsRequest_Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetJobsRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *GetJobsRequest) GetSort() *SortInfo {
	if x != nil {
		return x.Sort
	}
	return nil
}

type GetJobsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Jobs  []*JobInfo             `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
	// page total count
	// if no pagination, don't set this field
	TotalCount    *uint32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3,oneof" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobsResponse) Reset() {
	*x = GetJobsResponse{}
	mi := &file_job_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsResponse) ProtoMessage() {}

func (x *GetJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsResponse.ProtoReflect.Descriptor instead.
func (*GetJobsResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{5}
}

func (x *GetJobsResponse) GetJobs() []*JobInfo {
	if x != nil {
		return x.Jobs
	}
	return nil
}

func (x *GetJobsResponse) GetTotalCount() uint32 {
	if x != nil && x.TotalCount != nil {
		return *x.TotalCount
	}
	return 0
}

type GetJobByIdRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// required JobInfo fields
	// The value of the string corresponds to the name of each field in JobInfo
	Fields        []string `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	JobId         uint32   `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobByIdRequest) Reset() {
	*x = GetJobByIdRequest{}
	mi := &file_job_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobByIdRequest) ProtoMessage() {}

func (x *GetJobByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobByIdRequest.ProtoReflect.Descriptor instead.
func (*GetJobByIdRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{6}
}

func (x *GetJobByIdRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetJobByIdRequest) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type GetJobByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Job           *JobInfo               `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobByIdResponse) Reset() {
	*x = GetJobByIdResponse{}
	mi := &file_job_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobByIdResponse) ProtoMessage() {}

func (x *GetJobByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobByIdResponse.ProtoReflect.Descriptor instead.
func (*GetJobByIdResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{7}
}

func (x *GetJobByIdResponse) GetJob() *JobInfo {
	if x != nil {
		return x.Job
	}
	return nil
}

type ChangeJobTimeLimitRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	JobId uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// increase or decrease time limit
	DeltaMinutes  int64 `protobuf:"varint,2,opt,name=delta_minutes,json=deltaMinutes,proto3" json:"delta_minutes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeJobTimeLimitRequest) Reset() {
	*x = ChangeJobTimeLimitRequest{}
	mi := &file_job_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeJobTimeLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeJobTimeLimitRequest) ProtoMessage() {}

func (x *ChangeJobTimeLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeJobTimeLimitRequest.ProtoReflect.Descriptor instead.
func (*ChangeJobTimeLimitRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{8}
}

func (x *ChangeJobTimeLimitRequest) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *ChangeJobTimeLimitRequest) GetDeltaMinutes() int64 {
	if x != nil {
		return x.DeltaMinutes
	}
	return 0
}

type ChangeJobTimeLimitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChangeJobTimeLimitResponse) Reset() {
	*x = ChangeJobTimeLimitResponse{}
	mi := &file_job_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChangeJobTimeLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeJobTimeLimitResponse) ProtoMessage() {}

func (x *ChangeJobTimeLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeJobTimeLimitResponse.ProtoReflect.Descriptor instead.
func (*ChangeJobTimeLimitResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{9}
}

type QueryJobTimeLimitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryJobTimeLimitRequest) Reset() {
	*x = QueryJobTimeLimitRequest{}
	mi := &file_job_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryJobTimeLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobTimeLimitRequest) ProtoMessage() {}

func (x *QueryJobTimeLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobTimeLimitRequest.ProtoReflect.Descriptor instead.
func (*QueryJobTimeLimitRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{10}
}

func (x *QueryJobTimeLimitRequest) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type QueryJobTimeLimitResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	TimeLimitMinutes uint64                 `protobuf:"varint,1,opt,name=time_limit_minutes,json=timeLimitMinutes,proto3" json:"time_limit_minutes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *QueryJobTimeLimitResponse) Reset() {
	*x = QueryJobTimeLimitResponse{}
	mi := &file_job_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryJobTimeLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryJobTimeLimitResponse) ProtoMessage() {}

func (x *QueryJobTimeLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryJobTimeLimitResponse.ProtoReflect.Descriptor instead.
func (*QueryJobTimeLimitResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{11}
}

func (x *QueryJobTimeLimitResponse) GetTimeLimitMinutes() uint64 {
	if x != nil {
		return x.TimeLimitMinutes
	}
	return 0
}

type SubmitJobRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	UserId  string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JobName string                 `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	Account string                 `protobuf:"bytes,3,opt,name=account,proto3" json:"account,omitempty"`
	// if not set, use a default partition
	Partition string  `protobuf:"bytes,4,opt,name=partition,proto3" json:"partition,omitempty"`
	Qos       *string `protobuf:"bytes,5,opt,name=qos,proto3,oneof" json:"qos,omitempty"`
	NodeCount uint32  `protobuf:"varint,6,opt,name=node_count,json=nodeCount,proto3" json:"node_count,omitempty"`
	GpuCount  uint32  `protobuf:"varint,7,opt,name=gpu_count,json=gpuCount,proto3" json:"gpu_count,omitempty"`
	// if not set, use default memory size
	MemoryMb         *uint64 `protobuf:"varint,8,opt,name=memory_mb,json=memoryMb,proto3,oneof" json:"memory_mb,omitempty"`
	CoreCount        uint32  `protobuf:"varint,9,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
	TimeLimitMinutes *uint32 `protobuf:"varint,10,opt,name=time_limit_minutes,json=timeLimitMinutes,proto3,oneof" json:"time_limit_minutes,omitempty"`
	Script           string  `protobuf:"bytes,11,opt,name=script,proto3" json:"script,omitempty"`
	WorkingDirectory string  `protobuf:"bytes,12,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	// relative to working directory
	Stdout *string `protobuf:"bytes,13,opt,name=stdout,proto3,oneof" json:"stdout,omitempty"`
	// relative to working directory
	Stderr *string `protobuf:"bytes,14,opt,name=stderr,proto3,oneof" json:"stderr,omitempty"`
	// extra options when submitting job
	ExtraOptions  []string `protobuf:"bytes,15,rep,name=extra_options,json=extraOptions,proto3" json:"extra_options,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitJobRequest) Reset() {
	*x = SubmitJobRequest{}
	mi := &file_job_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobRequest) ProtoMessage() {}

func (x *SubmitJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitJobRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{12}
}

func (x *SubmitJobRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubmitJobRequest) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *SubmitJobRequest) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *SubmitJobRequest) GetPartition() string {
	if x != nil {
		return x.Partition
	}
	return ""
}

func (x *SubmitJobRequest) GetQos() string {
	if x != nil && x.Qos != nil {
		return *x.Qos
	}
	return ""
}

func (x *SubmitJobRequest) GetNodeCount() uint32 {
	if x != nil {
		return x.NodeCount
	}
	return 0
}

func (x *SubmitJobRequest) GetGpuCount() uint32 {
	if x != nil {
		return x.GpuCount
	}
	return 0
}

func (x *SubmitJobRequest) GetMemoryMb() uint64 {
	if x != nil && x.MemoryMb != nil {
		return *x.MemoryMb
	}
	return 0
}

func (x *SubmitJobRequest) GetCoreCount() uint32 {
	if x != nil {
		return x.CoreCount
	}
	return 0
}

func (x *SubmitJobRequest) GetTimeLimitMinutes() uint32 {
	if x != nil && x.TimeLimitMinutes != nil {
		return *x.TimeLimitMinutes
	}
	return 0
}

func (x *SubmitJobRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *SubmitJobRequest) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *SubmitJobRequest) GetStdout() string {
	if x != nil && x.Stdout != nil {
		return *x.Stdout
	}
	return ""
}

func (x *SubmitJobRequest) GetStderr() string {
	if x != nil && x.Stderr != nil {
		return *x.Stderr
	}
	return ""
}

func (x *SubmitJobRequest) GetExtraOptions() []string {
	if x != nil {
		return x.ExtraOptions
	}
	return nil
}

type SubmitJobResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	JobId           uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	GeneratedScript string                 `protobuf:"bytes,2,opt,name=generated_script,json=generatedScript,proto3" json:"generated_script,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubmitJobResponse) Reset() {
	*x = SubmitJobResponse{}
	mi := &file_job_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitJobResponse) ProtoMessage() {}

func (x *SubmitJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitJobResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{13}
}

func (x *SubmitJobResponse) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *SubmitJobResponse) GetGeneratedScript() string {
	if x != nil {
		return x.GeneratedScript
	}
	return ""
}

type CancelJobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	JobId         int32                  `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelJobRequest) Reset() {
	*x = CancelJobRequest{}
	mi := &file_job_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobRequest) ProtoMessage() {}

func (x *CancelJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobRequest.ProtoReflect.Descriptor instead.
func (*CancelJobRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{14}
}

func (x *CancelJobRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CancelJobRequest) GetJobId() int32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type CancelJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelJobResponse) Reset() {
	*x = CancelJobResponse{}
	mi := &file_job_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelJobResponse) ProtoMessage() {}

func (x *CancelJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelJobResponse.ProtoReflect.Descriptor instead.
func (*CancelJobResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{15}
}

type SubmitScriptAsJobRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UserId string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Script string                 `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"`
	// absolute path of the script file, used as job's work directory when not specified in script
	ScriptFileFullPath *string `protobuf:"bytes,3,opt,name=script_file_full_path,json=scriptFileFullPath,proto3,oneof" json:"script_file_full_path,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SubmitScriptAsJobRequest) Reset() {
	*x = SubmitScriptAsJobRequest{}
	mi := &file_job_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitScriptAsJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScriptAsJobRequest) ProtoMessage() {}

func (x *SubmitScriptAsJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScriptAsJobRequest.ProtoReflect.Descriptor instead.
func (*SubmitScriptAsJobRequest) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{16}
}

func (x *SubmitScriptAsJobRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SubmitScriptAsJobRequest) GetScript() string {
	if x != nil {
		return x.Script
	}
	return ""
}

func (x *SubmitScriptAsJobRequest) GetScriptFileFullPath() string {
	if x != nil && x.ScriptFileFullPath != nil {
		return *x.ScriptFileFullPath
	}
	return ""
}

type SubmitScriptAsJobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         uint32                 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitScriptAsJobResponse) Reset() {
	*x = SubmitScriptAsJobResponse{}
	mi := &file_job_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitScriptAsJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitScriptAsJobResponse) ProtoMessage() {}

func (x *SubmitScriptAsJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitScriptAsJobResponse.ProtoReflect.Descriptor instead.
func (*SubmitScriptAsJobResponse) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{17}
}

func (x *SubmitScriptAsJobResponse) GetJobId() uint32 {
	if x != nil {
		return x.JobId
	}
	return 0
}

// filter options. The logical relationship between multiple filtering options is "AND".
type GetJobsRequest_Filter struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	Users    []string               `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Accounts []string               `protobuf:"bytes,2,rep,name=accounts,proto3" json:"accounts,omitempty"`
	States   []string               `protobuf:"bytes,3,rep,name=states,proto3" json:"states,omitempty"`
	// if set this field, return jobs that submitted between the time range(both endpoints included)
	SubmitTime *TimeRange `protobuf:"bytes,4,opt,name=submit_time,json=submitTime,proto3,oneof" json:"submit_time,omitempty"`
	// if set this field, return jobs that ended between the time range(both endpoints included)
	EndTime       *TimeRange `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3,oneof" json:"end_time,omitempty"`
	JobId         *uint32    `protobuf:"varint,6,opt,name=job_id,json=jobId,proto3,oneof" json:"job_id,omitempty"`
	JobName       *string    `protobuf:"bytes,7,opt,name=job_name,json=jobName,proto3,oneof" json:"job_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetJobsRequest_Filter) Reset() {
	*x = GetJobsRequest_Filter{}
	mi := &file_job_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetJobsRequest_Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobsRequest_Filter) ProtoMessage() {}

func (x *GetJobsRequest_Filter) ProtoReflect() protoreflect.Message {
	mi := &file_job_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobsRequest_Filter.ProtoReflect.Descriptor instead.
func (*GetJobsRequest_Filter) Descriptor() ([]byte, []int) {
	return file_job_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetJobsRequest_Filter) GetUsers() []string {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetJobsRequest_Filter) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *GetJobsRequest_Filter) GetStates() []string {
	if x != nil {
		return x.States
	}
	return nil
}

func (x *GetJobsRequest_Filter) GetSubmitTime() *TimeRange {
	if x != nil {
		return x.SubmitTime
	}
	return nil
}

func (x *GetJobsRequest_Filter) GetEndTime() *TimeRange {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetJobsRequest_Filter) GetJobId() uint32 {
	if x != nil && x.JobId != nil {
		return *x.JobId
	}
	return 0
}

func (x *GetJobsRequest_Filter) GetJobName() string {
	if x != nil && x.JobName != nil {
		return *x.JobName
	}
	return ""
}

var File_job_proto protoreflect.FileDescriptor

var file_job_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x73, 0x63, 0x6f,
	0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x08, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x63, 0x70, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x6d, 0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x4d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0b, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x65, 0x6c, 0x61,
	0x70, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x03, 0x52, 0x0e, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x67, 0x70,
	0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x70,
	0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x09, 0x63, 0x70, 0x75, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f, 0x6d, 0x62, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x08, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x4d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0a, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x64, 0x6f,
	0x75, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x70, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x5f,
	0x6d, 0x62, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0xa3, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x1e, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x01, 0x22, 0xe7, 0x04, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a,
	0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x48, 0x02, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x1a, 0xcf, 0x02,
	0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6a, 0x6f,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07,
	0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x06,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6a, 0x6f,
	0x62, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x57, 0x0a, 0x19,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a,
	0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x18, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x19, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a,
	0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xac, 0x04, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x03, 0x71, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x71, 0x6f, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x67, 0x70, 0x75,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x6d, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x72,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1b,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x71, 0x6f, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6d, 0x62, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x64, 0x6f, 0x75, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x22, 0x55, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x9d, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x41, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x36,
	0x0a, 0x15, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x50,
	0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x22, 0x32, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x41, 0x73, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x32, 0x82, 0x06, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x26,
	0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x63, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x49, 0x64, 0x12, 0x29, 0x2e,
	0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x6f,
	0x62, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x31, 0x2e, 0x73, 0x63, 0x6f,
	0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x6f, 0x62,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4a, 0x6f, 0x62, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x28, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x12, 0x28, 0x2e, 0x73, 0x63, 0x6f,
	0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x78, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41,
	0x73, 0x4a, 0x6f, 0x62, 0x12, 0x30, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x73, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x41, 0x73, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb3, 0x01, 0x0a, 0x1a, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x63, 0x6f, 0x77, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x42, 0x08, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x16, 0x73, 0x63, 0x6f, 0x77, 0x2d, 0x63, 0x72, 0x61, 0x6e, 0x65,
	0x2d, 0x61, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0xa2, 0x02, 0x03, 0x53,
	0x53, 0x58, 0xaa, 0x02, 0x15, 0x53, 0x63, 0x6f, 0x77, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0xca, 0x02, 0x15, 0x53, 0x63, 0x6f,
	0x77, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74,
	0x65, 0x72, 0xe2, 0x02, 0x21, 0x53, 0x63, 0x6f, 0x77, 0x5c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x16, 0x53, 0x63, 0x6f, 0x77, 0x3a, 0x3a, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_job_proto_rawDescOnce sync.Once
	file_job_proto_rawDescData []byte
)

func file_job_proto_rawDescGZIP() []byte {
	file_job_proto_rawDescOnce.Do(func() {
		file_job_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_job_proto_rawDesc), len(file_job_proto_rawDesc)))
	})
	return file_job_proto_rawDescData
}

var file_job_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_job_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_job_proto_goTypes = []any{
	(SortInfo_SortOrder)(0),            // 0: scow.scheduler_adapter.SortInfo.SortOrder
	(*JobInfo)(nil),                    // 1: scow.scheduler_adapter.JobInfo
	(*TimeRange)(nil),                  // 2: scow.scheduler_adapter.TimeRange
	(*PageInfo)(nil),                   // 3: scow.scheduler_adapter.PageInfo
	(*SortInfo)(nil),                   // 4: scow.scheduler_adapter.SortInfo
	(*GetJobsRequest)(nil),             // 5: scow.scheduler_adapter.GetJobsRequest
	(*GetJobsResponse)(nil),            // 6: scow.scheduler_adapter.GetJobsResponse
	(*GetJobByIdRequest)(nil),          // 7: scow.scheduler_adapter.GetJobByIdRequest
	(*GetJobByIdResponse)(nil),         // 8: scow.scheduler_adapter.GetJobByIdResponse
	(*ChangeJobTimeLimitRequest)(nil),  // 9: scow.scheduler_adapter.ChangeJobTimeLimitRequest
	(*ChangeJobTimeLimitResponse)(nil), // 10: scow.scheduler_adapter.ChangeJobTimeLimitResponse
	(*QueryJobTimeLimitRequest)(nil),   // 11: scow.scheduler_adapter.QueryJobTimeLimitRequest
	(*QueryJobTimeLimitResponse)(nil),  // 12: scow.scheduler_adapter.QueryJobTimeLimitResponse
	(*SubmitJobRequest)(nil),           // 13: scow.scheduler_adapter.SubmitJobRequest
	(*SubmitJobResponse)(nil),          // 14: scow.scheduler_adapter.SubmitJobResponse
	(*CancelJobRequest)(nil),           // 15: scow.scheduler_adapter.CancelJobRequest
	(*CancelJobResponse)(nil),          // 16: scow.scheduler_adapter.CancelJobResponse
	(*SubmitScriptAsJobRequest)(nil),   // 17: scow.scheduler_adapter.SubmitScriptAsJobRequest
	(*SubmitScriptAsJobResponse)(nil),  // 18: scow.scheduler_adapter.SubmitScriptAsJobResponse
	(*GetJobsRequest_Filter)(nil),      // 19: scow.scheduler_adapter.GetJobsRequest.Filter
	(*timestamppb.Timestamp)(nil),      // 20: google.protobuf.Timestamp
}
var file_job_proto_depIdxs = []int32{
	20, // 0: scow.scheduler_adapter.JobInfo.submit_time:type_name -> google.protobuf.Timestamp
	20, // 1: scow.scheduler_adapter.JobInfo.start_time:type_name -> google.protobuf.Timestamp
	20, // 2: scow.scheduler_adapter.JobInfo.end_time:type_name -> google.protobuf.Timestamp
	20, // 3: scow.scheduler_adapter.TimeRange.start_time:type_name -> google.protobuf.Timestamp
	20, // 4: scow.scheduler_adapter.TimeRange.end_time:type_name -> google.protobuf.Timestamp
	0,  // 5: scow.scheduler_adapter.SortInfo.order:type_name -> scow.scheduler_adapter.SortInfo.SortOrder
	19, // 6: scow.scheduler_adapter.GetJobsRequest.filter:type_name -> scow.scheduler_adapter.GetJobsRequest.Filter
	3,  // 7: scow.scheduler_adapter.GetJobsRequest.page_info:type_name -> scow.scheduler_adapter.PageInfo
	4,  // 8: scow.scheduler_adapter.GetJobsRequest.sort:type_name -> scow.scheduler_adapter.SortInfo
	1,  // 9: scow.scheduler_adapter.GetJobsResponse.jobs:type_name -> scow.scheduler_adapter.JobInfo
	1,  // 10: scow.scheduler_adapter.GetJobByIdResponse.job:type_name -> scow.scheduler_adapter.JobInfo
	2,  // 11: scow.scheduler_adapter.GetJobsRequest.Filter.submit_time:type_name -> scow.scheduler_adapter.TimeRange
	2,  // 12: scow.scheduler_adapter.GetJobsRequest.Filter.end_time:type_name -> scow.scheduler_adapter.TimeRange
	5,  // 13: scow.scheduler_adapter.JobService.GetJobs:input_type -> scow.scheduler_adapter.GetJobsRequest
	7,  // 14: scow.scheduler_adapter.JobService.GetJobById:input_type -> scow.scheduler_adapter.GetJobByIdRequest
	9,  // 15: scow.scheduler_adapter.JobService.ChangeJobTimeLimit:input_type -> scow.scheduler_adapter.ChangeJobTimeLimitRequest
	11, // 16: scow.scheduler_adapter.JobService.QueryJobTimeLimit:input_type -> scow.scheduler_adapter.QueryJobTimeLimitRequest
	13, // 17: scow.scheduler_adapter.JobService.SubmitJob:input_type -> scow.scheduler_adapter.SubmitJobRequest
	15, // 18: scow.scheduler_adapter.JobService.CancelJob:input_type -> scow.scheduler_adapter.CancelJobRequest
	17, // 19: scow.scheduler_adapter.JobService.SubmitScriptAsJob:input_type -> scow.scheduler_adapter.SubmitScriptAsJobRequest
	6,  // 20: scow.scheduler_adapter.JobService.GetJobs:output_type -> scow.scheduler_adapter.GetJobsResponse
	8,  // 21: scow.scheduler_adapter.JobService.GetJobById:output_type -> scow.scheduler_adapter.GetJobByIdResponse
	10, // 22: scow.scheduler_adapter.JobService.ChangeJobTimeLimit:output_type -> scow.scheduler_adapter.ChangeJobTimeLimitResponse
	12, // 23: scow.scheduler_adapter.JobService.QueryJobTimeLimit:output_type -> scow.scheduler_adapter.QueryJobTimeLimitResponse
	14, // 24: scow.scheduler_adapter.JobService.SubmitJob:output_type -> scow.scheduler_adapter.SubmitJobResponse
	16, // 25: scow.scheduler_adapter.JobService.CancelJob:output_type -> scow.scheduler_adapter.CancelJobResponse
	18, // 26: scow.scheduler_adapter.JobService.SubmitScriptAsJob:output_type -> scow.scheduler_adapter.SubmitScriptAsJobResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_job_proto_init() }
func file_job_proto_init() {
	if File_job_proto != nil {
		return
	}
	file_job_proto_msgTypes[0].OneofWrappers = []any{}
	file_job_proto_msgTypes[1].OneofWrappers = []any{}
	file_job_proto_msgTypes[4].OneofWrappers = []any{}
	file_job_proto_msgTypes[5].OneofWrappers = []any{}
	file_job_proto_msgTypes[12].OneofWrappers = []any{}
	file_job_proto_msgTypes[16].OneofWrappers = []any{}
	file_job_proto_msgTypes[18].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_job_proto_rawDesc), len(file_job_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_job_proto_goTypes,
		DependencyIndexes: file_job_proto_depIdxs,
		EnumInfos:         file_job_proto_enumTypes,
		MessageInfos:      file_job_proto_msgTypes,
	}.Build()
	File_job_proto = out.File
	file_job_proto_goTypes = nil
	file_job_proto_depIdxs = nil
}
